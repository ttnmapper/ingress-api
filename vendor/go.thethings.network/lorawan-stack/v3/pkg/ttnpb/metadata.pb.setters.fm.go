// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	fmt "fmt"
	time "time"

	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
)

func (dst *RxMetadata) SetFields(src *RxMetadata, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "gateway_ids":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayIdentifiers
				if src != nil {
					newSrc = &src.GatewayIdentifiers
				}
				newDst = &dst.GatewayIdentifiers
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GatewayIdentifiers = src.GatewayIdentifiers
				} else {
					var zero GatewayIdentifiers
					dst.GatewayIdentifiers = zero
				}
			}
		case "packet_broker":
			if len(subs) > 0 {
				var newDst, newSrc *PacketBrokerMetadata
				if (src == nil || src.PacketBroker == nil) && dst.PacketBroker == nil {
					continue
				}
				if src != nil {
					newSrc = src.PacketBroker
				}
				if dst.PacketBroker != nil {
					newDst = dst.PacketBroker
				} else {
					newDst = &PacketBrokerMetadata{}
					dst.PacketBroker = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.PacketBroker = src.PacketBroker
				} else {
					dst.PacketBroker = nil
				}
			}
		case "antenna_index":
			if len(subs) > 0 {
				return fmt.Errorf("'antenna_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AntennaIndex = src.AntennaIndex
			} else {
				var zero uint32
				dst.AntennaIndex = zero
			}
		case "time":
			if len(subs) > 0 {
				return fmt.Errorf("'time' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Time = src.Time
			} else {
				dst.Time = nil
			}
		case "timestamp":
			if len(subs) > 0 {
				return fmt.Errorf("'timestamp' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Timestamp = src.Timestamp
			} else {
				var zero uint32
				dst.Timestamp = zero
			}
		case "fine_timestamp":
			if len(subs) > 0 {
				return fmt.Errorf("'fine_timestamp' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FineTimestamp = src.FineTimestamp
			} else {
				var zero uint64
				dst.FineTimestamp = zero
			}
		case "encrypted_fine_timestamp":
			if len(subs) > 0 {
				return fmt.Errorf("'encrypted_fine_timestamp' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EncryptedFineTimestamp = src.EncryptedFineTimestamp
			} else {
				dst.EncryptedFineTimestamp = nil
			}
		case "encrypted_fine_timestamp_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'encrypted_fine_timestamp_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EncryptedFineTimestampKeyID = src.EncryptedFineTimestampKeyID
			} else {
				var zero string
				dst.EncryptedFineTimestampKeyID = zero
			}
		case "rssi":
			if len(subs) > 0 {
				return fmt.Errorf("'rssi' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RSSI = src.RSSI
			} else {
				var zero float32
				dst.RSSI = zero
			}
		case "signal_rssi":
			if len(subs) > 0 {
				return fmt.Errorf("'signal_rssi' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SignalRSSI = src.SignalRSSI
			} else {
				dst.SignalRSSI = nil
			}
		case "channel_rssi":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_rssi' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelRSSI = src.ChannelRSSI
			} else {
				var zero float32
				dst.ChannelRSSI = zero
			}
		case "rssi_standard_deviation":
			if len(subs) > 0 {
				return fmt.Errorf("'rssi_standard_deviation' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RSSIStandardDeviation = src.RSSIStandardDeviation
			} else {
				var zero float32
				dst.RSSIStandardDeviation = zero
			}
		case "snr":
			if len(subs) > 0 {
				return fmt.Errorf("'snr' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SNR = src.SNR
			} else {
				var zero float32
				dst.SNR = zero
			}
		case "frequency_offset":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency_offset' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrequencyOffset = src.FrequencyOffset
			} else {
				var zero int64
				dst.FrequencyOffset = zero
			}
		case "location":
			if len(subs) > 0 {
				var newDst, newSrc *Location
				if (src == nil || src.Location == nil) && dst.Location == nil {
					continue
				}
				if src != nil {
					newSrc = src.Location
				}
				if dst.Location != nil {
					newDst = dst.Location
				} else {
					newDst = &Location{}
					dst.Location = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Location = src.Location
				} else {
					dst.Location = nil
				}
			}
		case "downlink_path_constraint":
			if len(subs) > 0 {
				return fmt.Errorf("'downlink_path_constraint' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DownlinkPathConstraint = src.DownlinkPathConstraint
			} else {
				var zero DownlinkPathConstraint
				dst.DownlinkPathConstraint = zero
			}
		case "uplink_token":
			if len(subs) > 0 {
				return fmt.Errorf("'uplink_token' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UplinkToken = src.UplinkToken
			} else {
				dst.UplinkToken = nil
			}
		case "channel_index":
			if len(subs) > 0 {
				return fmt.Errorf("'channel_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ChannelIndex = src.ChannelIndex
			} else {
				var zero uint32
				dst.ChannelIndex = zero
			}
		case "advanced":
			if len(subs) > 0 {
				return fmt.Errorf("'advanced' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Advanced = src.Advanced
			} else {
				dst.Advanced = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *Location) SetFields(src *Location, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "latitude":
			if len(subs) > 0 {
				return fmt.Errorf("'latitude' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Latitude = src.Latitude
			} else {
				var zero float64
				dst.Latitude = zero
			}
		case "longitude":
			if len(subs) > 0 {
				return fmt.Errorf("'longitude' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Longitude = src.Longitude
			} else {
				var zero float64
				dst.Longitude = zero
			}
		case "altitude":
			if len(subs) > 0 {
				return fmt.Errorf("'altitude' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Altitude = src.Altitude
			} else {
				var zero int32
				dst.Altitude = zero
			}
		case "accuracy":
			if len(subs) > 0 {
				return fmt.Errorf("'accuracy' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Accuracy = src.Accuracy
			} else {
				var zero int32
				dst.Accuracy = zero
			}
		case "source":
			if len(subs) > 0 {
				return fmt.Errorf("'source' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Source = src.Source
			} else {
				var zero LocationSource
				dst.Source = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *PacketBrokerMetadata) SetFields(src *PacketBrokerMetadata, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "message_id":
			if len(subs) > 0 {
				return fmt.Errorf("'message_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MessageId = src.MessageId
			} else {
				var zero string
				dst.MessageId = zero
			}
		case "forwarder_net_id":
			if len(subs) > 0 {
				return fmt.Errorf("'forwarder_net_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ForwarderNetId = src.ForwarderNetId
			} else {
				var zero go_thethings_network_lorawan_stack_v3_pkg_types.NetID
				dst.ForwarderNetId = zero
			}
		case "forwarder_tenant_id":
			if len(subs) > 0 {
				return fmt.Errorf("'forwarder_tenant_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ForwarderTenantId = src.ForwarderTenantId
			} else {
				var zero string
				dst.ForwarderTenantId = zero
			}
		case "forwarder_cluster_id":
			if len(subs) > 0 {
				return fmt.Errorf("'forwarder_cluster_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ForwarderClusterId = src.ForwarderClusterId
			} else {
				var zero string
				dst.ForwarderClusterId = zero
			}
		case "forwarder_gateway_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'forwarder_gateway_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ForwarderGatewayEui = src.ForwarderGatewayEui
			} else {
				dst.ForwarderGatewayEui = nil
			}
		case "forwarder_gateway_id":
			if len(subs) > 0 {
				return fmt.Errorf("'forwarder_gateway_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ForwarderGatewayId = src.ForwarderGatewayId
			} else {
				dst.ForwarderGatewayId = nil
			}
		case "home_network_net_id":
			if len(subs) > 0 {
				return fmt.Errorf("'home_network_net_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.HomeNetworkNetId = src.HomeNetworkNetId
			} else {
				var zero go_thethings_network_lorawan_stack_v3_pkg_types.NetID
				dst.HomeNetworkNetId = zero
			}
		case "home_network_tenant_id":
			if len(subs) > 0 {
				return fmt.Errorf("'home_network_tenant_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.HomeNetworkTenantId = src.HomeNetworkTenantId
			} else {
				var zero string
				dst.HomeNetworkTenantId = zero
			}
		case "home_network_cluster_id":
			if len(subs) > 0 {
				return fmt.Errorf("'home_network_cluster_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.HomeNetworkClusterId = src.HomeNetworkClusterId
			} else {
				var zero string
				dst.HomeNetworkClusterId = zero
			}
		case "hops":
			if len(subs) > 0 {
				return fmt.Errorf("'hops' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Hops = src.Hops
			} else {
				dst.Hops = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *PacketBrokerRouteHop) SetFields(src *PacketBrokerRouteHop, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "received_at":
			if len(subs) > 0 {
				return fmt.Errorf("'received_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ReceivedAt = src.ReceivedAt
			} else {
				var zero time.Time
				dst.ReceivedAt = zero
			}
		case "sender_name":
			if len(subs) > 0 {
				return fmt.Errorf("'sender_name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SenderName = src.SenderName
			} else {
				var zero string
				dst.SenderName = zero
			}
		case "sender_address":
			if len(subs) > 0 {
				return fmt.Errorf("'sender_address' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SenderAddress = src.SenderAddress
			} else {
				var zero string
				dst.SenderAddress = zero
			}
		case "receiver_name":
			if len(subs) > 0 {
				return fmt.Errorf("'receiver_name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ReceiverName = src.ReceiverName
			} else {
				var zero string
				dst.ReceiverName = zero
			}
		case "receiver_agent":
			if len(subs) > 0 {
				return fmt.Errorf("'receiver_agent' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ReceiverAgent = src.ReceiverAgent
			} else {
				var zero string
				dst.ReceiverAgent = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
