// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v1.4.2
// - protoc             v3.21.1
// source: lorawan-stack/api/simulate.proto

package ttnpb

import (
	golang "github.com/TheThingsIndustries/protoc-gen-go-json/golang"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
	types "go.thethings.network/lorawan-stack/v3/pkg/types"
)

// MarshalProtoJSON marshals the SimulateMetadataParams message to JSON.
func (x *SimulateMetadataParams) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Rssi != 0 || s.HasField("rssi") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rssi")
		s.WriteFloat32(x.Rssi)
	}
	if x.Snr != 0 || s.HasField("snr") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("snr")
		s.WriteFloat32(x.Snr)
	}
	if x.Timestamp != 0 || s.HasField("timestamp") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("timestamp")
		s.WriteUint32(x.Timestamp)
	}
	if x.Time != nil || s.HasField("time") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("time")
		if x.Time == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.Time)
		}
	}
	if x.LorawanVersion != 0 || s.HasField("lorawan_version") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lorawan_version")
		x.LorawanVersion.MarshalProtoJSON(s)
	}
	if x.LorawanPhyVersion != 0 || s.HasField("lorawan_phy_version") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lorawan_phy_version")
		x.LorawanPhyVersion.MarshalProtoJSON(s)
	}
	if x.BandId != "" || s.HasField("band_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("band_id")
		s.WriteString(x.BandId)
	}
	if x.Frequency != 0 || s.HasField("frequency") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frequency")
		s.WriteUint64(x.Frequency)
	}
	if x.ChannelIndex != 0 || s.HasField("channel_index") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channel_index")
		s.WriteUint32(x.ChannelIndex)
	}
	if x.Bandwidth != 0 || s.HasField("bandwidth") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("bandwidth")
		s.WriteUint32(x.Bandwidth)
	}
	if x.SpreadingFactor != 0 || s.HasField("spreading_factor") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("spreading_factor")
		s.WriteUint32(x.SpreadingFactor)
	}
	if x.DataRateIndex != 0 || s.HasField("data_rate_index") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("data_rate_index")
		s.WriteUint32(x.DataRateIndex)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SimulateMetadataParams to JSON.
func (x *SimulateMetadataParams) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SimulateMetadataParams message from JSON.
func (x *SimulateMetadataParams) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "rssi":
			s.AddField("rssi")
			x.Rssi = s.ReadFloat32()
		case "snr":
			s.AddField("snr")
			x.Snr = s.ReadFloat32()
		case "timestamp":
			s.AddField("timestamp")
			x.Timestamp = s.ReadUint32()
		case "time":
			s.AddField("time")
			if s.ReadNil() {
				x.Time = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.Time = v
		case "lorawan_version", "lorawanVersion":
			s.AddField("lorawan_version")
			x.LorawanVersion.UnmarshalProtoJSON(s)
		case "lorawan_phy_version", "lorawanPhyVersion":
			s.AddField("lorawan_phy_version")
			x.LorawanPhyVersion.UnmarshalProtoJSON(s)
		case "band_id", "bandId":
			s.AddField("band_id")
			x.BandId = s.ReadString()
		case "frequency":
			s.AddField("frequency")
			x.Frequency = s.ReadUint64()
		case "channel_index", "channelIndex":
			s.AddField("channel_index")
			x.ChannelIndex = s.ReadUint32()
		case "bandwidth":
			s.AddField("bandwidth")
			x.Bandwidth = s.ReadUint32()
		case "spreading_factor", "spreadingFactor":
			s.AddField("spreading_factor")
			x.SpreadingFactor = s.ReadUint32()
		case "data_rate_index", "dataRateIndex":
			s.AddField("data_rate_index")
			x.DataRateIndex = s.ReadUint32()
		}
	})
}

// UnmarshalJSON unmarshals the SimulateMetadataParams from JSON.
func (x *SimulateMetadataParams) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SimulateJoinRequestParams message to JSON.
func (x *SimulateJoinRequestParams) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.JoinEui) > 0 || s.HasField("join_eui") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("join_eui")
		types.MarshalHEXBytes(s.WithField("join_eui"), x.JoinEui)
	}
	if len(x.DevEui) > 0 || s.HasField("dev_eui") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dev_eui")
		types.MarshalHEXBytes(s.WithField("dev_eui"), x.DevEui)
	}
	if len(x.DevNonce) > 0 || s.HasField("dev_nonce") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dev_nonce")
		types.MarshalHEXBytes(s.WithField("dev_nonce"), x.DevNonce)
	}
	if len(x.AppKey) > 0 || s.HasField("app_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("app_key")
		types.MarshalHEXBytes(s.WithField("app_key"), x.AppKey)
	}
	if len(x.NwkKey) > 0 || s.HasField("nwk_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("nwk_key")
		types.MarshalHEXBytes(s.WithField("nwk_key"), x.NwkKey)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SimulateJoinRequestParams to JSON.
func (x *SimulateJoinRequestParams) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SimulateJoinRequestParams message from JSON.
func (x *SimulateJoinRequestParams) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "join_eui", "joinEui":
			s.AddField("join_eui")
			x.JoinEui = types.Unmarshal8Bytes(s.WithField("join_eui", false))
		case "dev_eui", "devEui":
			s.AddField("dev_eui")
			x.DevEui = types.Unmarshal8Bytes(s.WithField("dev_eui", false))
		case "dev_nonce", "devNonce":
			s.AddField("dev_nonce")
			x.DevNonce = types.Unmarshal2Bytes(s.WithField("dev_nonce", false))
		case "app_key", "appKey":
			s.AddField("app_key")
			x.AppKey = types.Unmarshal16Bytes(s.WithField("app_key", false))
		case "nwk_key", "nwkKey":
			s.AddField("nwk_key")
			x.NwkKey = types.Unmarshal16Bytes(s.WithField("nwk_key", false))
		}
	})
}

// UnmarshalJSON unmarshals the SimulateJoinRequestParams from JSON.
func (x *SimulateJoinRequestParams) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SimulateDataUplinkParams message to JSON.
func (x *SimulateDataUplinkParams) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.DevAddr) > 0 || s.HasField("dev_addr") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dev_addr")
		types.MarshalHEXBytes(s.WithField("dev_addr"), x.DevAddr)
	}
	if len(x.FNwkSIntKey) > 0 || s.HasField("f_nwk_s_int_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("f_nwk_s_int_key")
		types.MarshalHEXBytes(s.WithField("f_nwk_s_int_key"), x.FNwkSIntKey)
	}
	if len(x.SNwkSIntKey) > 0 || s.HasField("s_nwk_s_int_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("s_nwk_s_int_key")
		types.MarshalHEXBytes(s.WithField("s_nwk_s_int_key"), x.SNwkSIntKey)
	}
	if len(x.NwkSEncKey) > 0 || s.HasField("nwk_s_enc_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("nwk_s_enc_key")
		types.MarshalHEXBytes(s.WithField("nwk_s_enc_key"), x.NwkSEncKey)
	}
	if len(x.AppSKey) > 0 || s.HasField("app_s_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("app_s_key")
		types.MarshalHEXBytes(s.WithField("app_s_key"), x.AppSKey)
	}
	if x.Adr || s.HasField("adr") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr")
		s.WriteBool(x.Adr)
	}
	if x.AdrAckReq || s.HasField("adr_ack_req") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_ack_req")
		s.WriteBool(x.AdrAckReq)
	}
	if x.Confirmed || s.HasField("confirmed") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("confirmed")
		s.WriteBool(x.Confirmed)
	}
	if x.Ack || s.HasField("ack") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ack")
		s.WriteBool(x.Ack)
	}
	if x.FCnt != 0 || s.HasField("f_cnt") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("f_cnt")
		s.WriteUint32(x.FCnt)
	}
	if x.FPort != 0 || s.HasField("f_port") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("f_port")
		s.WriteUint32(x.FPort)
	}
	if len(x.FrmPayload) > 0 || s.HasField("frm_payload") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frm_payload")
		s.WriteBytes(x.FrmPayload)
	}
	if x.ConfFCnt != 0 || s.HasField("conf_f_cnt") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("conf_f_cnt")
		s.WriteUint32(x.ConfFCnt)
	}
	if x.TxDrIdx != 0 || s.HasField("tx_dr_idx") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tx_dr_idx")
		s.WriteUint32(x.TxDrIdx)
	}
	if x.TxChIdx != 0 || s.HasField("tx_ch_idx") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tx_ch_idx")
		s.WriteUint32(x.TxChIdx)
	}
	if len(x.FOpts) > 0 || s.HasField("f_opts") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("f_opts")
		s.WriteBytes(x.FOpts)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SimulateDataUplinkParams to JSON.
func (x *SimulateDataUplinkParams) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SimulateDataUplinkParams message from JSON.
func (x *SimulateDataUplinkParams) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "dev_addr", "devAddr":
			s.AddField("dev_addr")
			x.DevAddr = types.Unmarshal4Bytes(s.WithField("dev_addr", false))
		case "f_nwk_s_int_key", "fNwkSIntKey":
			s.AddField("f_nwk_s_int_key")
			x.FNwkSIntKey = types.Unmarshal16Bytes(s.WithField("f_nwk_s_int_key", false))
		case "s_nwk_s_int_key", "sNwkSIntKey":
			s.AddField("s_nwk_s_int_key")
			x.SNwkSIntKey = types.Unmarshal16Bytes(s.WithField("s_nwk_s_int_key", false))
		case "nwk_s_enc_key", "nwkSEncKey":
			s.AddField("nwk_s_enc_key")
			x.NwkSEncKey = types.Unmarshal16Bytes(s.WithField("nwk_s_enc_key", false))
		case "app_s_key", "appSKey":
			s.AddField("app_s_key")
			x.AppSKey = types.Unmarshal16Bytes(s.WithField("app_s_key", false))
		case "adr":
			s.AddField("adr")
			x.Adr = s.ReadBool()
		case "adr_ack_req", "adrAckReq":
			s.AddField("adr_ack_req")
			x.AdrAckReq = s.ReadBool()
		case "confirmed":
			s.AddField("confirmed")
			x.Confirmed = s.ReadBool()
		case "ack":
			s.AddField("ack")
			x.Ack = s.ReadBool()
		case "f_cnt", "fCnt":
			s.AddField("f_cnt")
			x.FCnt = s.ReadUint32()
		case "f_port", "fPort":
			s.AddField("f_port")
			x.FPort = s.ReadUint32()
		case "frm_payload", "frmPayload":
			s.AddField("frm_payload")
			x.FrmPayload = s.ReadBytes()
		case "conf_f_cnt", "confFCnt":
			s.AddField("conf_f_cnt")
			x.ConfFCnt = s.ReadUint32()
		case "tx_dr_idx", "txDrIdx":
			s.AddField("tx_dr_idx")
			x.TxDrIdx = s.ReadUint32()
		case "tx_ch_idx", "txChIdx":
			s.AddField("tx_ch_idx")
			x.TxChIdx = s.ReadUint32()
		case "f_opts", "fOpts":
			s.AddField("f_opts")
			x.FOpts = s.ReadBytes()
		}
	})
}

// UnmarshalJSON unmarshals the SimulateDataUplinkParams from JSON.
func (x *SimulateDataUplinkParams) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
