// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _error_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// ValidateFields checks the field values on ErrorDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ErrorDetails) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = ErrorDetailsFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "namespace":
			// no validation rules for Namespace
		case "name":
			// no validation rules for Name
		case "message_format":
			// no validation rules for MessageFormat
		case "attributes":

			if v, ok := interface{}(m.GetAttributes()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ErrorDetailsValidationError{
						field:  "attributes",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "correlation_id":
			// no validation rules for CorrelationID
		case "cause":

			if v, ok := interface{}(m.GetCause()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ErrorDetailsValidationError{
						field:  "cause",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "code":
			// no validation rules for Code
		case "details":

			for idx, item := range m.GetDetails() {
				_, _ = idx, item

				if v, ok := interface{}(item).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return ErrorDetailsValidationError{
							field:  fmt.Sprintf("details[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		default:
			return ErrorDetailsValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// ErrorDetailsValidationError is the validation error returned by
// ErrorDetails.ValidateFields if the designated constraints aren't met.
type ErrorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorDetailsValidationError) ErrorName() string { return "ErrorDetailsValidationError" }

// Error satisfies the builtin error interface
func (e ErrorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorDetailsValidationError{}
