// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v1.4.2
// - protoc             v3.21.1
// source: lorawan-stack/api/applicationserver.proto

package ttnpb

import (
	golang "github.com/TheThingsIndustries/protoc-gen-go-json/golang"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MarshalProtoJSON marshals the ApplicationLink message to JSON.
func (x *ApplicationLink) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.DefaultFormatters != nil || s.HasField("default_formatters") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("default_formatters")
		x.DefaultFormatters.MarshalProtoJSON(s.WithField("default_formatters"))
	}
	if x.SkipPayloadCrypto != nil || s.HasField("skip_payload_crypto") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("skip_payload_crypto")
		if x.SkipPayloadCrypto == nil {
			s.WriteNil()
		} else {
			s.WriteBool(x.SkipPayloadCrypto.Value)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ApplicationLink to JSON.
func (x *ApplicationLink) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ApplicationLink message from JSON.
func (x *ApplicationLink) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "default_formatters", "defaultFormatters":
			if s.ReadNil() {
				x.DefaultFormatters = nil
				return
			}
			x.DefaultFormatters = &MessagePayloadFormatters{}
			x.DefaultFormatters.UnmarshalProtoJSON(s.WithField("default_formatters", true))
		case "skip_payload_crypto", "skipPayloadCrypto":
			s.AddField("skip_payload_crypto")
			if s.ReadNil() {
				x.SkipPayloadCrypto = nil
				return
			}
			v := s.ReadWrappedBool()
			if s.Err() != nil {
				return
			}
			x.SkipPayloadCrypto = &wrapperspb.BoolValue{Value: v}
		}
	})
}

// UnmarshalJSON unmarshals the ApplicationLink from JSON.
func (x *ApplicationLink) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetApplicationLinkRequest message to JSON.
func (x *GetApplicationLinkRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ApplicationIds != nil || s.HasField("application_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("application_ids")
		// NOTE: ApplicationIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.ApplicationIds)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetApplicationLinkRequest to JSON.
func (x *GetApplicationLinkRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetApplicationLinkRequest message from JSON.
func (x *GetApplicationLinkRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "application_ids", "applicationIds":
			s.AddField("application_ids")
			if s.ReadNil() {
				x.ApplicationIds = nil
				return
			}
			// NOTE: ApplicationIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v ApplicationIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.ApplicationIds = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the GetApplicationLinkRequest from JSON.
func (x *GetApplicationLinkRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SetApplicationLinkRequest message to JSON.
func (x *SetApplicationLinkRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ApplicationIds != nil || s.HasField("application_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("application_ids")
		// NOTE: ApplicationIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.ApplicationIds)
	}
	if x.Link != nil || s.HasField("link") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("link")
		x.Link.MarshalProtoJSON(s.WithField("link"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SetApplicationLinkRequest to JSON.
func (x *SetApplicationLinkRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SetApplicationLinkRequest message from JSON.
func (x *SetApplicationLinkRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "application_ids", "applicationIds":
			s.AddField("application_ids")
			if s.ReadNil() {
				x.ApplicationIds = nil
				return
			}
			// NOTE: ApplicationIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v ApplicationIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.ApplicationIds = &v
		case "link":
			if s.ReadNil() {
				x.Link = nil
				return
			}
			x.Link = &ApplicationLink{}
			x.Link.UnmarshalProtoJSON(s.WithField("link", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the SetApplicationLinkRequest from JSON.
func (x *SetApplicationLinkRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the AsConfiguration_PubSub_Providers_Status to JSON.
func (x AsConfiguration_PubSub_Providers_Status) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), AsConfiguration_PubSub_Providers_Status_name)
}

// MarshalText marshals the AsConfiguration_PubSub_Providers_Status to text.
func (x AsConfiguration_PubSub_Providers_Status) MarshalText() ([]byte, error) {
	return []byte(jsonplugin.GetEnumString(int32(x), AsConfiguration_PubSub_Providers_Status_name)), nil
}

// MarshalJSON marshals the AsConfiguration_PubSub_Providers_Status to JSON.
func (x AsConfiguration_PubSub_Providers_Status) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the AsConfiguration_PubSub_Providers_Status from JSON.
func (x *AsConfiguration_PubSub_Providers_Status) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(AsConfiguration_PubSub_Providers_Status_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Status enum: %v", err)
		return
	}
	*x = AsConfiguration_PubSub_Providers_Status(v)
}

// UnmarshalText unmarshals the AsConfiguration_PubSub_Providers_Status from text.
func (x *AsConfiguration_PubSub_Providers_Status) UnmarshalText(b []byte) error {
	i, err := jsonplugin.ParseEnumString(string(b), AsConfiguration_PubSub_Providers_Status_value)
	if err != nil {
		return err
	}
	*x = AsConfiguration_PubSub_Providers_Status(i)
	return nil
}

// UnmarshalJSON unmarshals the AsConfiguration_PubSub_Providers_Status from JSON.
func (x *AsConfiguration_PubSub_Providers_Status) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the AsConfiguration_PubSub_Providers message to JSON.
func (x *AsConfiguration_PubSub_Providers) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Mqtt != 0 || s.HasField("mqtt") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mqtt")
		x.Mqtt.MarshalProtoJSON(s)
	}
	if x.Nats != 0 || s.HasField("nats") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("nats")
		x.Nats.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the AsConfiguration_PubSub_Providers to JSON.
func (x *AsConfiguration_PubSub_Providers) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the AsConfiguration_PubSub_Providers message from JSON.
func (x *AsConfiguration_PubSub_Providers) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "mqtt":
			s.AddField("mqtt")
			x.Mqtt.UnmarshalProtoJSON(s)
		case "nats":
			s.AddField("nats")
			x.Nats.UnmarshalProtoJSON(s)
		}
	})
}

// UnmarshalJSON unmarshals the AsConfiguration_PubSub_Providers from JSON.
func (x *AsConfiguration_PubSub_Providers) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the AsConfiguration_PubSub message to JSON.
func (x *AsConfiguration_PubSub) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Providers != nil || s.HasField("providers") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("providers")
		x.Providers.MarshalProtoJSON(s.WithField("providers"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the AsConfiguration_PubSub to JSON.
func (x *AsConfiguration_PubSub) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the AsConfiguration_PubSub message from JSON.
func (x *AsConfiguration_PubSub) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "providers":
			if s.ReadNil() {
				x.Providers = nil
				return
			}
			x.Providers = &AsConfiguration_PubSub_Providers{}
			x.Providers.UnmarshalProtoJSON(s.WithField("providers", true))
		}
	})
}

// UnmarshalJSON unmarshals the AsConfiguration_PubSub from JSON.
func (x *AsConfiguration_PubSub) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the AsConfiguration message to JSON.
func (x *AsConfiguration) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Pubsub != nil || s.HasField("pubsub") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("pubsub")
		x.Pubsub.MarshalProtoJSON(s.WithField("pubsub"))
	}
	if x.Webhooks != nil || s.HasField("webhooks") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("webhooks")
		// NOTE: AsConfiguration_Webhooks does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Webhooks)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the AsConfiguration to JSON.
func (x *AsConfiguration) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the AsConfiguration message from JSON.
func (x *AsConfiguration) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "pubsub":
			if s.ReadNil() {
				x.Pubsub = nil
				return
			}
			x.Pubsub = &AsConfiguration_PubSub{}
			x.Pubsub.UnmarshalProtoJSON(s.WithField("pubsub", true))
		case "webhooks":
			s.AddField("webhooks")
			if s.ReadNil() {
				x.Webhooks = nil
				return
			}
			// NOTE: AsConfiguration_Webhooks does not seem to implement UnmarshalProtoJSON.
			var v AsConfiguration_Webhooks
			golang.UnmarshalMessage(s, &v)
			x.Webhooks = &v
		}
	})
}

// UnmarshalJSON unmarshals the AsConfiguration from JSON.
func (x *AsConfiguration) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetAsConfigurationResponse message to JSON.
func (x *GetAsConfigurationResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Configuration != nil || s.HasField("configuration") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("configuration")
		x.Configuration.MarshalProtoJSON(s.WithField("configuration"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetAsConfigurationResponse to JSON.
func (x *GetAsConfigurationResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetAsConfigurationResponse message from JSON.
func (x *GetAsConfigurationResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "configuration":
			if s.ReadNil() {
				x.Configuration = nil
				return
			}
			x.Configuration = &AsConfiguration{}
			x.Configuration.UnmarshalProtoJSON(s.WithField("configuration", true))
		}
	})
}

// UnmarshalJSON unmarshals the GetAsConfigurationResponse from JSON.
func (x *GetAsConfigurationResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the NsAsHandleUplinkRequest message to JSON.
func (x *NsAsHandleUplinkRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.ApplicationUps) > 0 || s.HasField("application_ups") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("application_ups")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ApplicationUps {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("application_ups"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the NsAsHandleUplinkRequest to JSON.
func (x *NsAsHandleUplinkRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the NsAsHandleUplinkRequest message from JSON.
func (x *NsAsHandleUplinkRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "application_ups", "applicationUps":
			s.AddField("application_ups")
			if s.ReadNil() {
				x.ApplicationUps = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.ApplicationUps = append(x.ApplicationUps, nil)
					return
				}
				v := &ApplicationUp{}
				v.UnmarshalProtoJSON(s.WithField("application_ups", false))
				if s.Err() != nil {
					return
				}
				x.ApplicationUps = append(x.ApplicationUps, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the NsAsHandleUplinkRequest from JSON.
func (x *NsAsHandleUplinkRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the EncodeDownlinkRequest message to JSON.
func (x *EncodeDownlinkRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.VersionIds != nil || s.HasField("version_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("version_ids")
		// NOTE: EndDeviceVersionIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.VersionIds)
	}
	if x.Downlink != nil || s.HasField("downlink") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink")
		x.Downlink.MarshalProtoJSON(s.WithField("downlink"))
	}
	if x.Formatter != 0 || s.HasField("formatter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("formatter")
		x.Formatter.MarshalProtoJSON(s)
	}
	if x.Parameter != "" || s.HasField("parameter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("parameter")
		s.WriteString(x.Parameter)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the EncodeDownlinkRequest to JSON.
func (x *EncodeDownlinkRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the EncodeDownlinkRequest message from JSON.
func (x *EncodeDownlinkRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "version_ids", "versionIds":
			s.AddField("version_ids")
			if s.ReadNil() {
				x.VersionIds = nil
				return
			}
			// NOTE: EndDeviceVersionIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v EndDeviceVersionIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.VersionIds = &v
		case "downlink":
			if s.ReadNil() {
				x.Downlink = nil
				return
			}
			x.Downlink = &ApplicationDownlink{}
			x.Downlink.UnmarshalProtoJSON(s.WithField("downlink", true))
		case "formatter":
			s.AddField("formatter")
			x.Formatter.UnmarshalProtoJSON(s)
		case "parameter":
			s.AddField("parameter")
			x.Parameter = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the EncodeDownlinkRequest from JSON.
func (x *EncodeDownlinkRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the EncodeDownlinkResponse message to JSON.
func (x *EncodeDownlinkResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Downlink != nil || s.HasField("downlink") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink")
		x.Downlink.MarshalProtoJSON(s.WithField("downlink"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the EncodeDownlinkResponse to JSON.
func (x *EncodeDownlinkResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the EncodeDownlinkResponse message from JSON.
func (x *EncodeDownlinkResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "downlink":
			if s.ReadNil() {
				x.Downlink = nil
				return
			}
			x.Downlink = &ApplicationDownlink{}
			x.Downlink.UnmarshalProtoJSON(s.WithField("downlink", true))
		}
	})
}

// UnmarshalJSON unmarshals the EncodeDownlinkResponse from JSON.
func (x *EncodeDownlinkResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DecodeUplinkRequest message to JSON.
func (x *DecodeUplinkRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.VersionIds != nil || s.HasField("version_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("version_ids")
		// NOTE: EndDeviceVersionIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.VersionIds)
	}
	if x.Uplink != nil || s.HasField("uplink") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink")
		x.Uplink.MarshalProtoJSON(s.WithField("uplink"))
	}
	if x.Formatter != 0 || s.HasField("formatter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("formatter")
		x.Formatter.MarshalProtoJSON(s)
	}
	if x.Parameter != "" || s.HasField("parameter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("parameter")
		s.WriteString(x.Parameter)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DecodeUplinkRequest to JSON.
func (x *DecodeUplinkRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DecodeUplinkRequest message from JSON.
func (x *DecodeUplinkRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "version_ids", "versionIds":
			s.AddField("version_ids")
			if s.ReadNil() {
				x.VersionIds = nil
				return
			}
			// NOTE: EndDeviceVersionIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v EndDeviceVersionIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.VersionIds = &v
		case "uplink":
			if s.ReadNil() {
				x.Uplink = nil
				return
			}
			x.Uplink = &ApplicationUplink{}
			x.Uplink.UnmarshalProtoJSON(s.WithField("uplink", true))
		case "formatter":
			s.AddField("formatter")
			x.Formatter.UnmarshalProtoJSON(s)
		case "parameter":
			s.AddField("parameter")
			x.Parameter = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the DecodeUplinkRequest from JSON.
func (x *DecodeUplinkRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DecodeUplinkResponse message to JSON.
func (x *DecodeUplinkResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Uplink != nil || s.HasField("uplink") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink")
		x.Uplink.MarshalProtoJSON(s.WithField("uplink"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DecodeUplinkResponse to JSON.
func (x *DecodeUplinkResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DecodeUplinkResponse message from JSON.
func (x *DecodeUplinkResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "uplink":
			if s.ReadNil() {
				x.Uplink = nil
				return
			}
			x.Uplink = &ApplicationUplink{}
			x.Uplink.UnmarshalProtoJSON(s.WithField("uplink", true))
		}
	})
}

// UnmarshalJSON unmarshals the DecodeUplinkResponse from JSON.
func (x *DecodeUplinkResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DecodeDownlinkRequest message to JSON.
func (x *DecodeDownlinkRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.VersionIds != nil || s.HasField("version_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("version_ids")
		// NOTE: EndDeviceVersionIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.VersionIds)
	}
	if x.Downlink != nil || s.HasField("downlink") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink")
		x.Downlink.MarshalProtoJSON(s.WithField("downlink"))
	}
	if x.Formatter != 0 || s.HasField("formatter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("formatter")
		x.Formatter.MarshalProtoJSON(s)
	}
	if x.Parameter != "" || s.HasField("parameter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("parameter")
		s.WriteString(x.Parameter)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DecodeDownlinkRequest to JSON.
func (x *DecodeDownlinkRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DecodeDownlinkRequest message from JSON.
func (x *DecodeDownlinkRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "version_ids", "versionIds":
			s.AddField("version_ids")
			if s.ReadNil() {
				x.VersionIds = nil
				return
			}
			// NOTE: EndDeviceVersionIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v EndDeviceVersionIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.VersionIds = &v
		case "downlink":
			if s.ReadNil() {
				x.Downlink = nil
				return
			}
			x.Downlink = &ApplicationDownlink{}
			x.Downlink.UnmarshalProtoJSON(s.WithField("downlink", true))
		case "formatter":
			s.AddField("formatter")
			x.Formatter.UnmarshalProtoJSON(s)
		case "parameter":
			s.AddField("parameter")
			x.Parameter = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the DecodeDownlinkRequest from JSON.
func (x *DecodeDownlinkRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DecodeDownlinkResponse message to JSON.
func (x *DecodeDownlinkResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Downlink != nil || s.HasField("downlink") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink")
		x.Downlink.MarshalProtoJSON(s.WithField("downlink"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DecodeDownlinkResponse to JSON.
func (x *DecodeDownlinkResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DecodeDownlinkResponse message from JSON.
func (x *DecodeDownlinkResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "downlink":
			if s.ReadNil() {
				x.Downlink = nil
				return
			}
			x.Downlink = &ApplicationDownlink{}
			x.Downlink.UnmarshalProtoJSON(s.WithField("downlink", true))
		}
	})
}

// UnmarshalJSON unmarshals the DecodeDownlinkResponse from JSON.
func (x *DecodeDownlinkResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
