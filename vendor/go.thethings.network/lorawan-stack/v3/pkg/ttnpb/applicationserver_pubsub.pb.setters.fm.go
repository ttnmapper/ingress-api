// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *ApplicationPubSubIdentifiers) SetFields(src *ApplicationPubSubIdentifiers, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "application_ids":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationIdentifiers
				if (src == nil || src.ApplicationIds == nil) && dst.ApplicationIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.ApplicationIds
				}
				if dst.ApplicationIds != nil {
					newDst = dst.ApplicationIds
				} else {
					newDst = &ApplicationIdentifiers{}
					dst.ApplicationIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationIds = src.ApplicationIds
				} else {
					dst.ApplicationIds = nil
				}
			}
		case "pub_sub_id":
			if len(subs) > 0 {
				return fmt.Errorf("'pub_sub_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PubSubId = src.PubSubId
			} else {
				var zero string
				dst.PubSubId = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSub) SetFields(src *ApplicationPubSub, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSubIdentifiers
				if (src == nil || src.Ids == nil) && dst.Ids == nil {
					continue
				}
				if src != nil {
					newSrc = src.Ids
				}
				if dst.Ids != nil {
					newDst = dst.Ids
				} else {
					newDst = &ApplicationPubSubIdentifiers{}
					dst.Ids = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Ids = src.Ids
				} else {
					dst.Ids = nil
				}
			}
		case "created_at":
			if len(subs) > 0 {
				return fmt.Errorf("'created_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CreatedAt = src.CreatedAt
			} else {
				dst.CreatedAt = nil
			}
		case "updated_at":
			if len(subs) > 0 {
				return fmt.Errorf("'updated_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UpdatedAt = src.UpdatedAt
			} else {
				dst.UpdatedAt = nil
			}
		case "format":
			if len(subs) > 0 {
				return fmt.Errorf("'format' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Format = src.Format
			} else {
				var zero string
				dst.Format = zero
			}
		case "base_topic":
			if len(subs) > 0 {
				return fmt.Errorf("'base_topic' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BaseTopic = src.BaseTopic
			} else {
				var zero string
				dst.BaseTopic = zero
			}
		case "downlink_push":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.DownlinkPush == nil) && dst.DownlinkPush == nil {
					continue
				}
				if src != nil {
					newSrc = src.DownlinkPush
				}
				if dst.DownlinkPush != nil {
					newDst = dst.DownlinkPush
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.DownlinkPush = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkPush = src.DownlinkPush
				} else {
					dst.DownlinkPush = nil
				}
			}
		case "downlink_replace":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.DownlinkReplace == nil) && dst.DownlinkReplace == nil {
					continue
				}
				if src != nil {
					newSrc = src.DownlinkReplace
				}
				if dst.DownlinkReplace != nil {
					newDst = dst.DownlinkReplace
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.DownlinkReplace = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkReplace = src.DownlinkReplace
				} else {
					dst.DownlinkReplace = nil
				}
			}
		case "uplink_message":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.UplinkMessage == nil) && dst.UplinkMessage == nil {
					continue
				}
				if src != nil {
					newSrc = src.UplinkMessage
				}
				if dst.UplinkMessage != nil {
					newDst = dst.UplinkMessage
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.UplinkMessage = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.UplinkMessage = src.UplinkMessage
				} else {
					dst.UplinkMessage = nil
				}
			}
		case "uplink_normalized":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.UplinkNormalized == nil) && dst.UplinkNormalized == nil {
					continue
				}
				if src != nil {
					newSrc = src.UplinkNormalized
				}
				if dst.UplinkNormalized != nil {
					newDst = dst.UplinkNormalized
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.UplinkNormalized = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.UplinkNormalized = src.UplinkNormalized
				} else {
					dst.UplinkNormalized = nil
				}
			}
		case "join_accept":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.JoinAccept == nil) && dst.JoinAccept == nil {
					continue
				}
				if src != nil {
					newSrc = src.JoinAccept
				}
				if dst.JoinAccept != nil {
					newDst = dst.JoinAccept
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.JoinAccept = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.JoinAccept = src.JoinAccept
				} else {
					dst.JoinAccept = nil
				}
			}
		case "downlink_ack":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.DownlinkAck == nil) && dst.DownlinkAck == nil {
					continue
				}
				if src != nil {
					newSrc = src.DownlinkAck
				}
				if dst.DownlinkAck != nil {
					newDst = dst.DownlinkAck
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.DownlinkAck = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkAck = src.DownlinkAck
				} else {
					dst.DownlinkAck = nil
				}
			}
		case "downlink_nack":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.DownlinkNack == nil) && dst.DownlinkNack == nil {
					continue
				}
				if src != nil {
					newSrc = src.DownlinkNack
				}
				if dst.DownlinkNack != nil {
					newDst = dst.DownlinkNack
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.DownlinkNack = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkNack = src.DownlinkNack
				} else {
					dst.DownlinkNack = nil
				}
			}
		case "downlink_sent":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.DownlinkSent == nil) && dst.DownlinkSent == nil {
					continue
				}
				if src != nil {
					newSrc = src.DownlinkSent
				}
				if dst.DownlinkSent != nil {
					newDst = dst.DownlinkSent
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.DownlinkSent = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkSent = src.DownlinkSent
				} else {
					dst.DownlinkSent = nil
				}
			}
		case "downlink_failed":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.DownlinkFailed == nil) && dst.DownlinkFailed == nil {
					continue
				}
				if src != nil {
					newSrc = src.DownlinkFailed
				}
				if dst.DownlinkFailed != nil {
					newDst = dst.DownlinkFailed
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.DownlinkFailed = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkFailed = src.DownlinkFailed
				} else {
					dst.DownlinkFailed = nil
				}
			}
		case "downlink_queued":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.DownlinkQueued == nil) && dst.DownlinkQueued == nil {
					continue
				}
				if src != nil {
					newSrc = src.DownlinkQueued
				}
				if dst.DownlinkQueued != nil {
					newDst = dst.DownlinkQueued
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.DownlinkQueued = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkQueued = src.DownlinkQueued
				} else {
					dst.DownlinkQueued = nil
				}
			}
		case "downlink_queue_invalidated":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.DownlinkQueueInvalidated == nil) && dst.DownlinkQueueInvalidated == nil {
					continue
				}
				if src != nil {
					newSrc = src.DownlinkQueueInvalidated
				}
				if dst.DownlinkQueueInvalidated != nil {
					newDst = dst.DownlinkQueueInvalidated
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.DownlinkQueueInvalidated = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkQueueInvalidated = src.DownlinkQueueInvalidated
				} else {
					dst.DownlinkQueueInvalidated = nil
				}
			}
		case "location_solved":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.LocationSolved == nil) && dst.LocationSolved == nil {
					continue
				}
				if src != nil {
					newSrc = src.LocationSolved
				}
				if dst.LocationSolved != nil {
					newDst = dst.LocationSolved
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.LocationSolved = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.LocationSolved = src.LocationSolved
				} else {
					dst.LocationSolved = nil
				}
			}
		case "service_data":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_Message
				if (src == nil || src.ServiceData == nil) && dst.ServiceData == nil {
					continue
				}
				if src != nil {
					newSrc = src.ServiceData
				}
				if dst.ServiceData != nil {
					newDst = dst.ServiceData
				} else {
					newDst = &ApplicationPubSub_Message{}
					dst.ServiceData = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ServiceData = src.ServiceData
				} else {
					dst.ServiceData = nil
				}
			}

		case "provider":
			if len(subs) == 0 && src == nil {
				dst.Provider = nil
				continue
			} else if len(subs) == 0 {
				dst.Provider = src.Provider
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "nats":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Provider.(*ApplicationPubSub_Nats)
					}
					if srcValid := srcTypeOk || src == nil || src.Provider == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'nats', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Provider.(*ApplicationPubSub_Nats)
					if dstValid := dstTypeOk || dst.Provider == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'nats', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationPubSub_NATSProvider
						if srcTypeOk {
							newSrc = src.Provider.(*ApplicationPubSub_Nats).Nats
						}
						if dstTypeOk {
							newDst = dst.Provider.(*ApplicationPubSub_Nats).Nats
						} else if srcTypeOk {
							newDst = &ApplicationPubSub_NATSProvider{}
							dst.Provider = &ApplicationPubSub_Nats{Nats: newDst}
						} else {
							dst.Provider = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Provider = src.Provider
						} else {
							dst.Provider = nil
						}
					}
				case "mqtt":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Provider.(*ApplicationPubSub_Mqtt)
					}
					if srcValid := srcTypeOk || src == nil || src.Provider == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'mqtt', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Provider.(*ApplicationPubSub_Mqtt)
					if dstValid := dstTypeOk || dst.Provider == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'mqtt', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationPubSub_MQTTProvider
						if srcTypeOk {
							newSrc = src.Provider.(*ApplicationPubSub_Mqtt).Mqtt
						}
						if dstTypeOk {
							newDst = dst.Provider.(*ApplicationPubSub_Mqtt).Mqtt
						} else if srcTypeOk {
							newDst = &ApplicationPubSub_MQTTProvider{}
							dst.Provider = &ApplicationPubSub_Mqtt{Mqtt: newDst}
						} else {
							dst.Provider = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Provider = src.Provider
						} else {
							dst.Provider = nil
						}
					}
				case "aws_iot":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Provider.(*ApplicationPubSub_AwsIot)
					}
					if srcValid := srcTypeOk || src == nil || src.Provider == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'aws_iot', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Provider.(*ApplicationPubSub_AwsIot)
					if dstValid := dstTypeOk || dst.Provider == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'aws_iot', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationPubSub_AWSIoTProvider
						if srcTypeOk {
							newSrc = src.Provider.(*ApplicationPubSub_AwsIot).AwsIot
						}
						if dstTypeOk {
							newDst = dst.Provider.(*ApplicationPubSub_AwsIot).AwsIot
						} else if srcTypeOk {
							newDst = &ApplicationPubSub_AWSIoTProvider{}
							dst.Provider = &ApplicationPubSub_AwsIot{AwsIot: newDst}
						} else {
							dst.Provider = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Provider = src.Provider
						} else {
							dst.Provider = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSubs) SetFields(src *ApplicationPubSubs, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "pubsubs":
			if len(subs) > 0 {
				return fmt.Errorf("'pubsubs' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Pubsubs = src.Pubsubs
			} else {
				dst.Pubsubs = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSubFormats) SetFields(src *ApplicationPubSubFormats, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "formats":
			if len(subs) > 0 {
				return fmt.Errorf("'formats' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Formats = src.Formats
			} else {
				dst.Formats = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetApplicationPubSubRequest) SetFields(src *GetApplicationPubSubRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSubIdentifiers
				if (src == nil || src.Ids == nil) && dst.Ids == nil {
					continue
				}
				if src != nil {
					newSrc = src.Ids
				}
				if dst.Ids != nil {
					newDst = dst.Ids
				} else {
					newDst = &ApplicationPubSubIdentifiers{}
					dst.Ids = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Ids = src.Ids
				} else {
					dst.Ids = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListApplicationPubSubsRequest) SetFields(src *ListApplicationPubSubsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "application_ids":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationIdentifiers
				if (src == nil || src.ApplicationIds == nil) && dst.ApplicationIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.ApplicationIds
				}
				if dst.ApplicationIds != nil {
					newDst = dst.ApplicationIds
				} else {
					newDst = &ApplicationIdentifiers{}
					dst.ApplicationIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationIds = src.ApplicationIds
				} else {
					dst.ApplicationIds = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SetApplicationPubSubRequest) SetFields(src *SetApplicationPubSubRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "pubsub":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub
				if (src == nil || src.Pubsub == nil) && dst.Pubsub == nil {
					continue
				}
				if src != nil {
					newSrc = src.Pubsub
				}
				if dst.Pubsub != nil {
					newDst = dst.Pubsub
				} else {
					newDst = &ApplicationPubSub{}
					dst.Pubsub = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Pubsub = src.Pubsub
				} else {
					dst.Pubsub = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSub_NATSProvider) SetFields(src *ApplicationPubSub_NATSProvider, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "server_url":
			if len(subs) > 0 {
				return fmt.Errorf("'server_url' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ServerUrl = src.ServerUrl
			} else {
				var zero string
				dst.ServerUrl = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSub_MQTTProvider) SetFields(src *ApplicationPubSub_MQTTProvider, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "server_url":
			if len(subs) > 0 {
				return fmt.Errorf("'server_url' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ServerUrl = src.ServerUrl
			} else {
				var zero string
				dst.ServerUrl = zero
			}
		case "client_id":
			if len(subs) > 0 {
				return fmt.Errorf("'client_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ClientId = src.ClientId
			} else {
				var zero string
				dst.ClientId = zero
			}
		case "username":
			if len(subs) > 0 {
				return fmt.Errorf("'username' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Username = src.Username
			} else {
				var zero string
				dst.Username = zero
			}
		case "password":
			if len(subs) > 0 {
				return fmt.Errorf("'password' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Password = src.Password
			} else {
				var zero string
				dst.Password = zero
			}
		case "subscribe_qos":
			if len(subs) > 0 {
				return fmt.Errorf("'subscribe_qos' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SubscribeQos = src.SubscribeQos
			} else {
				dst.SubscribeQos = 0
			}
		case "publish_qos":
			if len(subs) > 0 {
				return fmt.Errorf("'publish_qos' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PublishQos = src.PublishQos
			} else {
				dst.PublishQos = 0
			}
		case "use_tls":
			if len(subs) > 0 {
				return fmt.Errorf("'use_tls' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UseTls = src.UseTls
			} else {
				var zero bool
				dst.UseTls = zero
			}
		case "tls_ca":
			if len(subs) > 0 {
				return fmt.Errorf("'tls_ca' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TlsCa = src.TlsCa
			} else {
				dst.TlsCa = nil
			}
		case "tls_client_cert":
			if len(subs) > 0 {
				return fmt.Errorf("'tls_client_cert' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TlsClientCert = src.TlsClientCert
			} else {
				dst.TlsClientCert = nil
			}
		case "tls_client_key":
			if len(subs) > 0 {
				return fmt.Errorf("'tls_client_key' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.TlsClientKey = src.TlsClientKey
			} else {
				dst.TlsClientKey = nil
			}
		case "headers":
			if len(subs) > 0 {
				return fmt.Errorf("'headers' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Headers = src.Headers
			} else {
				dst.Headers = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSub_AWSIoTProvider) SetFields(src *ApplicationPubSub_AWSIoTProvider, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "region":
			if len(subs) > 0 {
				return fmt.Errorf("'region' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Region = src.Region
			} else {
				var zero string
				dst.Region = zero
			}
		case "access_key":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_AWSIoTProvider_AccessKey
				if (src == nil || src.AccessKey == nil) && dst.AccessKey == nil {
					continue
				}
				if src != nil {
					newSrc = src.AccessKey
				}
				if dst.AccessKey != nil {
					newDst = dst.AccessKey
				} else {
					newDst = &ApplicationPubSub_AWSIoTProvider_AccessKey{}
					dst.AccessKey = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.AccessKey = src.AccessKey
				} else {
					dst.AccessKey = nil
				}
			}
		case "assume_role":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationPubSub_AWSIoTProvider_AssumeRole
				if (src == nil || src.AssumeRole == nil) && dst.AssumeRole == nil {
					continue
				}
				if src != nil {
					newSrc = src.AssumeRole
				}
				if dst.AssumeRole != nil {
					newDst = dst.AssumeRole
				} else {
					newDst = &ApplicationPubSub_AWSIoTProvider_AssumeRole{}
					dst.AssumeRole = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.AssumeRole = src.AssumeRole
				} else {
					dst.AssumeRole = nil
				}
			}
		case "endpoint_address":
			if len(subs) > 0 {
				return fmt.Errorf("'endpoint_address' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EndpointAddress = src.EndpointAddress
			} else {
				var zero string
				dst.EndpointAddress = zero
			}

		case "deployment":
			if len(subs) == 0 && src == nil {
				dst.Deployment = nil
				continue
			} else if len(subs) == 0 {
				dst.Deployment = src.Deployment
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "default":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Deployment.(*ApplicationPubSub_AWSIoTProvider_Default)
					}
					if srcValid := srcTypeOk || src == nil || src.Deployment == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'default', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Deployment.(*ApplicationPubSub_AWSIoTProvider_Default)
					if dstValid := dstTypeOk || dst.Deployment == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'default', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationPubSub_AWSIoTProvider_DefaultIntegration
						if srcTypeOk {
							newSrc = src.Deployment.(*ApplicationPubSub_AWSIoTProvider_Default).Default
						}
						if dstTypeOk {
							newDst = dst.Deployment.(*ApplicationPubSub_AWSIoTProvider_Default).Default
						} else if srcTypeOk {
							newDst = &ApplicationPubSub_AWSIoTProvider_DefaultIntegration{}
							dst.Deployment = &ApplicationPubSub_AWSIoTProvider_Default{Default: newDst}
						} else {
							dst.Deployment = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Deployment = src.Deployment
						} else {
							dst.Deployment = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSub_Message) SetFields(src *ApplicationPubSub_Message, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "topic":
			if len(subs) > 0 {
				return fmt.Errorf("'topic' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Topic = src.Topic
			} else {
				var zero string
				dst.Topic = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSub_AWSIoTProvider_AccessKey) SetFields(src *ApplicationPubSub_AWSIoTProvider_AccessKey, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "access_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'access_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AccessKeyId = src.AccessKeyId
			} else {
				var zero string
				dst.AccessKeyId = zero
			}
		case "secret_access_key":
			if len(subs) > 0 {
				return fmt.Errorf("'secret_access_key' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SecretAccessKey = src.SecretAccessKey
			} else {
				var zero string
				dst.SecretAccessKey = zero
			}
		case "session_token":
			if len(subs) > 0 {
				return fmt.Errorf("'session_token' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SessionToken = src.SessionToken
			} else {
				var zero string
				dst.SessionToken = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSub_AWSIoTProvider_AssumeRole) SetFields(src *ApplicationPubSub_AWSIoTProvider_AssumeRole, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "arn":
			if len(subs) > 0 {
				return fmt.Errorf("'arn' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Arn = src.Arn
			} else {
				var zero string
				dst.Arn = zero
			}
		case "external_id":
			if len(subs) > 0 {
				return fmt.Errorf("'external_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ExternalId = src.ExternalId
			} else {
				var zero string
				dst.ExternalId = zero
			}
		case "session_duration":
			if len(subs) > 0 {
				return fmt.Errorf("'session_duration' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SessionDuration = src.SessionDuration
			} else {
				dst.SessionDuration = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) SetFields(src *ApplicationPubSub_AWSIoTProvider_DefaultIntegration, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "stack_name":
			if len(subs) > 0 {
				return fmt.Errorf("'stack_name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.StackName = src.StackName
			} else {
				var zero string
				dst.StackName = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
