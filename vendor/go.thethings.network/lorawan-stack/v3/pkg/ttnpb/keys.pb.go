// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/keys.proto

package ttnpb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyEnvelope struct {
	// The unencrypted AES key.
	Key *go_thethings_network_lorawan_stack_v3_pkg_types.AES128Key `protobuf:"bytes,1,opt,name=key,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.AES128Key" json:"key,omitempty"`
	// The label of the RFC 3394 key-encryption-key (KEK) that was used to encrypt the key.
	KekLabel             string   `protobuf:"bytes,2,opt,name=kek_label,json=kekLabel,proto3" json:"kek_label,omitempty"`
	EncryptedKey         []byte   `protobuf:"bytes,3,opt,name=encrypted_key,json=encryptedKey,proto3" json:"encrypted_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyEnvelope) Reset()      { *m = KeyEnvelope{} }
func (*KeyEnvelope) ProtoMessage() {}
func (*KeyEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee170ee4ccd55993, []int{0}
}
func (m *KeyEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyEnvelope.Unmarshal(m, b)
}
func (m *KeyEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyEnvelope.Marshal(b, m, deterministic)
}
func (m *KeyEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyEnvelope.Merge(m, src)
}
func (m *KeyEnvelope) XXX_Size() int {
	return xxx_messageInfo_KeyEnvelope.Size(m)
}
func (m *KeyEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_KeyEnvelope proto.InternalMessageInfo

func (m *KeyEnvelope) GetKekLabel() string {
	if m != nil {
		return m.KekLabel
	}
	return ""
}

func (m *KeyEnvelope) GetEncryptedKey() []byte {
	if m != nil {
		return m.EncryptedKey
	}
	return nil
}

// Root keys for a LoRaWAN device.
// These are stored on the Join Server.
type RootKeys struct {
	// Join Server issued identifier for the root keys.
	RootKeyId string `protobuf:"bytes,1,opt,name=root_key_id,json=rootKeyId,proto3" json:"root_key_id,omitempty"`
	// The (encrypted) Application Key.
	AppKey *KeyEnvelope `protobuf:"bytes,2,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	// The (encrypted) Network Key.
	NwkKey               *KeyEnvelope `protobuf:"bytes,3,opt,name=nwk_key,json=nwkKey,proto3" json:"nwk_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RootKeys) Reset()      { *m = RootKeys{} }
func (*RootKeys) ProtoMessage() {}
func (*RootKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee170ee4ccd55993, []int{1}
}
func (m *RootKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RootKeys.Unmarshal(m, b)
}
func (m *RootKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RootKeys.Marshal(b, m, deterministic)
}
func (m *RootKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootKeys.Merge(m, src)
}
func (m *RootKeys) XXX_Size() int {
	return xxx_messageInfo_RootKeys.Size(m)
}
func (m *RootKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_RootKeys.DiscardUnknown(m)
}

var xxx_messageInfo_RootKeys proto.InternalMessageInfo

func (m *RootKeys) GetRootKeyId() string {
	if m != nil {
		return m.RootKeyId
	}
	return ""
}

func (m *RootKeys) GetAppKey() *KeyEnvelope {
	if m != nil {
		return m.AppKey
	}
	return nil
}

func (m *RootKeys) GetNwkKey() *KeyEnvelope {
	if m != nil {
		return m.NwkKey
	}
	return nil
}

// Session keys for a LoRaWAN session.
// Only the components for which the keys were meant, will have the key-encryption-key (KEK) to decrypt the individual keys.
type SessionKeys struct {
	// Join Server issued identifier for the session keys.
	// This ID can be used to request the keys from the Join Server in case the are lost.
	SessionKeyId []byte `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	// The (encrypted) Forwarding Network Session Integrity Key (or Network Session Key in 1.0 compatibility mode).
	// This key is stored by the (forwarding) Network Server.
	FNwkSIntKey *KeyEnvelope `protobuf:"bytes,2,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key,omitempty"`
	// The (encrypted) Serving Network Session Integrity Key.
	// This key is stored by the (serving) Network Server.
	SNwkSIntKey *KeyEnvelope `protobuf:"bytes,3,opt,name=s_nwk_s_int_key,json=sNwkSIntKey,proto3" json:"s_nwk_s_int_key,omitempty"`
	// The (encrypted) Network Session Encryption Key.
	// This key is stored by the (serving) Network Server.
	NwkSEncKey *KeyEnvelope `protobuf:"bytes,4,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key,omitempty"`
	// The (encrypted) Application Session Key.
	// This key is stored by the Application Server.
	AppSKey              *KeyEnvelope `protobuf:"bytes,5,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SessionKeys) Reset()      { *m = SessionKeys{} }
func (*SessionKeys) ProtoMessage() {}
func (*SessionKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee170ee4ccd55993, []int{2}
}
func (m *SessionKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionKeys.Unmarshal(m, b)
}
func (m *SessionKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionKeys.Marshal(b, m, deterministic)
}
func (m *SessionKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionKeys.Merge(m, src)
}
func (m *SessionKeys) XXX_Size() int {
	return xxx_messageInfo_SessionKeys.Size(m)
}
func (m *SessionKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionKeys.DiscardUnknown(m)
}

var xxx_messageInfo_SessionKeys proto.InternalMessageInfo

func (m *SessionKeys) GetSessionKeyId() []byte {
	if m != nil {
		return m.SessionKeyId
	}
	return nil
}

func (m *SessionKeys) GetFNwkSIntKey() *KeyEnvelope {
	if m != nil {
		return m.FNwkSIntKey
	}
	return nil
}

func (m *SessionKeys) GetSNwkSIntKey() *KeyEnvelope {
	if m != nil {
		return m.SNwkSIntKey
	}
	return nil
}

func (m *SessionKeys) GetNwkSEncKey() *KeyEnvelope {
	if m != nil {
		return m.NwkSEncKey
	}
	return nil
}

func (m *SessionKeys) GetAppSKey() *KeyEnvelope {
	if m != nil {
		return m.AppSKey
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyEnvelope)(nil), "ttn.lorawan.v3.KeyEnvelope")
	golang_proto.RegisterType((*KeyEnvelope)(nil), "ttn.lorawan.v3.KeyEnvelope")
	proto.RegisterType((*RootKeys)(nil), "ttn.lorawan.v3.RootKeys")
	golang_proto.RegisterType((*RootKeys)(nil), "ttn.lorawan.v3.RootKeys")
	proto.RegisterType((*SessionKeys)(nil), "ttn.lorawan.v3.SessionKeys")
	golang_proto.RegisterType((*SessionKeys)(nil), "ttn.lorawan.v3.SessionKeys")
}

func init() { proto.RegisterFile("lorawan-stack/api/keys.proto", fileDescriptor_ee170ee4ccd55993) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/keys.proto", fileDescriptor_ee170ee4ccd55993)
}

var fileDescriptor_ee170ee4ccd55993 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x8b, 0x13, 0x31,
	0x1c, 0xc6, 0x9b, 0xed, 0xee, 0xda, 0x66, 0xba, 0xeb, 0x32, 0xa7, 0xb2, 0xca, 0xec, 0x52, 0x10,
	0x7a, 0x69, 0x06, 0xb7, 0x82, 0x2f, 0xa0, 0xd0, 0x42, 0x0f, 0x65, 0x7c, 0x81, 0xe9, 0xcd, 0x4b,
	0x99, 0x4e, 0xff, 0x9d, 0x0e, 0xa9, 0x49, 0x98, 0x64, 0x3b, 0xc6, 0x53, 0x3f, 0x82, 0x1f, 0x61,
	0x8f, 0x7e, 0x04, 0x11, 0x0f, 0x7e, 0x0c, 0xf1, 0x20, 0xd8, 0xbd, 0x78, 0xf4, 0xec, 0x49, 0x92,
	0x91, 0x3a, 0xab, 0x87, 0xae, 0xb7, 0x84, 0x3c, 0xcf, 0xef, 0xff, 0x3c, 0x49, 0xf0, 0xed, 0x05,
	0xcf, 0xa2, 0x3c, 0x62, 0x1d, 0xa9, 0xa2, 0x98, 0xfa, 0x91, 0x48, 0x7d, 0x0a, 0x5a, 0x12, 0x91,
	0x71, 0xc5, 0xdd, 0x43, 0xa5, 0x18, 0xf9, 0xad, 0x20, 0xcb, 0xee, 0x71, 0x2f, 0x49, 0xd5, 0xfc,
	0x7c, 0x42, 0x62, 0xfe, 0xca, 0x07, 0xb6, 0xe4, 0x5a, 0x64, 0xfc, 0xb5, 0xf6, 0xad, 0x38, 0xee,
	0x24, 0xc0, 0x3a, 0xcb, 0x68, 0x91, 0x4e, 0x23, 0x05, 0xfe, 0x3f, 0x8b, 0x02, 0x79, 0xdc, 0x29,
	0x21, 0x12, 0x9e, 0xf0, 0xc2, 0x3c, 0x39, 0x9f, 0xd9, 0x9d, 0xdd, 0xd8, 0x55, 0x21, 0x6f, 0x7d,
	0x40, 0xd8, 0x09, 0x40, 0x0f, 0xd8, 0x12, 0x16, 0x5c, 0x80, 0xfb, 0x02, 0x57, 0x29, 0xe8, 0x26,
	0x3a, 0x45, 0xed, 0x46, 0xff, 0xf1, 0x97, 0xaf, 0x27, 0x0f, 0x13, 0x4e, 0xd4, 0x1c, 0xd4, 0x3c,
	0x65, 0x89, 0x24, 0x0c, 0x54, 0xce, 0x33, 0xea, 0x5f, 0x6d, 0xb5, 0xec, 0xfa, 0x82, 0x26, 0xbe,
	0xd2, 0x02, 0x24, 0xe9, 0x0d, 0x46, 0x77, 0xcf, 0x1e, 0x04, 0xa0, 0x43, 0x43, 0x72, 0xef, 0xe0,
	0x3a, 0x05, 0x3a, 0x5e, 0x44, 0x13, 0x58, 0x34, 0x77, 0x4e, 0x51, 0xbb, 0xde, 0xaf, 0xfd, 0xec,
	0xef, 0x65, 0xd5, 0xe6, 0xea, 0x28, 0xac, 0x51, 0xa0, 0x4f, 0xcd, 0x89, 0xdb, 0xc1, 0x07, 0xc0,
	0xe2, 0x4c, 0x0b, 0x05, 0xd3, 0xb1, 0x49, 0x50, 0xb5, 0x09, 0x8c, 0xf4, 0x4d, 0xb5, 0xb9, 0xaa,
	0x85, 0x8d, 0xcd, 0x71, 0x00, 0xfa, 0xd1, 0xee, 0xfb, 0x8b, 0x13, 0xd4, 0xba, 0x40, 0xb8, 0x16,
	0x72, 0xae, 0x02, 0xd0, 0xd2, 0x6d, 0x63, 0x27, 0xe3, 0x5c, 0x19, 0xf3, 0x38, 0x9d, 0xda, 0x06,
	0xe5, 0x51, 0xf5, 0xac, 0x10, 0x0e, 0xa7, 0xee, 0x3d, 0x7c, 0x23, 0x12, 0xc2, 0x4e, 0x31, 0x81,
	0x9c, 0xb3, 0x5b, 0xe4, 0xea, 0x3b, 0x90, 0xd2, 0x8d, 0x84, 0xfb, 0x91, 0x10, 0x01, 0x68, 0xe3,
	0x62, 0x39, 0xdd, 0x64, 0xdb, 0xe6, 0x62, 0x39, 0x0d, 0x40, 0xb7, 0x3e, 0xee, 0x60, 0x67, 0x04,
	0x52, 0xa6, 0x9c, 0xd9, 0x94, 0x04, 0x1f, 0xca, 0x62, 0x5b, 0x0e, 0xfa, 0xa7, 0xe8, 0x51, 0xd8,
	0x90, 0x1b, 0xf9, 0x70, 0xea, 0xf6, 0xf0, 0xcd, 0xd9, 0xd8, 0xcc, 0x95, 0xe3, 0x94, 0xa9, 0xeb,
	0x66, 0x76, 0x66, 0xcf, 0x73, 0x3a, 0x1a, 0x32, 0x53, 0xd8, 0x20, 0xe4, 0x5f, 0x88, 0x6b, 0x14,
	0x70, 0x64, 0x09, 0xf1, 0x04, 0x1f, 0x14, 0x00, 0x60, 0xb1, 0x05, 0xec, 0x6e, 0x07, 0x60, 0x96,
	0xd3, 0xd1, 0x80, 0xc5, 0xc6, 0x7f, 0x1f, 0xd7, 0xcd, 0x8d, 0x4b, 0xeb, 0xdd, 0xdb, 0xee, 0x35,
	0xef, 0x33, 0x0a, 0x40, 0xf7, 0x9f, 0x7d, 0xfe, 0xe6, 0x55, 0x56, 0x6b, 0x0f, 0xbd, 0x5b, 0x7b,
	0xe8, 0xfb, 0xda, 0xab, 0xfc, 0x58, 0x7b, 0xe8, 0xed, 0xa5, 0x57, 0xf9, 0x74, 0xe9, 0xa1, 0x97,
	0xfe, 0x7f, 0xfc, 0x4d, 0xc5, 0xc4, 0x64, 0xb2, 0x6f, 0x3f, 0x7d, 0xf7, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc9, 0x0a, 0x0c, 0xe4, 0x96, 0x03, 0x00, 0x00,
}

func (this *KeyEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KeyEnvelope)
	if !ok {
		that2, ok := that.(KeyEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Key == nil {
		if this.Key != nil {
			return false
		}
	} else if !this.Key.Equal(*that1.Key) {
		return false
	}
	if this.KekLabel != that1.KekLabel {
		return false
	}
	if !bytes.Equal(this.EncryptedKey, that1.EncryptedKey) {
		return false
	}
	return true
}
func (this *RootKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RootKeys)
	if !ok {
		that2, ok := that.(RootKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RootKeyId != that1.RootKeyId {
		return false
	}
	if !this.AppKey.Equal(that1.AppKey) {
		return false
	}
	if !this.NwkKey.Equal(that1.NwkKey) {
		return false
	}
	return true
}
func (this *SessionKeys) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SessionKeys)
	if !ok {
		that2, ok := that.(SessionKeys)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SessionKeyId, that1.SessionKeyId) {
		return false
	}
	if !this.FNwkSIntKey.Equal(that1.FNwkSIntKey) {
		return false
	}
	if !this.SNwkSIntKey.Equal(that1.SNwkSIntKey) {
		return false
	}
	if !this.NwkSEncKey.Equal(that1.NwkSEncKey) {
		return false
	}
	if !this.AppSKey.Equal(that1.AppSKey) {
		return false
	}
	return true
}
func NewPopulatedKeyEnvelope(r randyKeys, easy bool) *KeyEnvelope {
	this := &KeyEnvelope{}
	this.Key = go_thethings_network_lorawan_stack_v3_pkg_types.NewPopulatedAES128Key(r)
	this.KekLabel = string(randStringKeys(r))
	v1 := r.Intn(100)
	this.EncryptedKey = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.EncryptedKey[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyKeys interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneKeys(r randyKeys) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringKeys(r randyKeys) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneKeys(r)
	}
	return string(tmps)
}
func randUnrecognizedKeys(r randyKeys, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldKeys(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldKeys(dAtA []byte, r randyKeys, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateKeys(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateKeys(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (this *KeyEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyEnvelope{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`KekLabel:` + fmt.Sprintf("%v", this.KekLabel) + `,`,
		`EncryptedKey:` + fmt.Sprintf("%v", this.EncryptedKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RootKeys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RootKeys{`,
		`RootKeyId:` + fmt.Sprintf("%v", this.RootKeyId) + `,`,
		`AppKey:` + strings.Replace(this.AppKey.String(), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`NwkKey:` + strings.Replace(this.NwkKey.String(), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionKeys) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionKeys{`,
		`SessionKeyId:` + fmt.Sprintf("%v", this.SessionKeyId) + `,`,
		`FNwkSIntKey:` + strings.Replace(this.FNwkSIntKey.String(), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`SNwkSIntKey:` + strings.Replace(this.SNwkSIntKey.String(), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`NwkSEncKey:` + strings.Replace(this.NwkSEncKey.String(), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`AppSKey:` + strings.Replace(this.AppSKey.String(), "KeyEnvelope", "KeyEnvelope", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringKeys(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
