// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/joinserver.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/TheThingsIndustries/protoc-gen-go-flags/annotations"
	_ "github.com/TheThingsIndustries/protoc-gen-go-json/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SessionKeyRequest struct {
	// Join Server issued identifier for the session keys.
	SessionKeyId []byte `protobuf:"bytes,1,opt,name=session_key_id,json=sessionKeyId,proto3" json:"session_key_id,omitempty"`
	// LoRaWAN DevEUI.
	DevEui []byte `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices).
	JoinEui              []byte   `protobuf:"bytes,3,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionKeyRequest) Reset()         { *m = SessionKeyRequest{} }
func (m *SessionKeyRequest) String() string { return proto.CompactTextString(m) }
func (*SessionKeyRequest) ProtoMessage()    {}
func (*SessionKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{0}
}
func (m *SessionKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionKeyRequest.Unmarshal(m, b)
}
func (m *SessionKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionKeyRequest.Marshal(b, m, deterministic)
}
func (m *SessionKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionKeyRequest.Merge(m, src)
}
func (m *SessionKeyRequest) XXX_Size() int {
	return xxx_messageInfo_SessionKeyRequest.Size(m)
}
func (m *SessionKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionKeyRequest proto.InternalMessageInfo

func (m *SessionKeyRequest) GetSessionKeyId() []byte {
	if m != nil {
		return m.SessionKeyId
	}
	return nil
}

func (m *SessionKeyRequest) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *SessionKeyRequest) GetJoinEui() []byte {
	if m != nil {
		return m.JoinEui
	}
	return nil
}

type NwkSKeysResponse struct {
	// The (encrypted) Forwarding Network Session Integrity Key (or Network Session Key in 1.0 compatibility mode).
	FNwkSIntKey *KeyEnvelope `protobuf:"bytes,1,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key,omitempty"`
	// The (encrypted) Serving Network Session Integrity Key.
	SNwkSIntKey *KeyEnvelope `protobuf:"bytes,2,opt,name=s_nwk_s_int_key,json=sNwkSIntKey,proto3" json:"s_nwk_s_int_key,omitempty"`
	// The (encrypted) Network Session Encryption Key.
	NwkSEncKey           *KeyEnvelope `protobuf:"bytes,3,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *NwkSKeysResponse) Reset()         { *m = NwkSKeysResponse{} }
func (m *NwkSKeysResponse) String() string { return proto.CompactTextString(m) }
func (*NwkSKeysResponse) ProtoMessage()    {}
func (*NwkSKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{1}
}
func (m *NwkSKeysResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NwkSKeysResponse.Unmarshal(m, b)
}
func (m *NwkSKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NwkSKeysResponse.Marshal(b, m, deterministic)
}
func (m *NwkSKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NwkSKeysResponse.Merge(m, src)
}
func (m *NwkSKeysResponse) XXX_Size() int {
	return xxx_messageInfo_NwkSKeysResponse.Size(m)
}
func (m *NwkSKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NwkSKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NwkSKeysResponse proto.InternalMessageInfo

func (m *NwkSKeysResponse) GetFNwkSIntKey() *KeyEnvelope {
	if m != nil {
		return m.FNwkSIntKey
	}
	return nil
}

func (m *NwkSKeysResponse) GetSNwkSIntKey() *KeyEnvelope {
	if m != nil {
		return m.SNwkSIntKey
	}
	return nil
}

func (m *NwkSKeysResponse) GetNwkSEncKey() *KeyEnvelope {
	if m != nil {
		return m.NwkSEncKey
	}
	return nil
}

type AppSKeyResponse struct {
	// The (encrypted) Application Session Key.
	AppSKey              *KeyEnvelope `protobuf:"bytes,1,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AppSKeyResponse) Reset()         { *m = AppSKeyResponse{} }
func (m *AppSKeyResponse) String() string { return proto.CompactTextString(m) }
func (*AppSKeyResponse) ProtoMessage()    {}
func (*AppSKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{2}
}
func (m *AppSKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppSKeyResponse.Unmarshal(m, b)
}
func (m *AppSKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppSKeyResponse.Marshal(b, m, deterministic)
}
func (m *AppSKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppSKeyResponse.Merge(m, src)
}
func (m *AppSKeyResponse) XXX_Size() int {
	return xxx_messageInfo_AppSKeyResponse.Size(m)
}
func (m *AppSKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AppSKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AppSKeyResponse proto.InternalMessageInfo

func (m *AppSKeyResponse) GetAppSKey() *KeyEnvelope {
	if m != nil {
		return m.AppSKey
	}
	return nil
}

type CryptoServicePayloadRequest struct {
	// End device identifiers for the cryptographic operation.
	Ids *EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	// LoRaWAN version to use for the cryptographic operation.
	LorawanVersion MACVersion `protobuf:"varint,2,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	// Raw input payload.
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Provisioner that provisioned the end device.
	ProvisionerId string `protobuf:"bytes,4,opt,name=provisioner_id,json=provisionerId,proto3" json:"provisioner_id,omitempty"`
	// Provisioning data for the provisioner.
	ProvisioningData     *types.Struct `protobuf:"bytes,5,opt,name=provisioning_data,json=provisioningData,proto3" json:"provisioning_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CryptoServicePayloadRequest) Reset()         { *m = CryptoServicePayloadRequest{} }
func (m *CryptoServicePayloadRequest) String() string { return proto.CompactTextString(m) }
func (*CryptoServicePayloadRequest) ProtoMessage()    {}
func (*CryptoServicePayloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{3}
}
func (m *CryptoServicePayloadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptoServicePayloadRequest.Unmarshal(m, b)
}
func (m *CryptoServicePayloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptoServicePayloadRequest.Marshal(b, m, deterministic)
}
func (m *CryptoServicePayloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoServicePayloadRequest.Merge(m, src)
}
func (m *CryptoServicePayloadRequest) XXX_Size() int {
	return xxx_messageInfo_CryptoServicePayloadRequest.Size(m)
}
func (m *CryptoServicePayloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoServicePayloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoServicePayloadRequest proto.InternalMessageInfo

func (m *CryptoServicePayloadRequest) GetIds() *EndDeviceIdentifiers {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *CryptoServicePayloadRequest) GetLorawanVersion() MACVersion {
	if m != nil {
		return m.LorawanVersion
	}
	return MACVersion_MAC_UNKNOWN
}

func (m *CryptoServicePayloadRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CryptoServicePayloadRequest) GetProvisionerId() string {
	if m != nil {
		return m.ProvisionerId
	}
	return ""
}

func (m *CryptoServicePayloadRequest) GetProvisioningData() *types.Struct {
	if m != nil {
		return m.ProvisioningData
	}
	return nil
}

type CryptoServicePayloadResponse struct {
	// Raw output payload.
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptoServicePayloadResponse) Reset()         { *m = CryptoServicePayloadResponse{} }
func (m *CryptoServicePayloadResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoServicePayloadResponse) ProtoMessage()    {}
func (*CryptoServicePayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{4}
}
func (m *CryptoServicePayloadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptoServicePayloadResponse.Unmarshal(m, b)
}
func (m *CryptoServicePayloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptoServicePayloadResponse.Marshal(b, m, deterministic)
}
func (m *CryptoServicePayloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptoServicePayloadResponse.Merge(m, src)
}
func (m *CryptoServicePayloadResponse) XXX_Size() int {
	return xxx_messageInfo_CryptoServicePayloadResponse.Size(m)
}
func (m *CryptoServicePayloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptoServicePayloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CryptoServicePayloadResponse proto.InternalMessageInfo

func (m *CryptoServicePayloadResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type JoinAcceptMICRequest struct {
	// Request data for the cryptographic operation.
	PayloadRequest *CryptoServicePayloadRequest `protobuf:"bytes,1,opt,name=payload_request,json=payloadRequest,proto3" json:"payload_request,omitempty"`
	// LoRaWAN join-request type.
	JoinRequestType JoinRequestType `protobuf:"varint,2,opt,name=join_request_type,json=joinRequestType,proto3,enum=ttn.lorawan.v3.JoinRequestType" json:"join_request_type,omitempty"`
	// LoRaWAN DevNonce.
	DevNonce             []byte   `protobuf:"bytes,3,opt,name=dev_nonce,json=devNonce,proto3" json:"dev_nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinAcceptMICRequest) Reset()         { *m = JoinAcceptMICRequest{} }
func (m *JoinAcceptMICRequest) String() string { return proto.CompactTextString(m) }
func (*JoinAcceptMICRequest) ProtoMessage()    {}
func (*JoinAcceptMICRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{5}
}
func (m *JoinAcceptMICRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinAcceptMICRequest.Unmarshal(m, b)
}
func (m *JoinAcceptMICRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinAcceptMICRequest.Marshal(b, m, deterministic)
}
func (m *JoinAcceptMICRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinAcceptMICRequest.Merge(m, src)
}
func (m *JoinAcceptMICRequest) XXX_Size() int {
	return xxx_messageInfo_JoinAcceptMICRequest.Size(m)
}
func (m *JoinAcceptMICRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinAcceptMICRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinAcceptMICRequest proto.InternalMessageInfo

func (m *JoinAcceptMICRequest) GetPayloadRequest() *CryptoServicePayloadRequest {
	if m != nil {
		return m.PayloadRequest
	}
	return nil
}

func (m *JoinAcceptMICRequest) GetJoinRequestType() JoinRequestType {
	if m != nil {
		return m.JoinRequestType
	}
	return JoinRequestType_REJOIN_CONTEXT
}

func (m *JoinAcceptMICRequest) GetDevNonce() []byte {
	if m != nil {
		return m.DevNonce
	}
	return nil
}

type DeriveSessionKeysRequest struct {
	// End device identifiers to use for key derivation.
	// The DevAddr must be set in this request. The DevEUI may need to be set, depending on the provisioner.
	Ids *EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	// LoRaWAN key derivation scheme.
	LorawanVersion MACVersion `protobuf:"varint,2,opt,name=lorawan_version,json=lorawanVersion,proto3,enum=ttn.lorawan.v3.MACVersion" json:"lorawan_version,omitempty"`
	// LoRaWAN JoinNonce (or AppNonce).
	JoinNonce []byte `protobuf:"bytes,3,opt,name=join_nonce,json=joinNonce,proto3" json:"join_nonce,omitempty"`
	// LoRaWAN DevNonce.
	DevNonce []byte `protobuf:"bytes,4,opt,name=dev_nonce,json=devNonce,proto3" json:"dev_nonce,omitempty"`
	// LoRaWAN NetID.
	NetId []byte `protobuf:"bytes,5,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Provisioner that provisioned the end device.
	ProvisionerId string `protobuf:"bytes,6,opt,name=provisioner_id,json=provisionerId,proto3" json:"provisioner_id,omitempty"`
	// Provisioning data for the provisioner.
	ProvisioningData     *types.Struct `protobuf:"bytes,7,opt,name=provisioning_data,json=provisioningData,proto3" json:"provisioning_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeriveSessionKeysRequest) Reset()         { *m = DeriveSessionKeysRequest{} }
func (m *DeriveSessionKeysRequest) String() string { return proto.CompactTextString(m) }
func (*DeriveSessionKeysRequest) ProtoMessage()    {}
func (*DeriveSessionKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{6}
}
func (m *DeriveSessionKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeriveSessionKeysRequest.Unmarshal(m, b)
}
func (m *DeriveSessionKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeriveSessionKeysRequest.Marshal(b, m, deterministic)
}
func (m *DeriveSessionKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveSessionKeysRequest.Merge(m, src)
}
func (m *DeriveSessionKeysRequest) XXX_Size() int {
	return xxx_messageInfo_DeriveSessionKeysRequest.Size(m)
}
func (m *DeriveSessionKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveSessionKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveSessionKeysRequest proto.InternalMessageInfo

func (m *DeriveSessionKeysRequest) GetIds() *EndDeviceIdentifiers {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *DeriveSessionKeysRequest) GetLorawanVersion() MACVersion {
	if m != nil {
		return m.LorawanVersion
	}
	return MACVersion_MAC_UNKNOWN
}

func (m *DeriveSessionKeysRequest) GetJoinNonce() []byte {
	if m != nil {
		return m.JoinNonce
	}
	return nil
}

func (m *DeriveSessionKeysRequest) GetDevNonce() []byte {
	if m != nil {
		return m.DevNonce
	}
	return nil
}

func (m *DeriveSessionKeysRequest) GetNetId() []byte {
	if m != nil {
		return m.NetId
	}
	return nil
}

func (m *DeriveSessionKeysRequest) GetProvisionerId() string {
	if m != nil {
		return m.ProvisionerId
	}
	return ""
}

func (m *DeriveSessionKeysRequest) GetProvisioningData() *types.Struct {
	if m != nil {
		return m.ProvisioningData
	}
	return nil
}

type GetRootKeysRequest struct {
	// End device identifiers to request the root keys for.
	Ids *EndDeviceIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	// Provisioner that provisioned the end device.
	ProvisionerId string `protobuf:"bytes,2,opt,name=provisioner_id,json=provisionerId,proto3" json:"provisioner_id,omitempty"`
	// Provisioning data for the provisioner.
	ProvisioningData     *types.Struct `protobuf:"bytes,3,opt,name=provisioning_data,json=provisioningData,proto3" json:"provisioning_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetRootKeysRequest) Reset()         { *m = GetRootKeysRequest{} }
func (m *GetRootKeysRequest) String() string { return proto.CompactTextString(m) }
func (*GetRootKeysRequest) ProtoMessage()    {}
func (*GetRootKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{7}
}
func (m *GetRootKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRootKeysRequest.Unmarshal(m, b)
}
func (m *GetRootKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRootKeysRequest.Marshal(b, m, deterministic)
}
func (m *GetRootKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRootKeysRequest.Merge(m, src)
}
func (m *GetRootKeysRequest) XXX_Size() int {
	return xxx_messageInfo_GetRootKeysRequest.Size(m)
}
func (m *GetRootKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRootKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRootKeysRequest proto.InternalMessageInfo

func (m *GetRootKeysRequest) GetIds() *EndDeviceIdentifiers {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *GetRootKeysRequest) GetProvisionerId() string {
	if m != nil {
		return m.ProvisionerId
	}
	return ""
}

func (m *GetRootKeysRequest) GetProvisioningData() *types.Struct {
	if m != nil {
		return m.ProvisioningData
	}
	return nil
}

// Deprecated: Do not use.
type ProvisionEndDevicesRequest struct {
	ApplicationIds *ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids,omitempty"`
	// ID of the provisioner service as configured in the Join Server.
	ProvisionerId string `protobuf:"bytes,2,opt,name=provisioner_id,json=provisionerId,proto3" json:"provisioner_id,omitempty"`
	// Vendor-specific provisioning data.
	ProvisioningData []byte `protobuf:"bytes,3,opt,name=provisioning_data,json=provisioningData,proto3" json:"provisioning_data,omitempty"`
	// Types that are valid to be assigned to EndDevices:
	//	*ProvisionEndDevicesRequest_List
	//	*ProvisionEndDevicesRequest_Range
	//	*ProvisionEndDevicesRequest_FromData
	EndDevices           isProvisionEndDevicesRequest_EndDevices `protobuf_oneof:"end_devices"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ProvisionEndDevicesRequest) Reset()         { *m = ProvisionEndDevicesRequest{} }
func (m *ProvisionEndDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*ProvisionEndDevicesRequest) ProtoMessage()    {}
func (*ProvisionEndDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{8}
}
func (m *ProvisionEndDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionEndDevicesRequest.Unmarshal(m, b)
}
func (m *ProvisionEndDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionEndDevicesRequest.Marshal(b, m, deterministic)
}
func (m *ProvisionEndDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionEndDevicesRequest.Merge(m, src)
}
func (m *ProvisionEndDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_ProvisionEndDevicesRequest.Size(m)
}
func (m *ProvisionEndDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionEndDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionEndDevicesRequest proto.InternalMessageInfo

type isProvisionEndDevicesRequest_EndDevices interface {
	isProvisionEndDevicesRequest_EndDevices()
}

type ProvisionEndDevicesRequest_List struct {
	List *ProvisionEndDevicesRequest_IdentifiersList `protobuf:"bytes,4,opt,name=list,proto3,oneof" json:"list,omitempty"`
}
type ProvisionEndDevicesRequest_Range struct {
	Range *ProvisionEndDevicesRequest_IdentifiersRange `protobuf:"bytes,5,opt,name=range,proto3,oneof" json:"range,omitempty"`
}
type ProvisionEndDevicesRequest_FromData struct {
	FromData *ProvisionEndDevicesRequest_IdentifiersFromData `protobuf:"bytes,6,opt,name=from_data,json=fromData,proto3,oneof" json:"from_data,omitempty"`
}

func (*ProvisionEndDevicesRequest_List) isProvisionEndDevicesRequest_EndDevices()     {}
func (*ProvisionEndDevicesRequest_Range) isProvisionEndDevicesRequest_EndDevices()    {}
func (*ProvisionEndDevicesRequest_FromData) isProvisionEndDevicesRequest_EndDevices() {}

func (m *ProvisionEndDevicesRequest) GetEndDevices() isProvisionEndDevicesRequest_EndDevices {
	if m != nil {
		return m.EndDevices
	}
	return nil
}

func (m *ProvisionEndDevicesRequest) GetApplicationIds() *ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return nil
}

func (m *ProvisionEndDevicesRequest) GetProvisionerId() string {
	if m != nil {
		return m.ProvisionerId
	}
	return ""
}

func (m *ProvisionEndDevicesRequest) GetProvisioningData() []byte {
	if m != nil {
		return m.ProvisioningData
	}
	return nil
}

func (m *ProvisionEndDevicesRequest) GetList() *ProvisionEndDevicesRequest_IdentifiersList {
	if x, ok := m.GetEndDevices().(*ProvisionEndDevicesRequest_List); ok {
		return x.List
	}
	return nil
}

func (m *ProvisionEndDevicesRequest) GetRange() *ProvisionEndDevicesRequest_IdentifiersRange {
	if x, ok := m.GetEndDevices().(*ProvisionEndDevicesRequest_Range); ok {
		return x.Range
	}
	return nil
}

func (m *ProvisionEndDevicesRequest) GetFromData() *ProvisionEndDevicesRequest_IdentifiersFromData {
	if x, ok := m.GetEndDevices().(*ProvisionEndDevicesRequest_FromData); ok {
		return x.FromData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProvisionEndDevicesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProvisionEndDevicesRequest_List)(nil),
		(*ProvisionEndDevicesRequest_Range)(nil),
		(*ProvisionEndDevicesRequest_FromData)(nil),
	}
}

type ProvisionEndDevicesRequest_IdentifiersList struct {
	JoinEui              []byte                  `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	EndDeviceIds         []*EndDeviceIdentifiers `protobuf:"bytes,2,rep,name=end_device_ids,json=endDeviceIds,proto3" json:"end_device_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ProvisionEndDevicesRequest_IdentifiersList) Reset() {
	*m = ProvisionEndDevicesRequest_IdentifiersList{}
}
func (m *ProvisionEndDevicesRequest_IdentifiersList) String() string {
	return proto.CompactTextString(m)
}
func (*ProvisionEndDevicesRequest_IdentifiersList) ProtoMessage() {}
func (*ProvisionEndDevicesRequest_IdentifiersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{8, 0}
}
func (m *ProvisionEndDevicesRequest_IdentifiersList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersList.Unmarshal(m, b)
}
func (m *ProvisionEndDevicesRequest_IdentifiersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersList.Marshal(b, m, deterministic)
}
func (m *ProvisionEndDevicesRequest_IdentifiersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersList.Merge(m, src)
}
func (m *ProvisionEndDevicesRequest_IdentifiersList) XXX_Size() int {
	return xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersList.Size(m)
}
func (m *ProvisionEndDevicesRequest_IdentifiersList) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersList.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersList proto.InternalMessageInfo

func (m *ProvisionEndDevicesRequest_IdentifiersList) GetJoinEui() []byte {
	if m != nil {
		return m.JoinEui
	}
	return nil
}

func (m *ProvisionEndDevicesRequest_IdentifiersList) GetEndDeviceIds() []*EndDeviceIdentifiers {
	if m != nil {
		return m.EndDeviceIds
	}
	return nil
}

type ProvisionEndDevicesRequest_IdentifiersRange struct {
	JoinEui []byte `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// DevEUI to start issuing from.
	StartDevEui          []byte   `protobuf:"bytes,2,opt,name=start_dev_eui,json=startDevEui,proto3" json:"start_dev_eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProvisionEndDevicesRequest_IdentifiersRange) Reset() {
	*m = ProvisionEndDevicesRequest_IdentifiersRange{}
}
func (m *ProvisionEndDevicesRequest_IdentifiersRange) String() string {
	return proto.CompactTextString(m)
}
func (*ProvisionEndDevicesRequest_IdentifiersRange) ProtoMessage() {}
func (*ProvisionEndDevicesRequest_IdentifiersRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{8, 1}
}
func (m *ProvisionEndDevicesRequest_IdentifiersRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersRange.Unmarshal(m, b)
}
func (m *ProvisionEndDevicesRequest_IdentifiersRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersRange.Marshal(b, m, deterministic)
}
func (m *ProvisionEndDevicesRequest_IdentifiersRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersRange.Merge(m, src)
}
func (m *ProvisionEndDevicesRequest_IdentifiersRange) XXX_Size() int {
	return xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersRange.Size(m)
}
func (m *ProvisionEndDevicesRequest_IdentifiersRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersRange.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersRange proto.InternalMessageInfo

func (m *ProvisionEndDevicesRequest_IdentifiersRange) GetJoinEui() []byte {
	if m != nil {
		return m.JoinEui
	}
	return nil
}

func (m *ProvisionEndDevicesRequest_IdentifiersRange) GetStartDevEui() []byte {
	if m != nil {
		return m.StartDevEui
	}
	return nil
}

type ProvisionEndDevicesRequest_IdentifiersFromData struct {
	JoinEui              []byte   `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProvisionEndDevicesRequest_IdentifiersFromData) Reset() {
	*m = ProvisionEndDevicesRequest_IdentifiersFromData{}
}
func (m *ProvisionEndDevicesRequest_IdentifiersFromData) String() string {
	return proto.CompactTextString(m)
}
func (*ProvisionEndDevicesRequest_IdentifiersFromData) ProtoMessage() {}
func (*ProvisionEndDevicesRequest_IdentifiersFromData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{8, 2}
}
func (m *ProvisionEndDevicesRequest_IdentifiersFromData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersFromData.Unmarshal(m, b)
}
func (m *ProvisionEndDevicesRequest_IdentifiersFromData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersFromData.Marshal(b, m, deterministic)
}
func (m *ProvisionEndDevicesRequest_IdentifiersFromData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersFromData.Merge(m, src)
}
func (m *ProvisionEndDevicesRequest_IdentifiersFromData) XXX_Size() int {
	return xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersFromData.Size(m)
}
func (m *ProvisionEndDevicesRequest_IdentifiersFromData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersFromData.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionEndDevicesRequest_IdentifiersFromData proto.InternalMessageInfo

func (m *ProvisionEndDevicesRequest_IdentifiersFromData) GetJoinEui() []byte {
	if m != nil {
		return m.JoinEui
	}
	return nil
}

type ApplicationActivationSettings struct {
	// The KEK label to use for wrapping application keys.
	KekLabel string `protobuf:"bytes,1,opt,name=kek_label,json=kekLabel,proto3" json:"kek_label,omitempty"`
	// The (encrypted) Key Encryption Key.
	Kek *KeyEnvelope `protobuf:"bytes,2,opt,name=kek,proto3" json:"kek,omitempty"`
	// Home NetID.
	HomeNetId []byte `protobuf:"bytes,3,opt,name=home_net_id,json=homeNetId,proto3" json:"home_net_id,omitempty"`
	// The AS-ID of the Application Server to use.
	ApplicationServerId  string   `protobuf:"bytes,4,opt,name=application_server_id,json=applicationServerId,proto3" json:"application_server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationActivationSettings) Reset()         { *m = ApplicationActivationSettings{} }
func (m *ApplicationActivationSettings) String() string { return proto.CompactTextString(m) }
func (*ApplicationActivationSettings) ProtoMessage()    {}
func (*ApplicationActivationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{9}
}
func (m *ApplicationActivationSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationActivationSettings.Unmarshal(m, b)
}
func (m *ApplicationActivationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationActivationSettings.Marshal(b, m, deterministic)
}
func (m *ApplicationActivationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationActivationSettings.Merge(m, src)
}
func (m *ApplicationActivationSettings) XXX_Size() int {
	return xxx_messageInfo_ApplicationActivationSettings.Size(m)
}
func (m *ApplicationActivationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationActivationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationActivationSettings proto.InternalMessageInfo

func (m *ApplicationActivationSettings) GetKekLabel() string {
	if m != nil {
		return m.KekLabel
	}
	return ""
}

func (m *ApplicationActivationSettings) GetKek() *KeyEnvelope {
	if m != nil {
		return m.Kek
	}
	return nil
}

func (m *ApplicationActivationSettings) GetHomeNetId() []byte {
	if m != nil {
		return m.HomeNetId
	}
	return nil
}

func (m *ApplicationActivationSettings) GetApplicationServerId() string {
	if m != nil {
		return m.ApplicationServerId
	}
	return ""
}

type GetApplicationActivationSettingsRequest struct {
	ApplicationIds       *ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids,omitempty"`
	FieldMask            *types.FieldMask        `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetApplicationActivationSettingsRequest) Reset() {
	*m = GetApplicationActivationSettingsRequest{}
}
func (m *GetApplicationActivationSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*GetApplicationActivationSettingsRequest) ProtoMessage()    {}
func (*GetApplicationActivationSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{10}
}
func (m *GetApplicationActivationSettingsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetApplicationActivationSettingsRequest.Unmarshal(m, b)
}
func (m *GetApplicationActivationSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetApplicationActivationSettingsRequest.Marshal(b, m, deterministic)
}
func (m *GetApplicationActivationSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplicationActivationSettingsRequest.Merge(m, src)
}
func (m *GetApplicationActivationSettingsRequest) XXX_Size() int {
	return xxx_messageInfo_GetApplicationActivationSettingsRequest.Size(m)
}
func (m *GetApplicationActivationSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplicationActivationSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplicationActivationSettingsRequest proto.InternalMessageInfo

func (m *GetApplicationActivationSettingsRequest) GetApplicationIds() *ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return nil
}

func (m *GetApplicationActivationSettingsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type SetApplicationActivationSettingsRequest struct {
	ApplicationIds       *ApplicationIdentifiers        `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids,omitempty"`
	Settings             *ApplicationActivationSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	FieldMask            *types.FieldMask               `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SetApplicationActivationSettingsRequest) Reset() {
	*m = SetApplicationActivationSettingsRequest{}
}
func (m *SetApplicationActivationSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*SetApplicationActivationSettingsRequest) ProtoMessage()    {}
func (*SetApplicationActivationSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{11}
}
func (m *SetApplicationActivationSettingsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetApplicationActivationSettingsRequest.Unmarshal(m, b)
}
func (m *SetApplicationActivationSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetApplicationActivationSettingsRequest.Marshal(b, m, deterministic)
}
func (m *SetApplicationActivationSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationActivationSettingsRequest.Merge(m, src)
}
func (m *SetApplicationActivationSettingsRequest) XXX_Size() int {
	return xxx_messageInfo_SetApplicationActivationSettingsRequest.Size(m)
}
func (m *SetApplicationActivationSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationActivationSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationActivationSettingsRequest proto.InternalMessageInfo

func (m *SetApplicationActivationSettingsRequest) GetApplicationIds() *ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return nil
}

func (m *SetApplicationActivationSettingsRequest) GetSettings() *ApplicationActivationSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *SetApplicationActivationSettingsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type DeleteApplicationActivationSettingsRequest struct {
	ApplicationIds       *ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3" json:"application_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DeleteApplicationActivationSettingsRequest) Reset() {
	*m = DeleteApplicationActivationSettingsRequest{}
}
func (m *DeleteApplicationActivationSettingsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*DeleteApplicationActivationSettingsRequest) ProtoMessage() {}
func (*DeleteApplicationActivationSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{12}
}
func (m *DeleteApplicationActivationSettingsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteApplicationActivationSettingsRequest.Unmarshal(m, b)
}
func (m *DeleteApplicationActivationSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteApplicationActivationSettingsRequest.Marshal(b, m, deterministic)
}
func (m *DeleteApplicationActivationSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteApplicationActivationSettingsRequest.Merge(m, src)
}
func (m *DeleteApplicationActivationSettingsRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteApplicationActivationSettingsRequest.Size(m)
}
func (m *DeleteApplicationActivationSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteApplicationActivationSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteApplicationActivationSettingsRequest proto.InternalMessageInfo

func (m *DeleteApplicationActivationSettingsRequest) GetApplicationIds() *ApplicationIdentifiers {
	if m != nil {
		return m.ApplicationIds
	}
	return nil
}

type JoinEUIPrefix struct {
	JoinEui              []byte   `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	Length               uint32   `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinEUIPrefix) Reset()         { *m = JoinEUIPrefix{} }
func (m *JoinEUIPrefix) String() string { return proto.CompactTextString(m) }
func (*JoinEUIPrefix) ProtoMessage()    {}
func (*JoinEUIPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{13}
}
func (m *JoinEUIPrefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinEUIPrefix.Unmarshal(m, b)
}
func (m *JoinEUIPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinEUIPrefix.Marshal(b, m, deterministic)
}
func (m *JoinEUIPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinEUIPrefix.Merge(m, src)
}
func (m *JoinEUIPrefix) XXX_Size() int {
	return xxx_messageInfo_JoinEUIPrefix.Size(m)
}
func (m *JoinEUIPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinEUIPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_JoinEUIPrefix proto.InternalMessageInfo

func (m *JoinEUIPrefix) GetJoinEui() []byte {
	if m != nil {
		return m.JoinEui
	}
	return nil
}

func (m *JoinEUIPrefix) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type JoinEUIPrefixes struct {
	Prefixes             []*JoinEUIPrefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *JoinEUIPrefixes) Reset()         { *m = JoinEUIPrefixes{} }
func (m *JoinEUIPrefixes) String() string { return proto.CompactTextString(m) }
func (*JoinEUIPrefixes) ProtoMessage()    {}
func (*JoinEUIPrefixes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{14}
}
func (m *JoinEUIPrefixes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinEUIPrefixes.Unmarshal(m, b)
}
func (m *JoinEUIPrefixes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinEUIPrefixes.Marshal(b, m, deterministic)
}
func (m *JoinEUIPrefixes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinEUIPrefixes.Merge(m, src)
}
func (m *JoinEUIPrefixes) XXX_Size() int {
	return xxx_messageInfo_JoinEUIPrefixes.Size(m)
}
func (m *JoinEUIPrefixes) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinEUIPrefixes.DiscardUnknown(m)
}

var xxx_messageInfo_JoinEUIPrefixes proto.InternalMessageInfo

func (m *JoinEUIPrefixes) GetPrefixes() []*JoinEUIPrefix {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

type GetDefaultJoinEUIResponse struct {
	JoinEui              []byte   `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDefaultJoinEUIResponse) Reset()         { *m = GetDefaultJoinEUIResponse{} }
func (m *GetDefaultJoinEUIResponse) String() string { return proto.CompactTextString(m) }
func (*GetDefaultJoinEUIResponse) ProtoMessage()    {}
func (*GetDefaultJoinEUIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b695d5f526759a7, []int{15}
}
func (m *GetDefaultJoinEUIResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDefaultJoinEUIResponse.Unmarshal(m, b)
}
func (m *GetDefaultJoinEUIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDefaultJoinEUIResponse.Marshal(b, m, deterministic)
}
func (m *GetDefaultJoinEUIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultJoinEUIResponse.Merge(m, src)
}
func (m *GetDefaultJoinEUIResponse) XXX_Size() int {
	return xxx_messageInfo_GetDefaultJoinEUIResponse.Size(m)
}
func (m *GetDefaultJoinEUIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultJoinEUIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultJoinEUIResponse proto.InternalMessageInfo

func (m *GetDefaultJoinEUIResponse) GetJoinEui() []byte {
	if m != nil {
		return m.JoinEui
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionKeyRequest)(nil), "ttn.lorawan.v3.SessionKeyRequest")
	golang_proto.RegisterType((*SessionKeyRequest)(nil), "ttn.lorawan.v3.SessionKeyRequest")
	proto.RegisterType((*NwkSKeysResponse)(nil), "ttn.lorawan.v3.NwkSKeysResponse")
	golang_proto.RegisterType((*NwkSKeysResponse)(nil), "ttn.lorawan.v3.NwkSKeysResponse")
	proto.RegisterType((*AppSKeyResponse)(nil), "ttn.lorawan.v3.AppSKeyResponse")
	golang_proto.RegisterType((*AppSKeyResponse)(nil), "ttn.lorawan.v3.AppSKeyResponse")
	proto.RegisterType((*CryptoServicePayloadRequest)(nil), "ttn.lorawan.v3.CryptoServicePayloadRequest")
	golang_proto.RegisterType((*CryptoServicePayloadRequest)(nil), "ttn.lorawan.v3.CryptoServicePayloadRequest")
	proto.RegisterType((*CryptoServicePayloadResponse)(nil), "ttn.lorawan.v3.CryptoServicePayloadResponse")
	golang_proto.RegisterType((*CryptoServicePayloadResponse)(nil), "ttn.lorawan.v3.CryptoServicePayloadResponse")
	proto.RegisterType((*JoinAcceptMICRequest)(nil), "ttn.lorawan.v3.JoinAcceptMICRequest")
	golang_proto.RegisterType((*JoinAcceptMICRequest)(nil), "ttn.lorawan.v3.JoinAcceptMICRequest")
	proto.RegisterType((*DeriveSessionKeysRequest)(nil), "ttn.lorawan.v3.DeriveSessionKeysRequest")
	golang_proto.RegisterType((*DeriveSessionKeysRequest)(nil), "ttn.lorawan.v3.DeriveSessionKeysRequest")
	proto.RegisterType((*GetRootKeysRequest)(nil), "ttn.lorawan.v3.GetRootKeysRequest")
	golang_proto.RegisterType((*GetRootKeysRequest)(nil), "ttn.lorawan.v3.GetRootKeysRequest")
	proto.RegisterType((*ProvisionEndDevicesRequest)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest")
	golang_proto.RegisterType((*ProvisionEndDevicesRequest)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest")
	proto.RegisterType((*ProvisionEndDevicesRequest_IdentifiersList)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest.IdentifiersList")
	golang_proto.RegisterType((*ProvisionEndDevicesRequest_IdentifiersList)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest.IdentifiersList")
	proto.RegisterType((*ProvisionEndDevicesRequest_IdentifiersRange)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest.IdentifiersRange")
	golang_proto.RegisterType((*ProvisionEndDevicesRequest_IdentifiersRange)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest.IdentifiersRange")
	proto.RegisterType((*ProvisionEndDevicesRequest_IdentifiersFromData)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest.IdentifiersFromData")
	golang_proto.RegisterType((*ProvisionEndDevicesRequest_IdentifiersFromData)(nil), "ttn.lorawan.v3.ProvisionEndDevicesRequest.IdentifiersFromData")
	proto.RegisterType((*ApplicationActivationSettings)(nil), "ttn.lorawan.v3.ApplicationActivationSettings")
	golang_proto.RegisterType((*ApplicationActivationSettings)(nil), "ttn.lorawan.v3.ApplicationActivationSettings")
	proto.RegisterType((*GetApplicationActivationSettingsRequest)(nil), "ttn.lorawan.v3.GetApplicationActivationSettingsRequest")
	golang_proto.RegisterType((*GetApplicationActivationSettingsRequest)(nil), "ttn.lorawan.v3.GetApplicationActivationSettingsRequest")
	proto.RegisterType((*SetApplicationActivationSettingsRequest)(nil), "ttn.lorawan.v3.SetApplicationActivationSettingsRequest")
	golang_proto.RegisterType((*SetApplicationActivationSettingsRequest)(nil), "ttn.lorawan.v3.SetApplicationActivationSettingsRequest")
	proto.RegisterType((*DeleteApplicationActivationSettingsRequest)(nil), "ttn.lorawan.v3.DeleteApplicationActivationSettingsRequest")
	golang_proto.RegisterType((*DeleteApplicationActivationSettingsRequest)(nil), "ttn.lorawan.v3.DeleteApplicationActivationSettingsRequest")
	proto.RegisterType((*JoinEUIPrefix)(nil), "ttn.lorawan.v3.JoinEUIPrefix")
	golang_proto.RegisterType((*JoinEUIPrefix)(nil), "ttn.lorawan.v3.JoinEUIPrefix")
	proto.RegisterType((*JoinEUIPrefixes)(nil), "ttn.lorawan.v3.JoinEUIPrefixes")
	golang_proto.RegisterType((*JoinEUIPrefixes)(nil), "ttn.lorawan.v3.JoinEUIPrefixes")
	proto.RegisterType((*GetDefaultJoinEUIResponse)(nil), "ttn.lorawan.v3.GetDefaultJoinEUIResponse")
	golang_proto.RegisterType((*GetDefaultJoinEUIResponse)(nil), "ttn.lorawan.v3.GetDefaultJoinEUIResponse")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/joinserver.proto", fileDescriptor_1b695d5f526759a7)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/joinserver.proto", fileDescriptor_1b695d5f526759a7)
}

var fileDescriptor_1b695d5f526759a7 = []byte{
	// 2162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0x4b, 0x6c, 0x1b, 0xc7,
	0x19, 0xce, 0x2c, 0x29, 0x8a, 0x1c, 0x59, 0x94, 0x3c, 0x7e, 0xd1, 0xb4, 0x1d, 0xdb, 0x1b, 0xa5,
	0x76, 0x94, 0xf0, 0x51, 0x0a, 0x81, 0x13, 0xa5, 0xa8, 0x4b, 0x8a, 0xb4, 0x44, 0xc9, 0x12, 0x9c,
	0xa5, 0x5d, 0x24, 0x4e, 0x6d, 0x62, 0xcd, 0x1d, 0x52, 0x6b, 0x2e, 0x67, 0xb7, 0x3b, 0x43, 0xca,
	0x74, 0x6a, 0xa0, 0xf0, 0xa1, 0x2d, 0x7a, 0x74, 0x91, 0x1e, 0x7a, 0x68, 0x83, 0xf6, 0xd0, 0xc2,
	0x97, 0x3e, 0x60, 0xa0, 0xb7, 0xbe, 0x50, 0xf4, 0xd0, 0x43, 0x5b, 0xa0, 0xa7, 0x9e, 0x5b, 0xa0,
	0x41, 0x0b, 0xb4, 0x45, 0x0e, 0x39, 0xe8, 0x54, 0xec, 0xec, 0x72, 0xb9, 0x5c, 0x3e, 0x4c, 0xfa,
	0x91, 0xd8, 0xba, 0x2d, 0x77, 0xfe, 0xf9, 0xe6, 0xff, 0xbf, 0xff, 0xb1, 0xff, 0xfc, 0x84, 0xa2,
	0xa6, 0x9b, 0xf2, 0x8e, 0x4c, 0x12, 0x94, 0xc9, 0x95, 0x7a, 0x4a, 0x36, 0xd4, 0xd4, 0x4d, 0x5d,
	0x25, 0x14, 0x9b, 0x2d, 0x6c, 0x26, 0x0d, 0x53, 0x67, 0x3a, 0x8a, 0x32, 0x46, 0x92, 0x8e, 0x5c,
	0xb2, 0xb5, 0x14, 0xcf, 0xd6, 0x54, 0xb6, 0xdd, 0xbc, 0x91, 0xac, 0xe8, 0x8d, 0x14, 0x26, 0x2d,
	0xbd, 0x6d, 0x98, 0xfa, 0xad, 0x76, 0x8a, 0x0b, 0x57, 0x12, 0x35, 0x4c, 0x12, 0x2d, 0x59, 0x53,
	0x15, 0x99, 0xe1, 0x54, 0xdf, 0x83, 0x0d, 0x19, 0x4f, 0x78, 0x20, 0x6a, 0x7a, 0x4d, 0xb7, 0x37,
	0xdf, 0x68, 0x56, 0xf9, 0x2f, 0xfe, 0x83, 0x3f, 0x39, 0xe2, 0x79, 0x8f, 0xf8, 0xe5, 0x6d, 0x7c,
	0x79, 0x5b, 0x25, 0x35, 0x5a, 0x24, 0x4a, 0x93, 0x32, 0x53, 0xc5, 0xd4, 0x7b, 0x74, 0x4d, 0x4f,
	0x54, 0x35, 0xb9, 0x46, 0x53, 0x32, 0x21, 0x3a, 0x93, 0x99, 0xaa, 0x13, 0xea, 0xa0, 0xac, 0x4c,
	0x84, 0x72, 0x93, 0xea, 0x64, 0x00, 0xc8, 0xf1, 0x9a, 0xae, 0xd7, 0x34, 0xcc, 0x99, 0xea, 0x5f,
	0x3d, 0xe6, 0xac, 0xba, 0xe6, 0xe0, 0x86, 0xc1, 0xda, 0xce, 0xe2, 0x29, 0xff, 0x62, 0x55, 0xc5,
	0x9a, 0x52, 0x6e, 0xc8, 0xb4, 0xee, 0x03, 0x77, 0x25, 0x28, 0x33, 0x9b, 0x15, 0xe6, 0xac, 0x0e,
	0xf0, 0x15, 0x26, 0x4a, 0x59, 0xc1, 0x2d, 0xb5, 0xd2, 0x21, 0xf6, 0xa5, 0x7e, 0x19, 0x55, 0xc1,
	0x84, 0xa9, 0x55, 0x15, 0x9b, 0xae, 0x0d, 0x83, 0x9d, 0x3e, 0x7c, 0xb5, 0x8e, 0xdb, 0x9d, 0xbd,
	0x27, 0xfb, 0x57, 0x3b, 0xa1, 0x61, 0x0b, 0x24, 0x3d, 0x34, 0xea, 0x06, 0x26, 0xb2, 0xa1, 0xb6,
	0x32, 0x29, 0xdd, 0xe0, 0x34, 0xf5, 0x53, 0x26, 0xfe, 0x33, 0x00, 0xf7, 0x97, 0x30, 0xa5, 0xaa,
	0x4e, 0x36, 0x70, 0x5b, 0xc2, 0x5f, 0x6d, 0x62, 0xca, 0x50, 0x12, 0x46, 0xa9, 0xfd, 0xb2, 0x5c,
	0xc7, 0xed, 0xb2, 0xaa, 0xc4, 0xc0, 0x29, 0x70, 0x76, 0x5f, 0x2e, 0xbc, 0x9b, 0x9b, 0xba, 0x1d,
	0x88, 0x7d, 0x7d, 0x5e, 0xda, 0x47, 0xdd, 0x4d, 0x45, 0x05, 0xfd, 0x09, 0xc0, 0x69, 0x05, 0xb7,
	0xca, 0xb8, 0xa9, 0xc6, 0x04, 0x2e, 0xf9, 0x00, 0xdc, 0xcb, 0x9e, 0x5e, 0x47, 0xe2, 0xb9, 0x74,
	0x6e, 0x29, 0xff, 0xfa, 0xb9, 0x42, 0x3e, 0x9d, 0x4e, 0x67, 0x73, 0x2b, 0x79, 0xf1, 0x7b, 0x02,
	0x98, 0xfe, 0xa1, 0x10, 0xb2, 0x9c, 0x4e, 0x6a, 0xbb, 0xb9, 0xd0, 0xed, 0xe0, 0x76, 0xd8, 0x00,
	0xff, 0xba, 0x7f, 0xf4, 0x2e, 0x80, 0xe7, 0x6b, 0x7a, 0x92, 0x6d, 0x63, 0xc6, 0x43, 0x23, 0x49,
	0x30, 0xdb, 0xd1, 0xcd, 0x7a, 0xaa, 0xd7, 0xe4, 0xd6, 0x52, 0xca, 0xa8, 0xd7, 0x52, 0xac, 0x6d,
	0x60, 0x9a, 0xdc, 0x94, 0x4d, 0xba, 0x2d, 0x6b, 0x6b, 0x85, 0x77, 0x72, 0x6d, 0x86, 0x29, 0x9a,
	0x18, 0xe0, 0x0a, 0x69, 0xd8, 0x10, 0x6f, 0x70, 0x00, 0x29, 0xa4, 0xe0, 0x56, 0xa1, 0xa9, 0xa2,
	0xbf, 0x00, 0x18, 0xb6, 0x9c, 0xc2, 0x2d, 0x0a, 0x3c, 0xcf, 0x16, 0x4d, 0x5b, 0x66, 0x14, 0x9a,
	0xaa, 0xf8, 0x09, 0x80, 0xf3, 0x5b, 0x3b, 0xf5, 0xd2, 0x06, 0x6e, 0x53, 0x09, 0x53, 0x43, 0x27,
	0x14, 0xa3, 0x0d, 0x38, 0x57, 0x2d, 0x93, 0x9d, 0x7a, 0x99, 0x96, 0x55, 0xc2, 0x2c, 0x67, 0x73,
	0x4f, 0xcf, 0x64, 0x8e, 0x25, 0x7b, 0xcb, 0x4e, 0x72, 0x03, 0xb7, 0x0b, 0xa4, 0x85, 0x35, 0xdd,
	0xc0, 0x3c, 0x0c, 0xbe, 0x0d, 0x84, 0x79, 0x20, 0xcd, 0x54, 0x2d, 0xc8, 0x22, 0x61, 0x1b, 0xb8,
	0x6d, 0x81, 0x51, 0x1f, 0x98, 0x30, 0x11, 0x18, 0xf5, 0x80, 0xad, 0xc1, 0x59, 0x1b, 0x0a, 0x93,
	0x0a, 0x87, 0x0a, 0x4c, 0x02, 0x05, 0xc9, 0x4e, 0xbd, 0x54, 0x20, 0x95, 0x0d, 0xdc, 0x16, 0x2f,
	0xc3, 0xb9, 0xac, 0x61, 0x94, 0x78, 0x78, 0x3b, 0x66, 0x67, 0x61, 0x44, 0x36, 0x8c, 0x32, 0x9d,
	0xdc, 0xe0, 0x69, 0xd9, 0x86, 0x12, 0xff, 0x2d, 0xc0, 0x63, 0x2b, 0x66, 0xdb, 0x60, 0x7a, 0x09,
	0x9b, 0x56, 0x09, 0xb8, 0x24, 0xb7, 0x35, 0x5d, 0x56, 0x3a, 0x29, 0xf4, 0x25, 0x18, 0x50, 0x15,
	0xea, 0x80, 0x2f, 0xf8, 0xc1, 0x0b, 0x44, 0xc9, 0xf3, 0xc2, 0x51, 0xec, 0x96, 0x07, 0xcf, 0x29,
	0xd6, 0x56, 0xb4, 0x09, 0xe7, 0x9c, 0x1d, 0xe5, 0x16, 0x36, 0xad, 0x64, 0xe3, 0x74, 0x46, 0x33,
	0x71, 0x3f, 0xda, 0x66, 0x76, 0xe5, 0xcb, 0xb6, 0x04, 0xc7, 0xb8, 0xcb, 0x31, 0xa2, 0x8e, 0x80,
	0xb3, 0x82, 0x44, 0x38, 0x6d, 0xd8, 0x2a, 0x3a, 0x01, 0xdd, 0x49, 0x66, 0x41, 0xea, 0x2c, 0xa0,
	0xb7, 0x61, 0xd4, 0x30, 0xf5, 0x96, 0x6a, 0x6d, 0xc0, 0xa6, 0x95, 0xf7, 0xc1, 0x53, 0xe0, 0x6c,
	0x24, 0xb7, 0xb8, 0x9b, 0x3b, 0x63, 0xbe, 0x1c, 0x5b, 0xc8, 0x9c, 0xbe, 0xfe, 0x9e, 0x9c, 0xb8,
	0x9d, 0x4e, 0xbc, 0x79, 0xed, 0xec, 0xf9, 0xe5, 0xf7, 0x12, 0xd7, 0xce, 0x77, 0x7e, 0xbe, 0xf2,
	0x7e, 0xe6, 0xb5, 0x3b, 0x0b, 0x5f, 0xbb, 0xbe, 0x20, 0xcd, 0x7a, 0x10, 0x8a, 0x0a, 0xca, 0xc3,
	0xfd, 0xee, 0x0b, 0x95, 0xd4, 0xca, 0x8a, 0xcc, 0xe4, 0xd8, 0x14, 0x67, 0xe5, 0x48, 0xd2, 0x2e,
	0xb8, 0xc9, 0x4e, 0xc1, 0x4d, 0x96, 0x78, 0xc1, 0x95, 0xe6, 0xbd, 0x3b, 0xf2, 0x32, 0x93, 0xc5,
	0x37, 0xe0, 0xf1, 0xc1, 0x64, 0x3b, 0x0e, 0x8d, 0x75, 0x8d, 0xe3, 0x95, 0xca, 0x35, 0x49, 0xfc,
	0x6e, 0x00, 0x1e, 0x5c, 0xd7, 0x55, 0x92, 0xad, 0x54, 0xb0, 0xc1, 0x36, 0x8b, 0x2b, 0x1d, 0x07,
	0x5d, 0x87, 0x73, 0x8e, 0x4c, 0xd9, 0xb4, 0x5f, 0x39, 0xce, 0x7a, 0xd5, 0x4f, 0xef, 0x08, 0x37,
	0x7b, 0x7c, 0x16, 0x35, 0x7a, 0x03, 0xe0, 0x0a, 0xdc, 0xcf, 0x2b, 0x88, 0x03, 0x5e, 0xb6, 0xd2,
	0xd3, 0x71, 0xe0, 0x49, 0xff, 0x09, 0x96, 0x82, 0xce, 0xbe, 0xcb, 0x6d, 0x27, 0xde, 0x6c, 0x2f,
	0xce, 0xdd, 0xec, 0x5d, 0x42, 0x7f, 0x00, 0x30, 0x62, 0x95, 0x5a, 0xa2, 0x93, 0x0a, 0x76, 0x3c,
	0xf9, 0x13, 0x70, 0x2f, 0x7b, 0x68, 0x3d, 0x24, 0x0e, 0x2b, 0x47, 0xc2, 0x33, 0x50, 0x8e, 0x32,
	0x76, 0x39, 0x0a, 0x2b, 0xb8, 0xb5, 0x65, 0xa9, 0x2e, 0xfe, 0x60, 0x1a, 0xc6, 0xf2, 0xd8, 0x54,
	0x5b, 0xb8, 0xfb, 0xfd, 0xa1, 0xcf, 0x6c, 0xf6, 0xfc, 0x11, 0x40, 0xc8, 0xdd, 0xe9, 0xe5, 0xfd,
	0x3e, 0xb8, 0x97, 0x3d, 0xb2, 0x1e, 0xe6, 0xbc, 0x17, 0x2e, 0x0c, 0x62, 0x3e, 0xf0, 0x0c, 0x30,
	0xbf, 0x64, 0x33, 0x1f, 0xb1, 0xd4, 0xe7, 0xd4, 0xfb, 0x62, 0x28, 0xf8, 0xdc, 0xc6, 0x10, 0xfa,
	0x1d, 0x80, 0x21, 0x82, 0x99, 0x55, 0xa8, 0xa6, 0x7a, 0x3c, 0x92, 0x4e, 0xa7, 0xd3, 0x9f, 0x5f,
	0x7a, 0xc6, 0x3d, 0x32, 0x45, 0x30, 0x2b, 0x0e, 0x2a, 0xba, 0xa1, 0xa7, 0x52, 0x74, 0xa7, 0x27,
	0x2d, 0xba, 0xff, 0x05, 0x10, 0xad, 0x62, 0x26, 0xe9, 0x3a, 0x7b, 0xb2, 0xb9, 0xd9, 0x6f, 0xb1,
	0xf0, 0x54, 0x2c, 0x0e, 0x4c, 0x6c, 0xf1, 0x0c, 0x8c, 0x5f, 0xea, 0xbc, 0x74, 0x2d, 0x71, 0x2d,
	0x7f, 0x17, 0xce, 0xc9, 0x86, 0xa1, 0xa9, 0x15, 0xde, 0x42, 0x97, 0xbb, 0x2c, 0x7c, 0xce, 0xcf,
	0x42, 0xb6, 0x2b, 0x36, 0x98, 0x87, 0xa8, 0xec, 0x95, 0xa0, 0x68, 0x6b, 0x08, 0x25, 0x67, 0x76,
	0x73, 0x0b, 0xa6, 0x18, 0x5b, 0xc8, 0xbc, 0x38, 0x9a, 0x12, 0x3f, 0x1f, 0xaf, 0x0e, 0xe3, 0x63,
	0x5f, 0xbf, 0xd9, 0xe8, 0x12, 0x0c, 0x6a, 0x2a, 0x65, 0xbc, 0x12, 0xcc, 0x64, 0x96, 0xfd, 0xc6,
	0x0c, 0x67, 0x24, 0xe9, 0x31, 0xee, 0xa2, 0x4a, 0xd9, 0xda, 0x0b, 0x12, 0x47, 0x42, 0x25, 0x38,
	0x65, 0xca, 0xa4, 0x86, 0x9d, 0x2f, 0xfd, 0x5b, 0x8f, 0x06, 0x29, 0x59, 0x10, 0x6b, 0x2f, 0x48,
	0x36, 0x16, 0xba, 0x06, 0x23, 0x55, 0x53, 0x6f, 0xd8, 0xb6, 0x84, 0x38, 0xf0, 0x17, 0x1f, 0x0d,
	0xf8, 0x82, 0xa9, 0x37, 0x2c, 0xcb, 0xd7, 0x5e, 0x90, 0xc2, 0x55, 0xe7, 0x39, 0xfe, 0x33, 0x01,
	0xce, 0xf9, 0xec, 0xe9, 0xbd, 0x07, 0x80, 0xbd, 0x70, 0x0f, 0x40, 0xeb, 0x30, 0xda, 0xbd, 0xb7,
	0xf2, 0x18, 0x16, 0x4e, 0x05, 0xc6, 0xcd, 0x64, 0x69, 0x1f, 0xee, 0xbe, 0xa5, 0xf1, 0xdf, 0x06,
	0xe0, 0xbc, 0xdf, 0x5f, 0x7b, 0x91, 0xb3, 0xbf, 0x01, 0x38, 0x4b, 0x99, 0x6c, 0xb2, 0xf2, 0x9e,
	0xb8, 0xe5, 0xce, 0x70, 0x5b, 0xf2, 0xfc, 0xaa, 0x1b, 0xff, 0x08, 0xc0, 0x03, 0x03, 0x52, 0x63,
	0x0f, 0xba, 0x71, 0x59, 0x88, 0x81, 0xdc, 0x2c, 0x9c, 0xe9, 0x86, 0x3f, 0x15, 0x7f, 0x1a, 0x84,
	0x27, 0x3c, 0xc5, 0x3a, 0x5b, 0x61, 0x6a, 0x8b, 0x3f, 0x95, 0x30, 0x63, 0xd6, 0x81, 0xe8, 0x65,
	0x18, 0xa9, 0xe3, 0x7a, 0x59, 0x93, 0x6f, 0x60, 0x8d, 0xf3, 0x10, 0xe1, 0x65, 0xdc, 0xe4, 0x63,
	0x90, 0x70, 0x1d, 0xd7, 0x2f, 0x5a, 0x2b, 0x28, 0x01, 0x03, 0x75, 0x5c, 0x1f, 0xe3, 0xc2, 0x2b,
	0x59, 0x72, 0xe8, 0x7f, 0x02, 0x9c, 0xd9, 0xd6, 0x1b, 0xb8, 0xec, 0xb4, 0x2f, 0x76, 0x43, 0xf9,
	0x67, 0xe1, 0xf9, 0x69, 0x5f, 0x3e, 0xbe, 0x7f, 0xf4, 0x43, 0x10, 0xdf, 0x1a, 0x0f, 0xa5, 0xd2,
	0x50, 0x52, 0x8c, 0x91, 0x84, 0xb6, 0x93, 0xa8, 0x68, 0x6a, 0xaa, 0xd2, 0xa4, 0x4c, 0x6f, 0xf0,
	0x49, 0x61, 0x72, 0x0b, 0xef, 0xd8, 0x80, 0x17, 0x34, 0xb9, 0x26, 0x3e, 0x3e, 0xde, 0x2a, 0x66,
	0x85, 0x5b, 0x72, 0x85, 0x39, 0x5d, 0xaf, 0x45, 0xf2, 0x16, 0xef, 0xb3, 0xde, 0x82, 0x87, 0xbc,
	0x5f, 0x6f, 0x7b, 0xc8, 0xda, 0xbd, 0xe3, 0x4e, 0xef, 0xe6, 0x82, 0xa6, 0x10, 0x53, 0xa4, 0x03,
	0x1e, 0xa9, 0x12, 0x17, 0x2a, 0x2a, 0xcb, 0xe1, 0x8f, 0xef, 0x1f, 0x0d, 0x86, 0xc1, 0x3c, 0x10,
	0x7f, 0x0d, 0xe0, 0x99, 0x55, 0xcc, 0x46, 0x06, 0xcd, 0xa7, 0xd0, 0x30, 0xbc, 0x09, 0x61, 0x77,
	0x80, 0xe9, 0x84, 0x5d, 0xbc, 0xaf, 0xd3, 0xb9, 0x60, 0x89, 0x6c, 0xca, 0xb4, 0x2e, 0x45, 0xaa,
	0x9d, 0x47, 0xf1, 0xfb, 0x02, 0x3c, 0x53, 0xfa, 0xec, 0x2d, 0x28, 0xc1, 0x30, 0x75, 0x4e, 0x73,
	0xf4, 0x4f, 0x8c, 0xc0, 0xec, 0x57, 0xd1, 0x03, 0xed, 0x02, 0xf9, 0x68, 0x09, 0x4c, 0x40, 0x8b,
	0xc7, 0xc5, 0xdf, 0x04, 0x70, 0x31, 0x8f, 0x35, 0xcc, 0xf0, 0x67, 0xcc, 0x91, 0xb8, 0x0b, 0xe0,
	0xec, 0xba, 0x55, 0xbd, 0xae, 0x14, 0x2f, 0x99, 0xb8, 0xaa, 0xde, 0xda, 0x8b, 0x5f, 0xd7, 0xc3,
	0x30, 0xa4, 0x61, 0x52, 0x63, 0xdb, 0x3c, 0x0c, 0x66, 0x25, 0xe7, 0x97, 0x78, 0x11, 0xce, 0xf5,
	0xd8, 0x8e, 0x2d, 0xf7, 0x86, 0x0d, 0xe7, 0x39, 0x06, 0x78, 0xdb, 0x72, 0x62, 0xd0, 0x2c, 0xc5,
	0xdd, 0x22, 0xb9, 0xe2, 0xe2, 0x7f, 0x00, 0x3c, 0xba, 0x8a, 0x59, 0x1e, 0x57, 0xe5, 0xa6, 0xc6,
	0x1c, 0x29, 0x77, 0x80, 0xb4, 0xf7, 0x68, 0xcd, 0xfc, 0x08, 0xc0, 0xe0, 0x16, 0x5d, 0xa7, 0x68,
	0x15, 0xc2, 0x35, 0x99, 0x28, 0x1a, 0xb6, 0x8c, 0x46, 0xc7, 0x46, 0x0c, 0x9f, 0xe2, 0xc7, 0x07,
	0x2f, 0x3a, 0x24, 0x49, 0x70, 0x66, 0x15, 0xb3, 0xce, 0x10, 0x19, 0x9d, 0xf6, 0x0b, 0xf7, 0xfd,
	0x91, 0x10, 0x3f, 0xe5, 0x17, 0xf1, 0x4f, 0xa0, 0x33, 0xef, 0xc0, 0x60, 0xd6, 0x52, 0xf2, 0x12,
	0x84, 0x76, 0x55, 0xb5, 0x96, 0xc7, 0x81, 0x3e, 0x39, 0x20, 0xb9, 0xbc, 0x43, 0xde, 0xcc, 0xbb,
	0x70, 0x2a, 0x6b, 0x18, 0x4f, 0x05, 0xfa, 0x93, 0x20, 0x3c, 0xb8, 0x65, 0xbb, 0xa6, 0x67, 0x38,
	0x88, 0xea, 0x30, 0xea, 0xa1, 0x73, 0xb3, 0xb8, 0x82, 0x26, 0x99, 0x26, 0xc6, 0x5f, 0x1b, 0x4f,
	0xd8, 0x71, 0x47, 0xc5, 0xae, 0x0d, 0xee, 0x64, 0x13, 0x2d, 0x0c, 0xf2, 0x9e, 0x7f, 0xf0, 0x39,
	0xe1, 0x21, 0x04, 0xee, 0x2f, 0x90, 0x8a, 0x25, 0xd1, 0x05, 0x7b, 0x9a, 0x46, 0x19, 0xf0, 0x80,
	0x73, 0x9e, 0x84, 0x6f, 0x7e, 0x2a, 0x27, 0x7e, 0x05, 0x46, 0xed, 0x39, 0xa4, 0x1b, 0xd8, 0x67,
	0xfd, 0xfb, 0x87, 0xcd, 0x29, 0x1f, 0x1e, 0xdf, 0xe8, 0x22, 0x8c, 0xd8, 0x39, 0x63, 0xc5, 0x9e,
	0xe8, 0x17, 0xef, 0x1f, 0xaf, 0xc4, 0x47, 0xf5, 0x8e, 0x99, 0xdf, 0x03, 0x18, 0xf3, 0x7c, 0x44,
	0x7a, 0x83, 0xef, 0x2a, 0x9c, 0xb5, 0x15, 0xed, 0x84, 0xfa, 0xf8, 0x76, 0x3c, 0x2c, 0xe2, 0x1d,
	0x33, 0xb2, 0x86, 0xf1, 0x44, 0xcc, 0xf8, 0x20, 0x04, 0x0f, 0xac, 0x53, 0xf7, 0x82, 0x29, 0xe1,
	0x9a, 0x4a, 0x99, 0xd9, 0x46, 0xbf, 0x00, 0x30, 0xb0, 0x8a, 0x19, 0x7a, 0x69, 0xc0, 0x01, 0x1e,
	0x69, 0xfb, 0x84, 0xa3, 0x43, 0x2f, 0xac, 0x62, 0xfd, 0xee, 0x5f, 0xff, 0xf1, 0x1d, 0x01, 0xa3,
	0x4a, 0xea, 0x26, 0x4d, 0x79, 0x3e, 0xa9, 0x34, 0xf5, 0x7e, 0xef, 0xdd, 0x37, 0xe9, 0xfb, 0x70,
	0xfb, 0x7e, 0xdf, 0x49, 0x39, 0xf7, 0x84, 0xbe, 0x7d, 0xee, 0xe3, 0x1d, 0xf4, 0x0d, 0x01, 0x06,
	0x4a, 0x83, 0x94, 0x2e, 0x4d, 0xa6, 0xf4, 0xaf, 0x00, 0xd7, 0xfa, 0x97, 0x20, 0x3e, 0x52, 0xed,
	0xe4, 0x23, 0xaa, 0x9d, 0xec, 0x55, 0x7b, 0x19, 0x2c, 0x5e, 0xdd, 0x14, 0xd7, 0x9e, 0xd4, 0x49,
	0xcb, 0x60, 0x11, 0xfd, 0x18, 0xc0, 0x88, 0x3b, 0x7f, 0x41, 0x8b, 0xe3, 0x8f, 0x66, 0x46, 0xb1,
	0xf2, 0x36, 0x27, 0x65, 0x2d, 0xbe, 0xd2, 0xaf, 0xe9, 0xc3, 0x54, 0x73, 0xe7, 0x5c, 0x89, 0xae,
	0x92, 0xdf, 0x12, 0x40, 0x1a, 0xa0, 0x0f, 0x00, 0x0c, 0xd9, 0x0d, 0x1e, 0x1a, 0x6b, 0xec, 0x11,
	0x3f, 0xdc, 0xd7, 0x42, 0x16, 0x1a, 0x06, 0x6b, 0x8b, 0x9b, 0x5c, 0xbb, 0xd5, 0xc5, 0xc2, 0xe4,
	0xda, 0xb9, 0x2e, 0xea, 0xfa, 0x24, 0xf3, 0x20, 0x08, 0x17, 0x46, 0xb5, 0x9c, 0x6e, 0xa2, 0xfc,
	0xdc, 0x49, 0x94, 0x73, 0x03, 0x12, 0x65, 0x9c, 0x9e, 0x35, 0x3e, 0x59, 0xab, 0x2d, 0xe6, 0xb8,
	0x9d, 0x5f, 0x40, 0xcb, 0x93, 0xdb, 0xe9, 0xb6, 0xe6, 0x0f, 0x80, 0x9d, 0x27, 0xe7, 0x06, 0xe4,
	0xc9, 0xd3, 0xd0, 0xb9, 0xc0, 0x75, 0x3e, 0x2f, 0x3e, 0x86, 0xce, 0x56, 0x54, 0x7f, 0xd8, 0x8d,
	0x95, 0xe5, 0xfe, 0x7a, 0x3a, 0xee, 0x25, 0x61, 0x68, 0x04, 0x39, 0xcc, 0x2e, 0x3e, 0x86, 0x96,
	0x99, 0x8f, 0x00, 0x14, 0xd6, 0x29, 0xd2, 0xf8, 0xb8, 0xde, 0xdf, 0x32, 0x0f, 0x39, 0x38, 0x7e,
	0x72, 0x64, 0xe3, 0x8c, 0xa9, 0x78, 0x82, 0x6b, 0x76, 0x04, 0x1d, 0xb2, 0x34, 0xeb, 0xf4, 0xc6,
	0xe5, 0x4e, 0x3f, 0x8d, 0x18, 0xdc, 0xdf, 0xd7, 0x4e, 0x0f, 0x3d, 0xec, 0x95, 0x01, 0x71, 0x3a,
	0xb8, 0x13, 0x17, 0x8f, 0xf3, 0x63, 0x0f, 0xa3, 0x83, 0xd6, 0xb1, 0x8a, 0x2d, 0x53, 0xee, 0x1c,
	0x9f, 0x7b, 0xfd, 0x37, 0x7f, 0x7f, 0x11, 0x5c, 0x4d, 0x4d, 0xd0, 0x24, 0x33, 0x62, 0xdc, 0xb8,
	0x11, 0xe2, 0xfa, 0x2c, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x72, 0xe1, 0x95, 0x71, 0x25,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NsJsClient is the client API for NsJs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NsJsClient interface {
	// Handle a join-request message.
	HandleJoin(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Request the network session keys for a particular session.
	GetNwkSKeys(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*NwkSKeysResponse, error)
}

type nsJsClient struct {
	cc *grpc.ClientConn
}

func NewNsJsClient(cc *grpc.ClientConn) NsJsClient {
	return &nsJsClient{cc}
}

func (c *nsJsClient) HandleJoin(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsJs/HandleJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nsJsClient) GetNwkSKeys(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*NwkSKeysResponse, error) {
	out := new(NwkSKeysResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NsJs/GetNwkSKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NsJsServer is the server API for NsJs service.
type NsJsServer interface {
	// Handle a join-request message.
	HandleJoin(context.Context, *JoinRequest) (*JoinResponse, error)
	// Request the network session keys for a particular session.
	GetNwkSKeys(context.Context, *SessionKeyRequest) (*NwkSKeysResponse, error)
}

// UnimplementedNsJsServer can be embedded to have forward compatible implementations.
type UnimplementedNsJsServer struct {
}

func (*UnimplementedNsJsServer) HandleJoin(ctx context.Context, req *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleJoin not implemented")
}
func (*UnimplementedNsJsServer) GetNwkSKeys(ctx context.Context, req *SessionKeyRequest) (*NwkSKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNwkSKeys not implemented")
}

func RegisterNsJsServer(s *grpc.Server, srv NsJsServer) {
	s.RegisterService(&_NsJs_serviceDesc, srv)
}

func _NsJs_HandleJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsJsServer).HandleJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsJs/HandleJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsJsServer).HandleJoin(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NsJs_GetNwkSKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NsJsServer).GetNwkSKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NsJs/GetNwkSKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NsJsServer).GetNwkSKeys(ctx, req.(*SessionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NsJs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NsJs",
	HandlerType: (*NsJsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleJoin",
			Handler:    _NsJs_HandleJoin_Handler,
		},
		{
			MethodName: "GetNwkSKeys",
			Handler:    _NsJs_GetNwkSKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// AsJsClient is the client API for AsJs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsJsClient interface {
	// Request the application session key for a particular session.
	GetAppSKey(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error)
}

type asJsClient struct {
	cc *grpc.ClientConn
}

func NewAsJsClient(cc *grpc.ClientConn) AsJsClient {
	return &asJsClient{cc}
}

func (c *asJsClient) GetAppSKey(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error) {
	out := new(AppSKeyResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AsJs/GetAppSKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsJsServer is the server API for AsJs service.
type AsJsServer interface {
	// Request the application session key for a particular session.
	GetAppSKey(context.Context, *SessionKeyRequest) (*AppSKeyResponse, error)
}

// UnimplementedAsJsServer can be embedded to have forward compatible implementations.
type UnimplementedAsJsServer struct {
}

func (*UnimplementedAsJsServer) GetAppSKey(ctx context.Context, req *SessionKeyRequest) (*AppSKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSKey not implemented")
}

func RegisterAsJsServer(s *grpc.Server, srv AsJsServer) {
	s.RegisterService(&_AsJs_serviceDesc, srv)
}

func _AsJs_GetAppSKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsJsServer).GetAppSKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AsJs/GetAppSKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsJsServer).GetAppSKey(ctx, req.(*SessionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsJs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AsJs",
	HandlerType: (*AsJsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppSKey",
			Handler:    _AsJs_GetAppSKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// AppJsClient is the client API for AppJs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppJsClient interface {
	// Request the application session key for a particular session.
	GetAppSKey(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error)
}

type appJsClient struct {
	cc *grpc.ClientConn
}

func NewAppJsClient(cc *grpc.ClientConn) AppJsClient {
	return &appJsClient{cc}
}

func (c *appJsClient) GetAppSKey(ctx context.Context, in *SessionKeyRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error) {
	out := new(AppSKeyResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.AppJs/GetAppSKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppJsServer is the server API for AppJs service.
type AppJsServer interface {
	// Request the application session key for a particular session.
	GetAppSKey(context.Context, *SessionKeyRequest) (*AppSKeyResponse, error)
}

// UnimplementedAppJsServer can be embedded to have forward compatible implementations.
type UnimplementedAppJsServer struct {
}

func (*UnimplementedAppJsServer) GetAppSKey(ctx context.Context, req *SessionKeyRequest) (*AppSKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSKey not implemented")
}

func RegisterAppJsServer(s *grpc.Server, srv AppJsServer) {
	s.RegisterService(&_AppJs_serviceDesc, srv)
}

func _AppJs_GetAppSKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppJsServer).GetAppSKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.AppJs/GetAppSKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppJsServer).GetAppSKey(ctx, req.(*SessionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppJs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.AppJs",
	HandlerType: (*AppJsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppSKey",
			Handler:    _AppJs_GetAppSKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// NetworkCryptoServiceClient is the client API for NetworkCryptoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkCryptoServiceClient interface {
	// Calculate the join-request message MIC.
	JoinRequestMIC(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error)
	// Calculate the join-accept message MIC.
	JoinAcceptMIC(ctx context.Context, in *JoinAcceptMICRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error)
	// Encrypt the join-accept payload.
	EncryptJoinAccept(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error)
	// Encrypt the rejoin-accept payload.
	EncryptRejoinAccept(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error)
	// Derive network session keys (NwkSKey, or FNwkSKey, SNwkSKey and NwkSEncKey)
	DeriveNwkSKeys(ctx context.Context, in *DeriveSessionKeysRequest, opts ...grpc.CallOption) (*NwkSKeysResponse, error)
	// Get the NwkKey. Crypto Servers may return status code FAILED_PRECONDITION when root keys are not exposed.
	GetNwkKey(ctx context.Context, in *GetRootKeysRequest, opts ...grpc.CallOption) (*KeyEnvelope, error)
}

type networkCryptoServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkCryptoServiceClient(cc *grpc.ClientConn) NetworkCryptoServiceClient {
	return &networkCryptoServiceClient{cc}
}

func (c *networkCryptoServiceClient) JoinRequestMIC(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error) {
	out := new(CryptoServicePayloadResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/JoinRequestMIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkCryptoServiceClient) JoinAcceptMIC(ctx context.Context, in *JoinAcceptMICRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error) {
	out := new(CryptoServicePayloadResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/JoinAcceptMIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkCryptoServiceClient) EncryptJoinAccept(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error) {
	out := new(CryptoServicePayloadResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/EncryptJoinAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkCryptoServiceClient) EncryptRejoinAccept(ctx context.Context, in *CryptoServicePayloadRequest, opts ...grpc.CallOption) (*CryptoServicePayloadResponse, error) {
	out := new(CryptoServicePayloadResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/EncryptRejoinAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkCryptoServiceClient) DeriveNwkSKeys(ctx context.Context, in *DeriveSessionKeysRequest, opts ...grpc.CallOption) (*NwkSKeysResponse, error) {
	out := new(NwkSKeysResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/DeriveNwkSKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkCryptoServiceClient) GetNwkKey(ctx context.Context, in *GetRootKeysRequest, opts ...grpc.CallOption) (*KeyEnvelope, error) {
	out := new(KeyEnvelope)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.NetworkCryptoService/GetNwkKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkCryptoServiceServer is the server API for NetworkCryptoService service.
type NetworkCryptoServiceServer interface {
	// Calculate the join-request message MIC.
	JoinRequestMIC(context.Context, *CryptoServicePayloadRequest) (*CryptoServicePayloadResponse, error)
	// Calculate the join-accept message MIC.
	JoinAcceptMIC(context.Context, *JoinAcceptMICRequest) (*CryptoServicePayloadResponse, error)
	// Encrypt the join-accept payload.
	EncryptJoinAccept(context.Context, *CryptoServicePayloadRequest) (*CryptoServicePayloadResponse, error)
	// Encrypt the rejoin-accept payload.
	EncryptRejoinAccept(context.Context, *CryptoServicePayloadRequest) (*CryptoServicePayloadResponse, error)
	// Derive network session keys (NwkSKey, or FNwkSKey, SNwkSKey and NwkSEncKey)
	DeriveNwkSKeys(context.Context, *DeriveSessionKeysRequest) (*NwkSKeysResponse, error)
	// Get the NwkKey. Crypto Servers may return status code FAILED_PRECONDITION when root keys are not exposed.
	GetNwkKey(context.Context, *GetRootKeysRequest) (*KeyEnvelope, error)
}

// UnimplementedNetworkCryptoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkCryptoServiceServer struct {
}

func (*UnimplementedNetworkCryptoServiceServer) JoinRequestMIC(ctx context.Context, req *CryptoServicePayloadRequest) (*CryptoServicePayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRequestMIC not implemented")
}
func (*UnimplementedNetworkCryptoServiceServer) JoinAcceptMIC(ctx context.Context, req *JoinAcceptMICRequest) (*CryptoServicePayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinAcceptMIC not implemented")
}
func (*UnimplementedNetworkCryptoServiceServer) EncryptJoinAccept(ctx context.Context, req *CryptoServicePayloadRequest) (*CryptoServicePayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptJoinAccept not implemented")
}
func (*UnimplementedNetworkCryptoServiceServer) EncryptRejoinAccept(ctx context.Context, req *CryptoServicePayloadRequest) (*CryptoServicePayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptRejoinAccept not implemented")
}
func (*UnimplementedNetworkCryptoServiceServer) DeriveNwkSKeys(ctx context.Context, req *DeriveSessionKeysRequest) (*NwkSKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveNwkSKeys not implemented")
}
func (*UnimplementedNetworkCryptoServiceServer) GetNwkKey(ctx context.Context, req *GetRootKeysRequest) (*KeyEnvelope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNwkKey not implemented")
}

func RegisterNetworkCryptoServiceServer(s *grpc.Server, srv NetworkCryptoServiceServer) {
	s.RegisterService(&_NetworkCryptoService_serviceDesc, srv)
}

func _NetworkCryptoService_JoinRequestMIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoServicePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).JoinRequestMIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/JoinRequestMIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).JoinRequestMIC(ctx, req.(*CryptoServicePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkCryptoService_JoinAcceptMIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinAcceptMICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).JoinAcceptMIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/JoinAcceptMIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).JoinAcceptMIC(ctx, req.(*JoinAcceptMICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkCryptoService_EncryptJoinAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoServicePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).EncryptJoinAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/EncryptJoinAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).EncryptJoinAccept(ctx, req.(*CryptoServicePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkCryptoService_EncryptRejoinAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoServicePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).EncryptRejoinAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/EncryptRejoinAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).EncryptRejoinAccept(ctx, req.(*CryptoServicePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkCryptoService_DeriveNwkSKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveSessionKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).DeriveNwkSKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/DeriveNwkSKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).DeriveNwkSKeys(ctx, req.(*DeriveSessionKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkCryptoService_GetNwkKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkCryptoServiceServer).GetNwkKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.NetworkCryptoService/GetNwkKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkCryptoServiceServer).GetNwkKey(ctx, req.(*GetRootKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkCryptoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.NetworkCryptoService",
	HandlerType: (*NetworkCryptoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinRequestMIC",
			Handler:    _NetworkCryptoService_JoinRequestMIC_Handler,
		},
		{
			MethodName: "JoinAcceptMIC",
			Handler:    _NetworkCryptoService_JoinAcceptMIC_Handler,
		},
		{
			MethodName: "EncryptJoinAccept",
			Handler:    _NetworkCryptoService_EncryptJoinAccept_Handler,
		},
		{
			MethodName: "EncryptRejoinAccept",
			Handler:    _NetworkCryptoService_EncryptRejoinAccept_Handler,
		},
		{
			MethodName: "DeriveNwkSKeys",
			Handler:    _NetworkCryptoService_DeriveNwkSKeys_Handler,
		},
		{
			MethodName: "GetNwkKey",
			Handler:    _NetworkCryptoService_GetNwkKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// ApplicationCryptoServiceClient is the client API for ApplicationCryptoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationCryptoServiceClient interface {
	// Derive the application session key (AppSKey).
	DeriveAppSKey(ctx context.Context, in *DeriveSessionKeysRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error)
	// Get the AppKey. Crypto Servers may return status code FAILED_PRECONDITION when root keys are not exposed.
	GetAppKey(ctx context.Context, in *GetRootKeysRequest, opts ...grpc.CallOption) (*KeyEnvelope, error)
}

type applicationCryptoServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationCryptoServiceClient(cc *grpc.ClientConn) ApplicationCryptoServiceClient {
	return &applicationCryptoServiceClient{cc}
}

func (c *applicationCryptoServiceClient) DeriveAppSKey(ctx context.Context, in *DeriveSessionKeysRequest, opts ...grpc.CallOption) (*AppSKeyResponse, error) {
	out := new(AppSKeyResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationCryptoService/DeriveAppSKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationCryptoServiceClient) GetAppKey(ctx context.Context, in *GetRootKeysRequest, opts ...grpc.CallOption) (*KeyEnvelope, error) {
	out := new(KeyEnvelope)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationCryptoService/GetAppKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationCryptoServiceServer is the server API for ApplicationCryptoService service.
type ApplicationCryptoServiceServer interface {
	// Derive the application session key (AppSKey).
	DeriveAppSKey(context.Context, *DeriveSessionKeysRequest) (*AppSKeyResponse, error)
	// Get the AppKey. Crypto Servers may return status code FAILED_PRECONDITION when root keys are not exposed.
	GetAppKey(context.Context, *GetRootKeysRequest) (*KeyEnvelope, error)
}

// UnimplementedApplicationCryptoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationCryptoServiceServer struct {
}

func (*UnimplementedApplicationCryptoServiceServer) DeriveAppSKey(ctx context.Context, req *DeriveSessionKeysRequest) (*AppSKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveAppSKey not implemented")
}
func (*UnimplementedApplicationCryptoServiceServer) GetAppKey(ctx context.Context, req *GetRootKeysRequest) (*KeyEnvelope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppKey not implemented")
}

func RegisterApplicationCryptoServiceServer(s *grpc.Server, srv ApplicationCryptoServiceServer) {
	s.RegisterService(&_ApplicationCryptoService_serviceDesc, srv)
}

func _ApplicationCryptoService_DeriveAppSKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveSessionKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationCryptoServiceServer).DeriveAppSKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationCryptoService/DeriveAppSKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationCryptoServiceServer).DeriveAppSKey(ctx, req.(*DeriveSessionKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationCryptoService_GetAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationCryptoServiceServer).GetAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationCryptoService/GetAppKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationCryptoServiceServer).GetAppKey(ctx, req.(*GetRootKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationCryptoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationCryptoService",
	HandlerType: (*ApplicationCryptoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeriveAppSKey",
			Handler:    _ApplicationCryptoService_DeriveAppSKey_Handler,
		},
		{
			MethodName: "GetAppKey",
			Handler:    _ApplicationCryptoService_GetAppKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// JsEndDeviceRegistryClient is the client API for JsEndDeviceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JsEndDeviceRegistryClient interface {
	// Get returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// Set creates or updates the device.
	Set(ctx context.Context, in *SetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error)
	// This rpc is deprecated; use EndDeviceTemplateConverter service instead.
	// TODO: Remove (https://github.com/TheThingsNetwork/lorawan-stack/issues/999)
	Provision(ctx context.Context, in *ProvisionEndDevicesRequest, opts ...grpc.CallOption) (JsEndDeviceRegistry_ProvisionClient, error)
	// Delete deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type jsEndDeviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewJsEndDeviceRegistryClient(cc *grpc.ClientConn) JsEndDeviceRegistryClient {
	return &jsEndDeviceRegistryClient{cc}
}

func (c *jsEndDeviceRegistryClient) Get(ctx context.Context, in *GetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsEndDeviceRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsEndDeviceRegistryClient) Set(ctx context.Context, in *SetEndDeviceRequest, opts ...grpc.CallOption) (*EndDevice, error) {
	out := new(EndDevice)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsEndDeviceRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *jsEndDeviceRegistryClient) Provision(ctx context.Context, in *ProvisionEndDevicesRequest, opts ...grpc.CallOption) (JsEndDeviceRegistry_ProvisionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JsEndDeviceRegistry_serviceDesc.Streams[0], "/ttn.lorawan.v3.JsEndDeviceRegistry/Provision", opts...)
	if err != nil {
		return nil, err
	}
	x := &jsEndDeviceRegistryProvisionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JsEndDeviceRegistry_ProvisionClient interface {
	Recv() (*EndDevice, error)
	grpc.ClientStream
}

type jsEndDeviceRegistryProvisionClient struct {
	grpc.ClientStream
}

func (x *jsEndDeviceRegistryProvisionClient) Recv() (*EndDevice, error) {
	m := new(EndDevice)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jsEndDeviceRegistryClient) Delete(ctx context.Context, in *EndDeviceIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.JsEndDeviceRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JsEndDeviceRegistryServer is the server API for JsEndDeviceRegistry service.
type JsEndDeviceRegistryServer interface {
	// Get returns the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Get(context.Context, *GetEndDeviceRequest) (*EndDevice, error)
	// Set creates or updates the device.
	Set(context.Context, *SetEndDeviceRequest) (*EndDevice, error)
	// This rpc is deprecated; use EndDeviceTemplateConverter service instead.
	// TODO: Remove (https://github.com/TheThingsNetwork/lorawan-stack/issues/999)
	Provision(*ProvisionEndDevicesRequest, JsEndDeviceRegistry_ProvisionServer) error
	// Delete deletes the device that matches the given identifiers.
	// If there are multiple matches, an error will be returned.
	Delete(context.Context, *EndDeviceIdentifiers) (*types.Empty, error)
}

// UnimplementedJsEndDeviceRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedJsEndDeviceRegistryServer struct {
}

func (*UnimplementedJsEndDeviceRegistryServer) Get(ctx context.Context, req *GetEndDeviceRequest) (*EndDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedJsEndDeviceRegistryServer) Set(ctx context.Context, req *SetEndDeviceRequest) (*EndDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedJsEndDeviceRegistryServer) Provision(req *ProvisionEndDevicesRequest, srv JsEndDeviceRegistry_ProvisionServer) error {
	return status.Errorf(codes.Unimplemented, "method Provision not implemented")
}
func (*UnimplementedJsEndDeviceRegistryServer) Delete(ctx context.Context, req *EndDeviceIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterJsEndDeviceRegistryServer(s *grpc.Server, srv JsEndDeviceRegistryServer) {
	s.RegisterService(&_JsEndDeviceRegistry_serviceDesc, srv)
}

func _JsEndDeviceRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsEndDeviceRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsEndDeviceRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsEndDeviceRegistryServer).Get(ctx, req.(*GetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsEndDeviceRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsEndDeviceRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsEndDeviceRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsEndDeviceRegistryServer).Set(ctx, req.(*SetEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsEndDeviceRegistry_Provision_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProvisionEndDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JsEndDeviceRegistryServer).Provision(m, &jsEndDeviceRegistryProvisionServer{stream})
}

type JsEndDeviceRegistry_ProvisionServer interface {
	Send(*EndDevice) error
	grpc.ServerStream
}

type jsEndDeviceRegistryProvisionServer struct {
	grpc.ServerStream
}

func (x *jsEndDeviceRegistryProvisionServer) Send(m *EndDevice) error {
	return x.ServerStream.SendMsg(m)
}

func _JsEndDeviceRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndDeviceIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsEndDeviceRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.JsEndDeviceRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsEndDeviceRegistryServer).Delete(ctx, req.(*EndDeviceIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _JsEndDeviceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.JsEndDeviceRegistry",
	HandlerType: (*JsEndDeviceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _JsEndDeviceRegistry_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _JsEndDeviceRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JsEndDeviceRegistry_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Provision",
			Handler:       _JsEndDeviceRegistry_Provision_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// ApplicationActivationSettingRegistryClient is the client API for ApplicationActivationSettingRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationActivationSettingRegistryClient interface {
	// Get returns application activation settings.
	Get(ctx context.Context, in *GetApplicationActivationSettingsRequest, opts ...grpc.CallOption) (*ApplicationActivationSettings, error)
	// Set creates or updates application activation settings.
	Set(ctx context.Context, in *SetApplicationActivationSettingsRequest, opts ...grpc.CallOption) (*ApplicationActivationSettings, error)
	// Delete deletes application activation settings.
	Delete(ctx context.Context, in *DeleteApplicationActivationSettingsRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type applicationActivationSettingRegistryClient struct {
	cc *grpc.ClientConn
}

func NewApplicationActivationSettingRegistryClient(cc *grpc.ClientConn) ApplicationActivationSettingRegistryClient {
	return &applicationActivationSettingRegistryClient{cc}
}

func (c *applicationActivationSettingRegistryClient) Get(ctx context.Context, in *GetApplicationActivationSettingsRequest, opts ...grpc.CallOption) (*ApplicationActivationSettings, error) {
	out := new(ApplicationActivationSettings)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationActivationSettingRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationActivationSettingRegistryClient) Set(ctx context.Context, in *SetApplicationActivationSettingsRequest, opts ...grpc.CallOption) (*ApplicationActivationSettings, error) {
	out := new(ApplicationActivationSettings)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationActivationSettingRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationActivationSettingRegistryClient) Delete(ctx context.Context, in *DeleteApplicationActivationSettingsRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationActivationSettingRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationActivationSettingRegistryServer is the server API for ApplicationActivationSettingRegistry service.
type ApplicationActivationSettingRegistryServer interface {
	// Get returns application activation settings.
	Get(context.Context, *GetApplicationActivationSettingsRequest) (*ApplicationActivationSettings, error)
	// Set creates or updates application activation settings.
	Set(context.Context, *SetApplicationActivationSettingsRequest) (*ApplicationActivationSettings, error)
	// Delete deletes application activation settings.
	Delete(context.Context, *DeleteApplicationActivationSettingsRequest) (*types.Empty, error)
}

// UnimplementedApplicationActivationSettingRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationActivationSettingRegistryServer struct {
}

func (*UnimplementedApplicationActivationSettingRegistryServer) Get(ctx context.Context, req *GetApplicationActivationSettingsRequest) (*ApplicationActivationSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedApplicationActivationSettingRegistryServer) Set(ctx context.Context, req *SetApplicationActivationSettingsRequest) (*ApplicationActivationSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedApplicationActivationSettingRegistryServer) Delete(ctx context.Context, req *DeleteApplicationActivationSettingsRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterApplicationActivationSettingRegistryServer(s *grpc.Server, srv ApplicationActivationSettingRegistryServer) {
	s.RegisterService(&_ApplicationActivationSettingRegistry_serviceDesc, srv)
}

func _ApplicationActivationSettingRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationActivationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationActivationSettingRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationActivationSettingRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationActivationSettingRegistryServer).Get(ctx, req.(*GetApplicationActivationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationActivationSettingRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationActivationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationActivationSettingRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationActivationSettingRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationActivationSettingRegistryServer).Set(ctx, req.(*SetApplicationActivationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationActivationSettingRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationActivationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationActivationSettingRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationActivationSettingRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationActivationSettingRegistryServer).Delete(ctx, req.(*DeleteApplicationActivationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationActivationSettingRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationActivationSettingRegistry",
	HandlerType: (*ApplicationActivationSettingRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ApplicationActivationSettingRegistry_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ApplicationActivationSettingRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationActivationSettingRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}

// JsClient is the client API for Js service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JsClient interface {
	// Request the JoinEUI prefixes that are configured for this Join Server.
	GetJoinEUIPrefixes(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*JoinEUIPrefixes, error)
	// Request the default JoinEUI that is configured for this Join Server.
	GetDefaultJoinEUI(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*GetDefaultJoinEUIResponse, error)
}

type jsClient struct {
	cc *grpc.ClientConn
}

func NewJsClient(cc *grpc.ClientConn) JsClient {
	return &jsClient{cc}
}

func (c *jsClient) GetJoinEUIPrefixes(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*JoinEUIPrefixes, error) {
	out := new(JoinEUIPrefixes)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Js/GetJoinEUIPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsClient) GetDefaultJoinEUI(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*GetDefaultJoinEUIResponse, error) {
	out := new(GetDefaultJoinEUIResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.Js/GetDefaultJoinEUI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JsServer is the server API for Js service.
type JsServer interface {
	// Request the JoinEUI prefixes that are configured for this Join Server.
	GetJoinEUIPrefixes(context.Context, *types.Empty) (*JoinEUIPrefixes, error)
	// Request the default JoinEUI that is configured for this Join Server.
	GetDefaultJoinEUI(context.Context, *types.Empty) (*GetDefaultJoinEUIResponse, error)
}

// UnimplementedJsServer can be embedded to have forward compatible implementations.
type UnimplementedJsServer struct {
}

func (*UnimplementedJsServer) GetJoinEUIPrefixes(ctx context.Context, req *types.Empty) (*JoinEUIPrefixes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinEUIPrefixes not implemented")
}
func (*UnimplementedJsServer) GetDefaultJoinEUI(ctx context.Context, req *types.Empty) (*GetDefaultJoinEUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultJoinEUI not implemented")
}

func RegisterJsServer(s *grpc.Server, srv JsServer) {
	s.RegisterService(&_Js_serviceDesc, srv)
}

func _Js_GetJoinEUIPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsServer).GetJoinEUIPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Js/GetJoinEUIPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsServer).GetJoinEUIPrefixes(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Js_GetDefaultJoinEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsServer).GetDefaultJoinEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.Js/GetDefaultJoinEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsServer).GetDefaultJoinEUI(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Js_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.Js",
	HandlerType: (*JsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJoinEUIPrefixes",
			Handler:    _Js_GetJoinEUIPrefixes_Handler,
		},
		{
			MethodName: "GetDefaultJoinEUI",
			Handler:    _Js_GetDefaultJoinEUI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/joinserver.proto",
}
