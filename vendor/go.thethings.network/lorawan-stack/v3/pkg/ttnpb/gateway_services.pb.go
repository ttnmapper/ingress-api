// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/gateway_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PullGatewayConfigurationRequest struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	FieldMask            *types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PullGatewayConfigurationRequest) Reset()      { *m = PullGatewayConfigurationRequest{} }
func (*PullGatewayConfigurationRequest) ProtoMessage() {}
func (*PullGatewayConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72fc70018c9e7608, []int{0}
}
func (m *PullGatewayConfigurationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullGatewayConfigurationRequest.Unmarshal(m, b)
}
func (m *PullGatewayConfigurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullGatewayConfigurationRequest.Marshal(b, m, deterministic)
}
func (m *PullGatewayConfigurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullGatewayConfigurationRequest.Merge(m, src)
}
func (m *PullGatewayConfigurationRequest) XXX_Size() int {
	return xxx_messageInfo_PullGatewayConfigurationRequest.Size(m)
}
func (m *PullGatewayConfigurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullGatewayConfigurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullGatewayConfigurationRequest proto.InternalMessageInfo

func (m *PullGatewayConfigurationRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func init() {
	proto.RegisterType((*PullGatewayConfigurationRequest)(nil), "ttn.lorawan.v3.PullGatewayConfigurationRequest")
	golang_proto.RegisterType((*PullGatewayConfigurationRequest)(nil), "ttn.lorawan.v3.PullGatewayConfigurationRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/gateway_services.proto", fileDescriptor_72fc70018c9e7608)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/gateway_services.proto", fileDescriptor_72fc70018c9e7608)
}

var fileDescriptor_72fc70018c9e7608 = []byte{
	// 971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x18, 0xcd, 0x04, 0x08, 0xcd, 0xa4, 0x10, 0xf5, 0x03, 0x95, 0x68, 0x69, 0xd7, 0x61, 0x1b, 0x68,
	0x31, 0xf2, 0x4e, 0x70, 0xa0, 0x2a, 0xbf, 0x0e, 0x6d, 0x68, 0xad, 0x88, 0x46, 0x8a, 0x5c, 0xca,
	0xc1, 0x97, 0x68, 0x6d, 0x8f, 0x37, 0x23, 0xaf, 0x77, 0x96, 0x99, 0xb1, 0xa3, 0x10, 0x45, 0x42,
	0x3d, 0x20, 0x95, 0x53, 0x25, 0x84, 0x38, 0x71, 0x47, 0xe2, 0xc8, 0x91, 0x0b, 0xc7, 0xde, 0x40,
	0xea, 0xa5, 0x5c, 0x2a, 0x91, 0x72, 0xe0, 0xc8, 0x9f, 0x80, 0x76, 0x66, 0x37, 0x59, 0x7b, 0xbd,
	0x89, 0xad, 0x72, 0x5b, 0xcf, 0xbc, 0xf9, 0xde, 0xfb, 0x7e, 0xcc, 0xf3, 0xe0, 0x2b, 0x01, 0x17,
	0xde, 0xae, 0x17, 0x56, 0xa4, 0xf2, 0x5a, 0x5d, 0xe2, 0x45, 0x8c, 0xf8, 0x9e, 0xa2, 0xbb, 0xde,
	0xde, 0xb6, 0xa4, 0x62, 0xc0, 0x5a, 0x54, 0xba, 0x91, 0xe0, 0x8a, 0xc3, 0xcb, 0x4a, 0x85, 0x6e,
	0x82, 0x76, 0x07, 0x6b, 0x56, 0xc5, 0x67, 0x6a, 0xa7, 0xdf, 0x74, 0x5b, 0xbc, 0x47, 0x7c, 0xee,
	0x73, 0xa2, 0x61, 0xcd, 0x7e, 0x47, 0xff, 0xd2, 0x3f, 0xf4, 0x97, 0x39, 0x6e, 0x5d, 0xf0, 0x39,
	0xf7, 0x03, 0xaa, 0x19, 0xbc, 0x30, 0xe4, 0xca, 0x53, 0x8c, 0x87, 0x49, 0x70, 0xeb, 0xf5, 0x64,
	0xf7, 0x28, 0x06, 0xed, 0x45, 0x6a, 0x2f, 0xd9, 0x5c, 0x1e, 0xdd, 0xec, 0x30, 0x1a, 0xb4, 0xb7,
	0x7b, 0x9e, 0xec, 0x26, 0x88, 0x52, 0x61, 0x16, 0x09, 0xe0, 0x52, 0x1e, 0xc0, 0xda, 0x34, 0x54,
	0xac, 0xc3, 0xa8, 0x48, 0x45, 0xd8, 0x79, 0x90, 0x60, 0xfe, 0x8e, 0x4a, 0xf6, 0x9d, 0x9f, 0x11,
	0x2e, 0x6d, 0xf5, 0x83, 0xa0, 0x66, 0x42, 0xaf, 0xf3, 0xb0, 0xc3, 0xfc, 0xbe, 0xd0, 0x89, 0xd4,
	0xe9, 0x97, 0x7d, 0x2a, 0x15, 0x6c, 0xe2, 0x85, 0xb4, 0x7e, 0xac, 0x2d, 0x97, 0xd0, 0x32, 0xba,
	0xb2, 0x50, 0x75, 0xdc, 0xe1, 0xda, 0xb9, 0x49, 0x84, 0x8d, 0x63, 0x09, 0x37, 0xce, 0x3c, 0x7c,
	0x52, 0x9a, 0xf9, 0xe3, 0x49, 0x09, 0xd5, 0xb1, 0x9f, 0xee, 0x4a, 0xf8, 0x00, 0xe3, 0xe3, 0x64,
	0x97, 0x66, 0x75, 0x34, 0xcb, 0x35, 0xf5, 0x70, 0xd3, 0x7a, 0xb8, 0xb7, 0x62, 0xc8, 0xa6, 0x27,
	0xbb, 0xf5, 0xf9, 0x4e, 0xfa, 0x59, 0xfd, 0xf3, 0x0c, 0x5e, 0x4c, 0x78, 0xea, 0xd4, 0x67, 0x52,
	0x89, 0x3d, 0x78, 0x84, 0xf0, 0xdc, 0xba, 0xa0, 0x9e, 0xa2, 0xb0, 0x32, 0xaa, 0xc9, 0xac, 0x1f,
	0x9d, 0xd0, 0xe9, 0x58, 0xaf, 0x15, 0x28, 0x77, 0xee, 0xa3, 0x7b, 0x8f, 0xfe, 0xfe, 0x6e, 0xf6,
	0x1e, 0x72, 0x08, 0xe9, 0x4b, 0x2a, 0x24, 0xd9, 0x6f, 0xf1, 0x20, 0xf0, 0x9a, 0x5c, 0x78, 0x8a,
	0x0b, 0x37, 0x5e, 0x8b, 0x2b, 0x90, 0x7e, 0x1c, 0xa4, 0x0d, 0x91, 0x1f, 0xa2, 0x72, 0xe3, 0xb6,
	0x53, 0x23, 0x5c, 0xf8, 0x5e, 0xc8, 0xbe, 0x32, 0x63, 0x30, 0x72, 0x3a, 0xbb, 0xa7, 0xa3, 0x8c,
	0x2c, 0x0c, 0x45, 0x83, 0x1e, 0x7e, 0xae, 0x46, 0x15, 0xbc, 0x91, 0xd3, 0x4a, 0xd5, 0xa4, 0xe9,
	0x94, 0x75, 0x36, 0x2b, 0xe0, 0x1c, 0x05, 0x26, 0xfb, 0x99, 0x3e, 0xba, 0xc7, 0xdf, 0x07, 0x10,
	0xe2, 0x57, 0x6b, 0x54, 0x65, 0x7a, 0x77, 0x8b, 0x8b, 0x9b, 0x77, 0x37, 0xa0, 0x5a, 0xcc, 0x9f,
	0x03, 0xa7, 0x82, 0x26, 0x98, 0x0c, 0x78, 0x8c, 0xf0, 0xf3, 0xb7, 0x99, 0x54, 0x70, 0x69, 0x14,
	0x1c, 0xaf, 0x26, 0x07, 0x64, 0x1a, 0x71, 0xa9, 0x20, 0xa2, 0x74, 0x1e, 0x98, 0x96, 0xdd, 0x47,
	0x30, 0x7f, 0x94, 0x65, 0xe3, 0x5d, 0x98, 0xb6, 0x7f, 0x8d, 0x0d, 0xf8, 0xbf, 0x9a, 0x07, 0x03,
	0x3c, 0x77, 0x37, 0x6a, 0x8f, 0x1d, 0x47, 0xb3, 0x3e, 0x69, 0xff, 0x2a, 0x3a, 0xb5, 0xcb, 0xd6,
	0x98, 0xfe, 0xb9, 0x23, 0xfd, 0x8b, 0x27, 0xa6, 0x8d, 0xe7, 0x3e, 0xa5, 0x01, 0x55, 0x14, 0x26,
	0x68, 0x80, 0x75, 0x3e, 0x77, 0xe1, 0x6e, 0xc6, 0xee, 0xe4, 0xd8, 0x9a, 0x74, 0xa9, 0x7c, 0x7e,
	0xec, 0xd0, 0x1c, 0x40, 0x0f, 0xbf, 0x58, 0xa7, 0x52, 0x71, 0xf1, 0x6c, 0x34, 0x6f, 0x69, 0x9a,
	0x65, 0xc7, 0x1e, 0x4f, 0x43, 0x44, 0xc2, 0xc1, 0xf0, 0x0b, 0x5b, 0x7d, 0xe1, 0x3f, 0x1b, 0xd9,
	0x8a, 0x26, 0xb3, 0xcb, 0x17, 0x0a, 0xc8, 0xa2, 0x98, 0xa1, 0xfa, 0x0b, 0xc6, 0x2f, 0x25, 0x41,
	0xaf, 0xb7, 0x5a, 0x54, 0x4a, 0xe0, 0x18, 0xc7, 0xd3, 0x58, 0xd7, 0x7e, 0x39, 0xa1, 0x82, 0x11,
	0x8c, 0x39, 0xeb, 0xbc, 0xa9, 0x15, 0x94, 0xe0, 0x62, 0x51, 0xba, 0x86, 0xe2, 0x5b, 0x84, 0xcf,
	0x1a, 0xcb, 0xba, 0xbe, 0xb5, 0xf1, 0x19, 0xdd, 0x83, 0xf2, 0x89, 0x86, 0x66, 0x40, 0xe9, 0x1c,
	0xe5, 0xb8, 0xcd, 0xb6, 0x73, 0x55, 0x73, 0xaf, 0x3a, 0xef, 0x9c, 0x6e, 0x03, 0xf1, 0xdf, 0x43,
	0xa5, 0x4b, 0x8d, 0x03, 0x7d, 0x83, 0xf0, 0x42, 0x9c, 0xbe, 0x09, 0x23, 0xe1, 0xed, 0x13, 0x6e,
	0x6a, 0x82, 0x29, 0x1c, 0xe9, 0x64, 0xdf, 0x59, 0xd3, 0x5a, 0x2a, 0x30, 0x8d, 0x96, 0xb8, 0x2a,
	0xf3, 0x35, 0x9a, 0xe8, 0x80, 0xcb, 0xc5, 0x8e, 0x34, 0x59, 0x3d, 0x3e, 0xd6, 0x1a, 0xae, 0xc2,
	0x7b, 0x53, 0x68, 0x20, 0xfb, 0x5d, 0x6a, 0xe6, 0xff, 0x07, 0x84, 0xcf, 0x9a, 0x6b, 0x5c, 0xd4,
	0xa2, 0xa1, 0x4b, 0x3e, 0x99, 0xa4, 0x75, 0x2d, 0xe9, 0x13, 0xeb, 0xda, 0x54, 0x92, 0xbc, 0x88,
	0x6d, 0x77, 0x69, 0xec, 0x05, 0xfa, 0xfe, 0xff, 0x3a, 0x8b, 0x17, 0x6b, 0x54, 0xad, 0x67, 0x6c,
	0x0b, 0x2a, 0xc5, 0xc5, 0xca, 0xe2, 0x52, 0x7d, 0xe3, 0x6a, 0x3b, 0x8c, 0x93, 0x11, 0x0f, 0x25,
	0x75, 0x7e, 0x37, 0xb6, 0xfb, 0x10, 0x35, 0xbe, 0x80, 0xcf, 0x27, 0x10, 0x9d, 0xf5, 0x52, 0x6d,
	0xcd, 0xa7, 0x39, 0x73, 0x23, 0x84, 0x60, 0xda, 0xb8, 0x59, 0x4b, 0x9e, 0xd6, 0xbe, 0xe1, 0x7b,
	0x84, 0x17, 0xef, 0x9c, 0x56, 0xbd, 0x3b, 0x27, 0x56, 0xaf, 0xc8, 0x7e, 0x3e, 0xd2, 0xb5, 0x7a,
	0xdf, 0x5a, 0x9d, 0x32, 0x21, 0x7d, 0x0b, 0x7f, 0x44, 0xf8, 0x5c, 0x7c, 0xd1, 0xb2, 0x84, 0x12,
	0xc8, 0x09, 0x77, 0x71, 0x08, 0x99, 0x6a, 0xbb, 0x98, 0x33, 0x92, 0x2c, 0xca, 0xb9, 0xa6, 0x25,
	0x56, 0x61, 0x6a, 0x89, 0xd5, 0x01, 0x7e, 0x25, 0xf7, 0x74, 0xe4, 0x02, 0xb6, 0xf1, 0xb9, 0xf8,
	0x55, 0x39, 0xf4, 0x9c, 0xcc, 0xab, 0x3e, 0xe5, 0xe1, 0x59, 0xf8, 0xd7, 0xb8, 0x8a, 0x6e, 0x6c,
	0x3e, 0xfe, 0xcb, 0x9e, 0xf9, 0xfa, 0xd0, 0x46, 0x3f, 0x1d, 0xda, 0xe8, 0x9f, 0x43, 0x7b, 0xe6,
	0xdf, 0x43, 0x1b, 0x3d, 0x78, 0x6a, 0xcf, 0xfc, 0xf6, 0xd4, 0x46, 0x0d, 0xe2, 0x73, 0x57, 0xed,
	0x50, 0xb5, 0xc3, 0x42, 0x5f, 0xba, 0x21, 0x55, 0xbb, 0x5c, 0x74, 0xc9, 0xf0, 0x53, 0x78, 0xb0,
	0x46, 0xa2, 0xae, 0x4f, 0x94, 0x0a, 0xa3, 0x66, 0x73, 0x4e, 0xf7, 0x6c, 0xed, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4e, 0x22, 0x8a, 0x18, 0x3b, 0x0c, 0x00, 0x00,
}

func (this *PullGatewayConfigurationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PullGatewayConfigurationRequest)
	if !ok {
		that2, ok := that.(PullGatewayConfigurationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayRegistryClient is the client API for GatewayRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayRegistryClient interface {
	// Create a new gateway. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// Get the gateway with the given identifiers, selecting the fields specified
	// in the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// Get the identifiers of the gateway that has the given EUI registered.
	GetIdentifiersForEUI(ctx context.Context, in *GetGatewayIdentifiersForEUIRequest, opts ...grpc.CallOption) (*GatewayIdentifiers, error)
	// List gateways where the given user or organization is a direct collaborator.
	// If no user or organization is given, this returns the gateways the caller
	// has access to.
	// Similar to Get, this selects the fields given by the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	List(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*Gateways, error)
	// Update the gateway, changing the fields specified by the field mask to the provided values.
	Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// Delete the gateway. This may not release the gateway ID for reuse, but it does release the EUI.
	Delete(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	// Restore a recently deleted gateway. This does not restore the EUI,
	// as that was released when deleting the gateway.
	//
	// Deployment configuration may specify if, and for how long after deletion,
	// entities can be restored.
	Restore(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	// Purge the gateway. This will release both gateway ID and EUI for reuse.
	// The gateway owner is responsible for clearing data from any (external) integrations
	// that may store and expose data by gateway ID.
	Purge(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type gatewayRegistryClient struct {
	cc *grpc.ClientConn
}

func NewGatewayRegistryClient(cc *grpc.ClientConn) GatewayRegistryClient {
	return &gatewayRegistryClient{cc}
}

func (c *gatewayRegistryClient) Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) GetIdentifiersForEUI(ctx context.Context, in *GetGatewayIdentifiersForEUIRequest, opts ...grpc.CallOption) (*GatewayIdentifiers, error) {
	out := new(GatewayIdentifiers)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/GetIdentifiersForEUI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) List(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*Gateways, error) {
	out := new(Gateways)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) Delete(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) Restore(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) Purge(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayRegistryServer is the server API for GatewayRegistry service.
type GatewayRegistryServer interface {
	// Create a new gateway. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(context.Context, *CreateGatewayRequest) (*Gateway, error)
	// Get the gateway with the given identifiers, selecting the fields specified
	// in the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	Get(context.Context, *GetGatewayRequest) (*Gateway, error)
	// Get the identifiers of the gateway that has the given EUI registered.
	GetIdentifiersForEUI(context.Context, *GetGatewayIdentifiersForEUIRequest) (*GatewayIdentifiers, error)
	// List gateways where the given user or organization is a direct collaborator.
	// If no user or organization is given, this returns the gateways the caller
	// has access to.
	// Similar to Get, this selects the fields given by the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	List(context.Context, *ListGatewaysRequest) (*Gateways, error)
	// Update the gateway, changing the fields specified by the field mask to the provided values.
	Update(context.Context, *UpdateGatewayRequest) (*Gateway, error)
	// Delete the gateway. This may not release the gateway ID for reuse, but it does release the EUI.
	Delete(context.Context, *GatewayIdentifiers) (*types.Empty, error)
	// Restore a recently deleted gateway. This does not restore the EUI,
	// as that was released when deleting the gateway.
	//
	// Deployment configuration may specify if, and for how long after deletion,
	// entities can be restored.
	Restore(context.Context, *GatewayIdentifiers) (*types.Empty, error)
	// Purge the gateway. This will release both gateway ID and EUI for reuse.
	// The gateway owner is responsible for clearing data from any (external) integrations
	// that may store and expose data by gateway ID.
	Purge(context.Context, *GatewayIdentifiers) (*types.Empty, error)
}

// UnimplementedGatewayRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayRegistryServer struct {
}

func (*UnimplementedGatewayRegistryServer) Create(ctx context.Context, req *CreateGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGatewayRegistryServer) Get(ctx context.Context, req *GetGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGatewayRegistryServer) GetIdentifiersForEUI(ctx context.Context, req *GetGatewayIdentifiersForEUIRequest) (*GatewayIdentifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentifiersForEUI not implemented")
}
func (*UnimplementedGatewayRegistryServer) List(ctx context.Context, req *ListGatewaysRequest) (*Gateways, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedGatewayRegistryServer) Update(ctx context.Context, req *UpdateGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGatewayRegistryServer) Delete(ctx context.Context, req *GatewayIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGatewayRegistryServer) Restore(ctx context.Context, req *GatewayIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedGatewayRegistryServer) Purge(ctx context.Context, req *GatewayIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}

func RegisterGatewayRegistryServer(s *grpc.Server, srv GatewayRegistryServer) {
	s.RegisterService(&_GatewayRegistry_serviceDesc, srv)
}

func _GatewayRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Create(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Get(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_GetIdentifiersForEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayIdentifiersForEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).GetIdentifiersForEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/GetIdentifiersForEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).GetIdentifiersForEUI(ctx, req.(*GetGatewayIdentifiersForEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).List(ctx, req.(*ListGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Update(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Delete(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Restore(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Purge(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayRegistry",
	HandlerType: (*GatewayRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GatewayRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GatewayRegistry_Get_Handler,
		},
		{
			MethodName: "GetIdentifiersForEUI",
			Handler:    _GatewayRegistry_GetIdentifiersForEUI_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GatewayRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GatewayRegistry_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GatewayRegistry_Delete_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _GatewayRegistry_Restore_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _GatewayRegistry_Purge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/gateway_services.proto",
}

// GatewayAccessClient is the client API for GatewayAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayAccessClient interface {
	// List the rights the caller has on this gateway.
	ListRights(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	// Create an API key scoped to this gateway.
	CreateAPIKey(ctx context.Context, in *CreateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// List the API keys for this gateway.
	ListAPIKeys(ctx context.Context, in *ListGatewayAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error)
	// Get a single API key of this gateway.
	GetAPIKey(ctx context.Context, in *GetGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Update the rights of an API key of the gateway.
	// This method can also be used to delete the API key, by giving it no rights.
	// The caller is required to have all assigned or/and removed rights.
	UpdateAPIKey(ctx context.Context, in *UpdateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Get the rights of a collaborator (member) of the gateway.
	// Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
	GetCollaborator(ctx context.Context, in *GetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*GetCollaboratorResponse, error)
	// Set the rights of a collaborator (member) on the gateway.
	// This method can also be used to delete the collaborator, by giving them no rights.
	// The caller is required to have all assigned or/and removed rights.
	SetCollaborator(ctx context.Context, in *SetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// List the collaborators on this gateway.
	ListCollaborators(ctx context.Context, in *ListGatewayCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error)
}

type gatewayAccessClient struct {
	cc *grpc.ClientConn
}

func NewGatewayAccessClient(cc *grpc.ClientConn) GatewayAccessClient {
	return &gatewayAccessClient{cc}
}

func (c *gatewayAccessClient) ListRights(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/ListRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) CreateAPIKey(ctx context.Context, in *CreateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) ListAPIKeys(ctx context.Context, in *ListGatewayAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) GetAPIKey(ctx context.Context, in *GetGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/GetAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) UpdateAPIKey(ctx context.Context, in *UpdateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/UpdateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) GetCollaborator(ctx context.Context, in *GetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*GetCollaboratorResponse, error) {
	out := new(GetCollaboratorResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/GetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) SetCollaborator(ctx context.Context, in *SetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/SetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) ListCollaborators(ctx context.Context, in *ListGatewayCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error) {
	out := new(Collaborators)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/ListCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayAccessServer is the server API for GatewayAccess service.
type GatewayAccessServer interface {
	// List the rights the caller has on this gateway.
	ListRights(context.Context, *GatewayIdentifiers) (*Rights, error)
	// Create an API key scoped to this gateway.
	CreateAPIKey(context.Context, *CreateGatewayAPIKeyRequest) (*APIKey, error)
	// List the API keys for this gateway.
	ListAPIKeys(context.Context, *ListGatewayAPIKeysRequest) (*APIKeys, error)
	// Get a single API key of this gateway.
	GetAPIKey(context.Context, *GetGatewayAPIKeyRequest) (*APIKey, error)
	// Update the rights of an API key of the gateway.
	// This method can also be used to delete the API key, by giving it no rights.
	// The caller is required to have all assigned or/and removed rights.
	UpdateAPIKey(context.Context, *UpdateGatewayAPIKeyRequest) (*APIKey, error)
	// Get the rights of a collaborator (member) of the gateway.
	// Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
	GetCollaborator(context.Context, *GetGatewayCollaboratorRequest) (*GetCollaboratorResponse, error)
	// Set the rights of a collaborator (member) on the gateway.
	// This method can also be used to delete the collaborator, by giving them no rights.
	// The caller is required to have all assigned or/and removed rights.
	SetCollaborator(context.Context, *SetGatewayCollaboratorRequest) (*types.Empty, error)
	// List the collaborators on this gateway.
	ListCollaborators(context.Context, *ListGatewayCollaboratorsRequest) (*Collaborators, error)
}

// UnimplementedGatewayAccessServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayAccessServer struct {
}

func (*UnimplementedGatewayAccessServer) ListRights(ctx context.Context, req *GatewayIdentifiers) (*Rights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRights not implemented")
}
func (*UnimplementedGatewayAccessServer) CreateAPIKey(ctx context.Context, req *CreateGatewayAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (*UnimplementedGatewayAccessServer) ListAPIKeys(ctx context.Context, req *ListGatewayAPIKeysRequest) (*APIKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (*UnimplementedGatewayAccessServer) GetAPIKey(ctx context.Context, req *GetGatewayAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (*UnimplementedGatewayAccessServer) UpdateAPIKey(ctx context.Context, req *UpdateGatewayAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKey not implemented")
}
func (*UnimplementedGatewayAccessServer) GetCollaborator(ctx context.Context, req *GetGatewayCollaboratorRequest) (*GetCollaboratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborator not implemented")
}
func (*UnimplementedGatewayAccessServer) SetCollaborator(ctx context.Context, req *SetGatewayCollaboratorRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCollaborator not implemented")
}
func (*UnimplementedGatewayAccessServer) ListCollaborators(ctx context.Context, req *ListGatewayCollaboratorsRequest) (*Collaborators, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollaborators not implemented")
}

func RegisterGatewayAccessServer(s *grpc.Server, srv GatewayAccessServer) {
	s.RegisterService(&_GatewayAccess_serviceDesc, srv)
}

func _GatewayAccess_ListRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).ListRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/ListRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).ListRights(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).CreateAPIKey(ctx, req.(*CreateGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).ListAPIKeys(ctx, req.(*ListGatewayAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/GetAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).GetAPIKey(ctx, req.(*GetGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/UpdateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).UpdateAPIKey(ctx, req.(*UpdateGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_GetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).GetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/GetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).GetCollaborator(ctx, req.(*GetGatewayCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_SetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).SetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/SetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).SetCollaborator(ctx, req.(*SetGatewayCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/ListCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).ListCollaborators(ctx, req.(*ListGatewayCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayAccess",
	HandlerType: (*GatewayAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRights",
			Handler:    _GatewayAccess_ListRights_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _GatewayAccess_CreateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _GatewayAccess_ListAPIKeys_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _GatewayAccess_GetAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _GatewayAccess_UpdateAPIKey_Handler,
		},
		{
			MethodName: "GetCollaborator",
			Handler:    _GatewayAccess_GetCollaborator_Handler,
		},
		{
			MethodName: "SetCollaborator",
			Handler:    _GatewayAccess_SetCollaborator_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _GatewayAccess_ListCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/gateway_services.proto",
}

// GatewayConfiguratorClient is the client API for GatewayConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayConfiguratorClient interface {
	PullConfiguration(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (GatewayConfigurator_PullConfigurationClient, error)
}

type gatewayConfiguratorClient struct {
	cc *grpc.ClientConn
}

func NewGatewayConfiguratorClient(cc *grpc.ClientConn) GatewayConfiguratorClient {
	return &gatewayConfiguratorClient{cc}
}

func (c *gatewayConfiguratorClient) PullConfiguration(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (GatewayConfigurator_PullConfigurationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GatewayConfigurator_serviceDesc.Streams[0], "/ttn.lorawan.v3.GatewayConfigurator/PullConfiguration", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayConfiguratorPullConfigurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayConfigurator_PullConfigurationClient interface {
	Recv() (*Gateway, error)
	grpc.ClientStream
}

type gatewayConfiguratorPullConfigurationClient struct {
	grpc.ClientStream
}

func (x *gatewayConfiguratorPullConfigurationClient) Recv() (*Gateway, error) {
	m := new(Gateway)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayConfiguratorServer is the server API for GatewayConfigurator service.
type GatewayConfiguratorServer interface {
	PullConfiguration(*PullGatewayConfigurationRequest, GatewayConfigurator_PullConfigurationServer) error
}

// UnimplementedGatewayConfiguratorServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayConfiguratorServer struct {
}

func (*UnimplementedGatewayConfiguratorServer) PullConfiguration(req *PullGatewayConfigurationRequest, srv GatewayConfigurator_PullConfigurationServer) error {
	return status.Errorf(codes.Unimplemented, "method PullConfiguration not implemented")
}

func RegisterGatewayConfiguratorServer(s *grpc.Server, srv GatewayConfiguratorServer) {
	s.RegisterService(&_GatewayConfigurator_serviceDesc, srv)
}

func _GatewayConfigurator_PullConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullGatewayConfigurationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayConfiguratorServer).PullConfiguration(m, &gatewayConfiguratorPullConfigurationServer{stream})
}

type GatewayConfigurator_PullConfigurationServer interface {
	Send(*Gateway) error
	grpc.ServerStream
}

type gatewayConfiguratorPullConfigurationServer struct {
	grpc.ServerStream
}

func (x *gatewayConfiguratorPullConfigurationServer) Send(m *Gateway) error {
	return x.ServerStream.SendMsg(m)
}

var _GatewayConfigurator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayConfigurator",
	HandlerType: (*GatewayConfiguratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullConfiguration",
			Handler:       _GatewayConfigurator_PullConfiguration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lorawan-stack/api/gateway_services.proto",
}

func (this *PullGatewayConfigurationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PullGatewayConfigurationRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGatewayServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
