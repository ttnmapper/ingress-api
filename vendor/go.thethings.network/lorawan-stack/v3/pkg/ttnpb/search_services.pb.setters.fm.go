// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *SearchApplicationsRequest) SetFields(src *SearchApplicationsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "query":
			if len(subs) > 0 {
				return fmt.Errorf("'query' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Query = src.Query
			} else {
				var zero string
				dst.Query = zero
			}
		case "id_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'id_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.IdContains = src.IdContains
			} else {
				var zero string
				dst.IdContains = zero
			}
		case "name_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'name_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NameContains = src.NameContains
			} else {
				var zero string
				dst.NameContains = zero
			}
		case "description_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'description_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DescriptionContains = src.DescriptionContains
			} else {
				var zero string
				dst.DescriptionContains = zero
			}
		case "attributes_contain":
			if len(subs) > 0 {
				return fmt.Errorf("'attributes_contain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AttributesContain = src.AttributesContain
			} else {
				dst.AttributesContain = nil
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}
		case "deleted":
			if len(subs) > 0 {
				return fmt.Errorf("'deleted' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Deleted = src.Deleted
			} else {
				var zero bool
				dst.Deleted = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SearchClientsRequest) SetFields(src *SearchClientsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "query":
			if len(subs) > 0 {
				return fmt.Errorf("'query' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Query = src.Query
			} else {
				var zero string
				dst.Query = zero
			}
		case "id_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'id_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.IdContains = src.IdContains
			} else {
				var zero string
				dst.IdContains = zero
			}
		case "name_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'name_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NameContains = src.NameContains
			} else {
				var zero string
				dst.NameContains = zero
			}
		case "description_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'description_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DescriptionContains = src.DescriptionContains
			} else {
				var zero string
				dst.DescriptionContains = zero
			}
		case "attributes_contain":
			if len(subs) > 0 {
				return fmt.Errorf("'attributes_contain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AttributesContain = src.AttributesContain
			} else {
				dst.AttributesContain = nil
			}
		case "state":
			if len(subs) > 0 {
				return fmt.Errorf("'state' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.State = src.State
			} else {
				dst.State = nil
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}
		case "deleted":
			if len(subs) > 0 {
				return fmt.Errorf("'deleted' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Deleted = src.Deleted
			} else {
				var zero bool
				dst.Deleted = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SearchGatewaysRequest) SetFields(src *SearchGatewaysRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "query":
			if len(subs) > 0 {
				return fmt.Errorf("'query' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Query = src.Query
			} else {
				var zero string
				dst.Query = zero
			}
		case "id_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'id_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.IdContains = src.IdContains
			} else {
				var zero string
				dst.IdContains = zero
			}
		case "name_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'name_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NameContains = src.NameContains
			} else {
				var zero string
				dst.NameContains = zero
			}
		case "description_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'description_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DescriptionContains = src.DescriptionContains
			} else {
				var zero string
				dst.DescriptionContains = zero
			}
		case "attributes_contain":
			if len(subs) > 0 {
				return fmt.Errorf("'attributes_contain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AttributesContain = src.AttributesContain
			} else {
				dst.AttributesContain = nil
			}
		case "eui_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'eui_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EuiContains = src.EuiContains
			} else {
				var zero string
				dst.EuiContains = zero
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}
		case "deleted":
			if len(subs) > 0 {
				return fmt.Errorf("'deleted' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Deleted = src.Deleted
			} else {
				var zero bool
				dst.Deleted = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SearchOrganizationsRequest) SetFields(src *SearchOrganizationsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "query":
			if len(subs) > 0 {
				return fmt.Errorf("'query' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Query = src.Query
			} else {
				var zero string
				dst.Query = zero
			}
		case "id_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'id_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.IdContains = src.IdContains
			} else {
				var zero string
				dst.IdContains = zero
			}
		case "name_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'name_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NameContains = src.NameContains
			} else {
				var zero string
				dst.NameContains = zero
			}
		case "description_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'description_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DescriptionContains = src.DescriptionContains
			} else {
				var zero string
				dst.DescriptionContains = zero
			}
		case "attributes_contain":
			if len(subs) > 0 {
				return fmt.Errorf("'attributes_contain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AttributesContain = src.AttributesContain
			} else {
				dst.AttributesContain = nil
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}
		case "deleted":
			if len(subs) > 0 {
				return fmt.Errorf("'deleted' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Deleted = src.Deleted
			} else {
				var zero bool
				dst.Deleted = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SearchUsersRequest) SetFields(src *SearchUsersRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "query":
			if len(subs) > 0 {
				return fmt.Errorf("'query' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Query = src.Query
			} else {
				var zero string
				dst.Query = zero
			}
		case "id_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'id_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.IdContains = src.IdContains
			} else {
				var zero string
				dst.IdContains = zero
			}
		case "name_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'name_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NameContains = src.NameContains
			} else {
				var zero string
				dst.NameContains = zero
			}
		case "description_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'description_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DescriptionContains = src.DescriptionContains
			} else {
				var zero string
				dst.DescriptionContains = zero
			}
		case "attributes_contain":
			if len(subs) > 0 {
				return fmt.Errorf("'attributes_contain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AttributesContain = src.AttributesContain
			} else {
				dst.AttributesContain = nil
			}
		case "state":
			if len(subs) > 0 {
				return fmt.Errorf("'state' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.State = src.State
			} else {
				dst.State = nil
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}
		case "deleted":
			if len(subs) > 0 {
				return fmt.Errorf("'deleted' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Deleted = src.Deleted
			} else {
				var zero bool
				dst.Deleted = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SearchAccountsRequest) SetFields(src *SearchAccountsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "query":
			if len(subs) > 0 {
				return fmt.Errorf("'query' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Query = src.Query
			} else {
				var zero string
				dst.Query = zero
			}
		case "only_users":
			if len(subs) > 0 {
				return fmt.Errorf("'only_users' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.OnlyUsers = src.OnlyUsers
			} else {
				var zero bool
				dst.OnlyUsers = zero
			}

		case "collaborator_of":
			if len(subs) == 0 && src == nil {
				dst.CollaboratorOf = nil
				continue
			} else if len(subs) == 0 {
				dst.CollaboratorOf = src.CollaboratorOf
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "application_ids":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.CollaboratorOf.(*SearchAccountsRequest_ApplicationIds)
					}
					if srcValid := srcTypeOk || src == nil || src.CollaboratorOf == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'application_ids', while different oneof is set in source")
					}
					_, dstTypeOk := dst.CollaboratorOf.(*SearchAccountsRequest_ApplicationIds)
					if dstValid := dstTypeOk || dst.CollaboratorOf == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'application_ids', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationIdentifiers
						if srcTypeOk {
							newSrc = src.CollaboratorOf.(*SearchAccountsRequest_ApplicationIds).ApplicationIds
						}
						if dstTypeOk {
							newDst = dst.CollaboratorOf.(*SearchAccountsRequest_ApplicationIds).ApplicationIds
						} else if srcTypeOk {
							newDst = &ApplicationIdentifiers{}
							dst.CollaboratorOf = &SearchAccountsRequest_ApplicationIds{ApplicationIds: newDst}
						} else {
							dst.CollaboratorOf = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.CollaboratorOf = src.CollaboratorOf
						} else {
							dst.CollaboratorOf = nil
						}
					}
				case "client_ids":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.CollaboratorOf.(*SearchAccountsRequest_ClientIds)
					}
					if srcValid := srcTypeOk || src == nil || src.CollaboratorOf == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'client_ids', while different oneof is set in source")
					}
					_, dstTypeOk := dst.CollaboratorOf.(*SearchAccountsRequest_ClientIds)
					if dstValid := dstTypeOk || dst.CollaboratorOf == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'client_ids', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ClientIdentifiers
						if srcTypeOk {
							newSrc = src.CollaboratorOf.(*SearchAccountsRequest_ClientIds).ClientIds
						}
						if dstTypeOk {
							newDst = dst.CollaboratorOf.(*SearchAccountsRequest_ClientIds).ClientIds
						} else if srcTypeOk {
							newDst = &ClientIdentifiers{}
							dst.CollaboratorOf = &SearchAccountsRequest_ClientIds{ClientIds: newDst}
						} else {
							dst.CollaboratorOf = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.CollaboratorOf = src.CollaboratorOf
						} else {
							dst.CollaboratorOf = nil
						}
					}
				case "gateway_ids":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.CollaboratorOf.(*SearchAccountsRequest_GatewayIds)
					}
					if srcValid := srcTypeOk || src == nil || src.CollaboratorOf == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'gateway_ids', while different oneof is set in source")
					}
					_, dstTypeOk := dst.CollaboratorOf.(*SearchAccountsRequest_GatewayIds)
					if dstValid := dstTypeOk || dst.CollaboratorOf == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'gateway_ids', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *GatewayIdentifiers
						if srcTypeOk {
							newSrc = src.CollaboratorOf.(*SearchAccountsRequest_GatewayIds).GatewayIds
						}
						if dstTypeOk {
							newDst = dst.CollaboratorOf.(*SearchAccountsRequest_GatewayIds).GatewayIds
						} else if srcTypeOk {
							newDst = &GatewayIdentifiers{}
							dst.CollaboratorOf = &SearchAccountsRequest_GatewayIds{GatewayIds: newDst}
						} else {
							dst.CollaboratorOf = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.CollaboratorOf = src.CollaboratorOf
						} else {
							dst.CollaboratorOf = nil
						}
					}
				case "organization_ids":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.CollaboratorOf.(*SearchAccountsRequest_OrganizationIds)
					}
					if srcValid := srcTypeOk || src == nil || src.CollaboratorOf == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'organization_ids', while different oneof is set in source")
					}
					_, dstTypeOk := dst.CollaboratorOf.(*SearchAccountsRequest_OrganizationIds)
					if dstValid := dstTypeOk || dst.CollaboratorOf == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'organization_ids', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *OrganizationIdentifiers
						if srcTypeOk {
							newSrc = src.CollaboratorOf.(*SearchAccountsRequest_OrganizationIds).OrganizationIds
						}
						if dstTypeOk {
							newDst = dst.CollaboratorOf.(*SearchAccountsRequest_OrganizationIds).OrganizationIds
						} else if srcTypeOk {
							newDst = &OrganizationIdentifiers{}
							dst.CollaboratorOf = &SearchAccountsRequest_OrganizationIds{OrganizationIds: newDst}
						} else {
							dst.CollaboratorOf = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.CollaboratorOf = src.CollaboratorOf
						} else {
							dst.CollaboratorOf = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SearchAccountsResponse) SetFields(src *SearchAccountsResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "account_ids":
			if len(subs) > 0 {
				return fmt.Errorf("'account_ids' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AccountIds = src.AccountIds
			} else {
				dst.AccountIds = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SearchEndDevicesRequest) SetFields(src *SearchEndDevicesRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "application_ids":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationIdentifiers
				if (src == nil || src.ApplicationIds == nil) && dst.ApplicationIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.ApplicationIds
				}
				if dst.ApplicationIds != nil {
					newDst = dst.ApplicationIds
				} else {
					newDst = &ApplicationIdentifiers{}
					dst.ApplicationIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationIds = src.ApplicationIds
				} else {
					dst.ApplicationIds = nil
				}
			}
		case "query":
			if len(subs) > 0 {
				return fmt.Errorf("'query' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Query = src.Query
			} else {
				var zero string
				dst.Query = zero
			}
		case "id_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'id_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.IdContains = src.IdContains
			} else {
				var zero string
				dst.IdContains = zero
			}
		case "name_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'name_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NameContains = src.NameContains
			} else {
				var zero string
				dst.NameContains = zero
			}
		case "description_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'description_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DescriptionContains = src.DescriptionContains
			} else {
				var zero string
				dst.DescriptionContains = zero
			}
		case "attributes_contain":
			if len(subs) > 0 {
				return fmt.Errorf("'attributes_contain' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AttributesContain = src.AttributesContain
			} else {
				dst.AttributesContain = nil
			}
		case "dev_eui_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_eui_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevEuiContains = src.DevEuiContains
			} else {
				var zero string
				dst.DevEuiContains = zero
			}
		case "join_eui_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'join_eui_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.JoinEuiContains = src.JoinEuiContains
			} else {
				var zero string
				dst.JoinEuiContains = zero
			}
		case "dev_addr_contains":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_addr_contains' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevAddrContains = src.DevAddrContains
			} else {
				var zero string
				dst.DevAddrContains = zero
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
