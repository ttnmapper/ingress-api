// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/deviceclaimingserver.proto

package ttnpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimEndDeviceRequest struct {
	// Types that are valid to be assigned to SourceDevice:
	//	*ClaimEndDeviceRequest_AuthenticatedIdentifiers_
	//	*ClaimEndDeviceRequest_QRCode
	SourceDevice isClaimEndDeviceRequest_SourceDevice `protobuf_oneof:"source_device"`
	// Application identifiers of the target end device.
	TargetApplicationIDs ApplicationIdentifiers `protobuf:"bytes,3,opt,name=target_application_ids,json=targetApplicationIds,proto3" json:"target_application_ids"`
	// End device ID of the target end device. If empty, use the source device ID.
	TargetDeviceID string `protobuf:"bytes,4,opt,name=target_device_id,json=targetDeviceId,proto3" json:"target_device_id,omitempty"`
	// The address of the Network Server where the device will be registered.
	// If set and if the source device is currently registered on a Network Server, settings will be transferred.
	// If not set, the device shall not be registered on a Network Server.
	TargetNetworkServerAddress string `protobuf:"bytes,7,opt,name=target_network_server_address,json=targetNetworkServerAddress,proto3" json:"target_network_server_address,omitempty"`
	// The KEK label of the Network Server to use for wrapping network session keys.
	TargetNetworkServerKEKLabel string `protobuf:"bytes,8,opt,name=target_network_server_kek_label,json=targetNetworkServerKekLabel,proto3" json:"target_network_server_kek_label,omitempty"`
	// The address of the Application Server where the device will be registered.
	// If set and if the source device is currently registered on an Application Server, settings will be transferred.
	// If not set, the device shall not be registered on an Application Server.
	TargetApplicationServerAddress string `protobuf:"bytes,9,opt,name=target_application_server_address,json=targetApplicationServerAddress,proto3" json:"target_application_server_address,omitempty"`
	// The KEK label of the Application Server to use for wrapping the application session key.
	TargetApplicationServerKEKLabel string `protobuf:"bytes,10,opt,name=target_application_server_kek_label,json=targetApplicationServerKekLabel,proto3" json:"target_application_server_kek_label,omitempty"`
	// The AS-ID of the Application Server to use.
	TargetApplicationServerID string `protobuf:"bytes,11,opt,name=target_application_server_id,json=targetApplicationServerId,proto3" json:"target_application_server_id,omitempty"`
	// Home NetID.
	TargetNetID *go_thethings_network_lorawan_stack_v3_pkg_types.NetID `protobuf:"bytes,13,opt,name=target_net_id,json=targetNetId,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.NetID" json:"target_net_id,omitempty"`
	// If set, invalidate the authentication code with which the device gets claimed. This prohibits subsequent claiming requests.
	InvalidateAuthenticationCode bool     `protobuf:"varint,5,opt,name=invalidate_authentication_code,json=invalidateAuthenticationCode,proto3" json:"invalidate_authentication_code,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *ClaimEndDeviceRequest) Reset()      { *m = ClaimEndDeviceRequest{} }
func (*ClaimEndDeviceRequest) ProtoMessage() {}
func (*ClaimEndDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{0}
}
func (m *ClaimEndDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimEndDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimEndDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimEndDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimEndDeviceRequest.Merge(m, src)
}
func (m *ClaimEndDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimEndDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimEndDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimEndDeviceRequest proto.InternalMessageInfo

type isClaimEndDeviceRequest_SourceDevice interface {
	isClaimEndDeviceRequest_SourceDevice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClaimEndDeviceRequest_AuthenticatedIdentifiers_ struct {
	AuthenticatedIdentifiers *ClaimEndDeviceRequest_AuthenticatedIdentifiers `protobuf:"bytes,1,opt,name=authenticated_identifiers,json=authenticatedIdentifiers,proto3,oneof" json:"authenticated_identifiers,omitempty"`
}
type ClaimEndDeviceRequest_QRCode struct {
	QRCode []byte `protobuf:"bytes,2,opt,name=qr_code,json=qrCode,proto3,oneof" json:"qr_code,omitempty"`
}

func (*ClaimEndDeviceRequest_AuthenticatedIdentifiers_) isClaimEndDeviceRequest_SourceDevice() {}
func (*ClaimEndDeviceRequest_QRCode) isClaimEndDeviceRequest_SourceDevice()                    {}

func (m *ClaimEndDeviceRequest) GetSourceDevice() isClaimEndDeviceRequest_SourceDevice {
	if m != nil {
		return m.SourceDevice
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetAuthenticatedIdentifiers() *ClaimEndDeviceRequest_AuthenticatedIdentifiers {
	if x, ok := m.GetSourceDevice().(*ClaimEndDeviceRequest_AuthenticatedIdentifiers_); ok {
		return x.AuthenticatedIdentifiers
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetQRCode() []byte {
	if x, ok := m.GetSourceDevice().(*ClaimEndDeviceRequest_QRCode); ok {
		return x.QRCode
	}
	return nil
}

func (m *ClaimEndDeviceRequest) GetTargetApplicationIDs() ApplicationIdentifiers {
	if m != nil {
		return m.TargetApplicationIDs
	}
	return ApplicationIdentifiers{}
}

func (m *ClaimEndDeviceRequest) GetTargetDeviceID() string {
	if m != nil {
		return m.TargetDeviceID
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetNetworkServerAddress() string {
	if m != nil {
		return m.TargetNetworkServerAddress
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetNetworkServerKEKLabel() string {
	if m != nil {
		return m.TargetNetworkServerKEKLabel
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetApplicationServerAddress() string {
	if m != nil {
		return m.TargetApplicationServerAddress
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetApplicationServerKEKLabel() string {
	if m != nil {
		return m.TargetApplicationServerKEKLabel
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetTargetApplicationServerID() string {
	if m != nil {
		return m.TargetApplicationServerID
	}
	return ""
}

func (m *ClaimEndDeviceRequest) GetInvalidateAuthenticationCode() bool {
	if m != nil {
		return m.InvalidateAuthenticationCode
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClaimEndDeviceRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClaimEndDeviceRequest_AuthenticatedIdentifiers_)(nil),
		(*ClaimEndDeviceRequest_QRCode)(nil),
	}
}

type ClaimEndDeviceRequest_AuthenticatedIdentifiers struct {
	// JoinEUI (or AppEUI) of the device to claim.
	JoinEUI go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"join_eui"`
	// DevEUI of the device to claim.
	DevEUI go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"dev_eui"`
	// Authentication code to prove ownership.
	// In the LoRa Alliance TR005 specification, this equals the OwnerToken.
	AuthenticationCode   string   `protobuf:"bytes,3,opt,name=authentication_code,json=authenticationCode,proto3" json:"authentication_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Reset() {
	*m = ClaimEndDeviceRequest_AuthenticatedIdentifiers{}
}
func (*ClaimEndDeviceRequest_AuthenticatedIdentifiers) ProtoMessage() {}
func (*ClaimEndDeviceRequest_AuthenticatedIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{0, 0}
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.Merge(m, src)
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimEndDeviceRequest_AuthenticatedIdentifiers proto.InternalMessageInfo

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) GetAuthenticationCode() string {
	if m != nil {
		return m.AuthenticationCode
	}
	return ""
}

type AuthorizeApplicationRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	APIKey                 string   `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *AuthorizeApplicationRequest) Reset()      { *m = AuthorizeApplicationRequest{} }
func (*AuthorizeApplicationRequest) ProtoMessage() {}
func (*AuthorizeApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{1}
}
func (m *AuthorizeApplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeApplicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeApplicationRequest.Merge(m, src)
}
func (m *AuthorizeApplicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeApplicationRequest proto.InternalMessageInfo

func (m *AuthorizeApplicationRequest) GetAPIKey() string {
	if m != nil {
		return m.APIKey
	}
	return ""
}

type CUPSRedirection struct {
	// CUPS URI for LoRa Basics Station CUPS redirection.
	TargetCUPSURI string `protobuf:"bytes,1,opt,name=target_cups_uri,json=targetCupsUri,proto3" json:"target_cups_uri,omitempty"`
	// The key set in the gateway to authenticate itself.
	CurrentGatewayKey    string   `protobuf:"bytes,2,opt,name=current_gateway_key,json=currentGatewayKey,proto3" json:"current_gateway_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CUPSRedirection) Reset()      { *m = CUPSRedirection{} }
func (*CUPSRedirection) ProtoMessage() {}
func (*CUPSRedirection) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{2}
}
func (m *CUPSRedirection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CUPSRedirection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CUPSRedirection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CUPSRedirection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CUPSRedirection.Merge(m, src)
}
func (m *CUPSRedirection) XXX_Size() int {
	return m.Size()
}
func (m *CUPSRedirection) XXX_DiscardUnknown() {
	xxx_messageInfo_CUPSRedirection.DiscardUnknown(m)
}

var xxx_messageInfo_CUPSRedirection proto.InternalMessageInfo

func (m *CUPSRedirection) GetTargetCUPSURI() string {
	if m != nil {
		return m.TargetCUPSURI
	}
	return ""
}

func (m *CUPSRedirection) GetCurrentGatewayKey() string {
	if m != nil {
		return m.CurrentGatewayKey
	}
	return ""
}

type ClaimGatewayRequest struct {
	// Types that are valid to be assigned to SourceGateway:
	//	*ClaimGatewayRequest_AuthenticatedIdentifiers_
	//	*ClaimGatewayRequest_QRCode
	SourceGateway isClaimGatewayRequest_SourceGateway `protobuf_oneof:"source_gateway"`
	// Collaborator to grant all rights on the target gateway.
	Collaborator OrganizationOrUserIdentifiers `protobuf:"bytes,3,opt,name=collaborator,proto3" json:"collaborator"`
	// Gateway ID for the target gateway. This must be a unique value.
	// If this is not set, the target ID for the target gateway will be set to `eui-<gateway-eui>`
	TargetGatewayID string `protobuf:"bytes,4,opt,name=target_gateway_id,json=targetGatewayId,proto3" json:"target_gateway_id,omitempty"`
	// Target Gateway Server Address for the target gateway.
	TargetGatewayServerAddress string `protobuf:"bytes,5,opt,name=target_gateway_server_address,json=targetGatewayServerAddress,proto3" json:"target_gateway_server_address,omitempty"`
	// Parameters to set CUPS redirection for the gateway.
	CUPSRedirection      *CUPSRedirection `protobuf:"bytes,6,opt,name=cups_redirection,json=cupsRedirection,proto3" json:"cups_redirection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ClaimGatewayRequest) Reset()      { *m = ClaimGatewayRequest{} }
func (*ClaimGatewayRequest) ProtoMessage() {}
func (*ClaimGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{3}
}
func (m *ClaimGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimGatewayRequest.Merge(m, src)
}
func (m *ClaimGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimGatewayRequest proto.InternalMessageInfo

type isClaimGatewayRequest_SourceGateway interface {
	isClaimGatewayRequest_SourceGateway()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClaimGatewayRequest_AuthenticatedIdentifiers_ struct {
	AuthenticatedIdentifiers *ClaimGatewayRequest_AuthenticatedIdentifiers `protobuf:"bytes,1,opt,name=authenticated_identifiers,json=authenticatedIdentifiers,proto3,oneof" json:"authenticated_identifiers,omitempty"`
}
type ClaimGatewayRequest_QRCode struct {
	QRCode []byte `protobuf:"bytes,2,opt,name=qr_code,json=qrCode,proto3,oneof" json:"qr_code,omitempty"`
}

func (*ClaimGatewayRequest_AuthenticatedIdentifiers_) isClaimGatewayRequest_SourceGateway() {}
func (*ClaimGatewayRequest_QRCode) isClaimGatewayRequest_SourceGateway()                    {}

func (m *ClaimGatewayRequest) GetSourceGateway() isClaimGatewayRequest_SourceGateway {
	if m != nil {
		return m.SourceGateway
	}
	return nil
}

func (m *ClaimGatewayRequest) GetAuthenticatedIdentifiers() *ClaimGatewayRequest_AuthenticatedIdentifiers {
	if x, ok := m.GetSourceGateway().(*ClaimGatewayRequest_AuthenticatedIdentifiers_); ok {
		return x.AuthenticatedIdentifiers
	}
	return nil
}

func (m *ClaimGatewayRequest) GetQRCode() []byte {
	if x, ok := m.GetSourceGateway().(*ClaimGatewayRequest_QRCode); ok {
		return x.QRCode
	}
	return nil
}

func (m *ClaimGatewayRequest) GetCollaborator() OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return OrganizationOrUserIdentifiers{}
}

func (m *ClaimGatewayRequest) GetTargetGatewayID() string {
	if m != nil {
		return m.TargetGatewayID
	}
	return ""
}

func (m *ClaimGatewayRequest) GetTargetGatewayServerAddress() string {
	if m != nil {
		return m.TargetGatewayServerAddress
	}
	return ""
}

func (m *ClaimGatewayRequest) GetCUPSRedirection() *CUPSRedirection {
	if m != nil {
		return m.CUPSRedirection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClaimGatewayRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClaimGatewayRequest_AuthenticatedIdentifiers_)(nil),
		(*ClaimGatewayRequest_QRCode)(nil),
	}
}

type ClaimGatewayRequest_AuthenticatedIdentifiers struct {
	GatewayEUI           go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=gateway_eui,json=gatewayEui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"gateway_eui"`
	AuthenticationCode   []byte                                                `protobuf:"bytes,2,opt,name=authentication_code,json=authenticationCode,proto3" json:"authentication_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) Reset() {
	*m = ClaimGatewayRequest_AuthenticatedIdentifiers{}
}
func (*ClaimGatewayRequest_AuthenticatedIdentifiers) ProtoMessage() {}
func (*ClaimGatewayRequest_AuthenticatedIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{3, 0}
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers.Merge(m, src)
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_Size() int {
	return m.Size()
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimGatewayRequest_AuthenticatedIdentifiers proto.InternalMessageInfo

func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) GetAuthenticationCode() []byte {
	if m != nil {
		return m.AuthenticationCode
	}
	return nil
}

type AuthorizeGatewayRequest struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	APIKey               string   `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorizeGatewayRequest) Reset()      { *m = AuthorizeGatewayRequest{} }
func (*AuthorizeGatewayRequest) ProtoMessage() {}
func (*AuthorizeGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8a7f6d184fc3dc3, []int{4}
}
func (m *AuthorizeGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeGatewayRequest.Merge(m, src)
}
func (m *AuthorizeGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeGatewayRequest proto.InternalMessageInfo

func (m *AuthorizeGatewayRequest) GetAPIKey() string {
	if m != nil {
		return m.APIKey
	}
	return ""
}

func init() {
	proto.RegisterType((*ClaimEndDeviceRequest)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest")
	golang_proto.RegisterType((*ClaimEndDeviceRequest)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest")
	proto.RegisterType((*ClaimEndDeviceRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest.AuthenticatedIdentifiers")
	golang_proto.RegisterType((*ClaimEndDeviceRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimEndDeviceRequest.AuthenticatedIdentifiers")
	proto.RegisterType((*AuthorizeApplicationRequest)(nil), "ttn.lorawan.v3.AuthorizeApplicationRequest")
	golang_proto.RegisterType((*AuthorizeApplicationRequest)(nil), "ttn.lorawan.v3.AuthorizeApplicationRequest")
	proto.RegisterType((*CUPSRedirection)(nil), "ttn.lorawan.v3.CUPSRedirection")
	golang_proto.RegisterType((*CUPSRedirection)(nil), "ttn.lorawan.v3.CUPSRedirection")
	proto.RegisterType((*ClaimGatewayRequest)(nil), "ttn.lorawan.v3.ClaimGatewayRequest")
	golang_proto.RegisterType((*ClaimGatewayRequest)(nil), "ttn.lorawan.v3.ClaimGatewayRequest")
	proto.RegisterType((*ClaimGatewayRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimGatewayRequest.AuthenticatedIdentifiers")
	golang_proto.RegisterType((*ClaimGatewayRequest_AuthenticatedIdentifiers)(nil), "ttn.lorawan.v3.ClaimGatewayRequest.AuthenticatedIdentifiers")
	proto.RegisterType((*AuthorizeGatewayRequest)(nil), "ttn.lorawan.v3.AuthorizeGatewayRequest")
	golang_proto.RegisterType((*AuthorizeGatewayRequest)(nil), "ttn.lorawan.v3.AuthorizeGatewayRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/deviceclaimingserver.proto", fileDescriptor_e8a7f6d184fc3dc3)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/deviceclaimingserver.proto", fileDescriptor_e8a7f6d184fc3dc3)
}

var fileDescriptor_e8a7f6d184fc3dc3 = []byte{
	// 1645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4b, 0x6c, 0x13, 0xd7,
	0x1a, 0x9e, 0x93, 0x87, 0x9d, 0x9c, 0xbc, 0x9c, 0x49, 0x08, 0xc6, 0xc9, 0x9d, 0x09, 0x26, 0xdc,
	0x3c, 0x88, 0x67, 0x2e, 0xce, 0x05, 0x5d, 0x22, 0xb8, 0x91, 0x27, 0x8e, 0x88, 0x49, 0x05, 0x74,
	0xc0, 0x1b, 0x02, 0x71, 0x27, 0x9e, 0x83, 0x33, 0x8d, 0x33, 0x63, 0x66, 0xc6, 0xa6, 0x4e, 0x88,
	0x1a, 0xa1, 0xaa, 0x45, 0x2c, 0xfa, 0x50, 0xa5, 0xaa, 0x55, 0xbb, 0xe8, 0x06, 0x09, 0xa9, 0x8b,
	0xb2, 0x64, 0x09, 0xea, 0x86, 0x25, 0x6a, 0x37, 0x88, 0x85, 0x45, 0xc6, 0x5d, 0xb0, 0x64, 0x89,
	0xb2, 0xaa, 0xce, 0x99, 0xb1, 0x3d, 0x7e, 0xd1, 0x50, 0x36, 0xec, 0xce, 0x9c, 0xc7, 0xff, 0x7f,
	0xff, 0xff, 0x7f, 0xe7, 0xfb, 0xe7, 0xc0, 0xe9, 0xb4, 0xa6, 0x4b, 0x37, 0x25, 0x35, 0x64, 0x98,
	0x52, 0x72, 0x9d, 0x97, 0x32, 0x0a, 0x2f, 0xa3, 0x9c, 0x92, 0x44, 0xc9, 0xb4, 0xa4, 0x6c, 0x28,
	0x6a, 0xca, 0x40, 0x7a, 0x0e, 0xe9, 0x5c, 0x46, 0xd7, 0x4c, 0x8d, 0xee, 0x35, 0x4d, 0x95, 0x73,
	0x4e, 0x70, 0xb9, 0x99, 0x40, 0x24, 0xa5, 0x98, 0x6b, 0xd9, 0x55, 0x2e, 0xa9, 0x6d, 0xf0, 0x48,
	0xcd, 0x69, 0xf9, 0x8c, 0xae, 0x7d, 0x92, 0xe7, 0xc9, 0xe6, 0x64, 0x28, 0x85, 0xd4, 0x50, 0x4e,
	0x4a, 0x2b, 0xb2, 0x64, 0x22, 0xbe, 0x6e, 0x60, 0x9b, 0x0c, 0x84, 0x5c, 0x26, 0x52, 0x5a, 0x4a,
	0xb3, 0x0f, 0xaf, 0x66, 0xaf, 0x93, 0x2f, 0xf2, 0x41, 0x46, 0xce, 0xf6, 0x91, 0x94, 0xa6, 0xa5,
	0xd2, 0x88, 0x00, 0x95, 0x54, 0x55, 0x33, 0x25, 0x53, 0xd1, 0x54, 0xc3, 0x59, 0x1d, 0x76, 0x56,
	0xcb, 0x36, 0xd0, 0x46, 0xc6, 0xcc, 0x3b, 0x8b, 0x47, 0xea, 0x43, 0x55, 0x64, 0xa4, 0x9a, 0xca,
	0x75, 0x05, 0xe9, 0x8e, 0x85, 0xe0, 0xf3, 0x1e, 0x78, 0x60, 0x1e, 0x87, 0xbe, 0xa0, 0xca, 0x51,
	0x92, 0x08, 0x11, 0xdd, 0xc8, 0x22, 0xc3, 0xa4, 0x7f, 0x04, 0xf0, 0x90, 0x94, 0x35, 0xd7, 0xf0,
	0x89, 0xa4, 0x64, 0x22, 0x39, 0xe1, 0x3a, 0xed, 0x07, 0xa3, 0x60, 0xa2, 0x2b, 0xfc, 0x7f, 0xae,
	0x3a, 0x41, 0x5c, 0x43, 0x53, 0x5c, 0xc4, 0x6d, 0x26, 0x56, 0xb1, 0x22, 0x8c, 0x58, 0x05, 0xd6,
	0xdf, 0x6c, 0x75, 0x91, 0x12, 0xfd, 0x52, 0x93, 0x35, 0x9a, 0x87, 0xde, 0x1b, 0x7a, 0x22, 0xa9,
	0xc9, 0xc8, 0xdf, 0x32, 0x0a, 0x26, 0xba, 0x85, 0xc1, 0x3d, 0xc1, 0xbb, 0xd9, 0xee, 0xa3, 0xfc,
	0x3b, 0x1d, 0x56, 0x81, 0xf5, 0x7c, 0x28, 0xce, 0x6b, 0x32, 0x5a, 0xa4, 0x44, 0xcf, 0x0d, 0x1d,
	0x8f, 0xe8, 0xdb, 0x00, 0x0e, 0x99, 0x92, 0x9e, 0x42, 0x66, 0x42, 0xca, 0x64, 0xd2, 0xd8, 0xa2,
	0xa2, 0xa9, 0x09, 0x45, 0x36, 0xfc, 0xad, 0x24, 0x96, 0x7f, 0xd7, 0xc6, 0x12, 0xa9, 0x6c, 0x73,
	0x63, 0x1e, 0xdb, 0x13, 0xda, 0xef, 0x82, 0x16, 0x1f, 0x78, 0x52, 0x60, 0x29, 0xab, 0xc0, 0x0e,
	0x5e, 0x26, 0x56, 0xdd, 0xbb, 0xa3, 0x86, 0x38, 0x68, 0xd6, 0xcd, 0xca, 0x06, 0x7d, 0x1d, 0xfa,
	0x1c, 0x0c, 0x36, 0xe9, 0x12, 0x8a, 0xec, 0x6f, 0x1b, 0x05, 0x13, 0x9d, 0xc2, 0xe9, 0x3d, 0x61,
	0x5c, 0x3f, 0xea, 0x1f, 0x0b, 0x1f, 0x5e, 0x59, 0x96, 0x42, 0x9b, 0xff, 0x09, 0x9d, 0xba, 0x36,
	0x31, 0x37, 0xbb, 0x1c, 0xba, 0x36, 0x57, 0xfa, 0x9c, 0xdc, 0x0a, 0x4f, 0x6f, 0x8f, 0xdd, 0x5a,
	0x19, 0xb3, 0x0a, 0x6c, 0xaf, 0xed, 0xd3, 0xce, 0x72, 0x2c, 0x2a, 0xf6, 0x9a, 0xee, 0x6f, 0x99,
	0xfe, 0x1d, 0xc0, 0x7f, 0x39, 0x8e, 0x54, 0x64, 0xde, 0xd4, 0xf4, 0xf5, 0x84, 0xcd, 0xeb, 0x84,
	0x24, 0xcb, 0x3a, 0x32, 0x0c, 0xbf, 0x97, 0x78, 0xfd, 0x12, 0xec, 0x09, 0x77, 0x81, 0xfe, 0x05,
	0x08, 0x7f, 0x06, 0x56, 0x26, 0xe6, 0x66, 0xb1, 0x4b, 0x29, 0xb4, 0x19, 0x09, 0x5d, 0xc1, 0x1e,
	0x6f, 0xb9, 0xc6, 0x95, 0xe1, 0xd5, 0xd0, 0xb5, 0x29, 0xd7, 0xc2, 0xe4, 0x55, 0x6e, 0x72, 0x0a,
	0x9f, 0x8b, 0x84, 0xae, 0x38, 0x48, 0x6f, 0xb9, 0xc6, 0x95, 0x21, 0x39, 0x57, 0x59, 0x98, 0x9c,
	0x98, 0x9b, 0x9d, 0x5d, 0xc6, 0xa3, 0xad, 0xe3, 0xd3, 0x27, 0xb6, 0x27, 0xe7, 0x70, 0x68, 0x62,
	0xc0, 0x46, 0x7d, 0xde, 0x06, 0x7d, 0x89, 0x60, 0x8e, 0xd8, 0x90, 0xe9, 0x0d, 0xc8, 0x36, 0x8e,
	0x69, 0x1d, 0xad, 0x27, 0xd2, 0xd2, 0x2a, 0x4a, 0xfb, 0x3b, 0x48, 0x54, 0xe3, 0x7b, 0x42, 0xbb,
	0xde, 0xea, 0xdf, 0xf1, 0x59, 0x05, 0x76, 0xf8, 0x72, 0xbd, 0xc1, 0xa5, 0x85, 0xa5, 0x0f, 0xf0,
	0x76, 0x71, 0xb8, 0x81, 0xb7, 0x25, 0xb4, 0x4e, 0x16, 0xe9, 0xe7, 0x00, 0x1e, 0x6e, 0x40, 0x98,
	0x9a, 0x3c, 0x76, 0xbe, 0x9f, 0x79, 0x64, 0xea, 0xe8, 0x57, 0x9d, 0xcb, 0x3c, 0x3c, 0xd2, 0x3c,
	0xb6, 0x4a, 0x3e, 0x21, 0x89, 0xee, 0x98, 0x2b, 0x9f, 0xec, 0xe5, 0xc6, 0x86, 0xcb, 0x39, 0x65,
	0x9b, 0x78, 0x2e, 0xe7, 0x15, 0xc1, 0x91, 0xe6, 0xae, 0x15, 0xd9, 0xdf, 0x45, 0x7c, 0x8e, 0xed,
	0x09, 0x6d, 0x7a, 0x8b, 0x5f, 0xb6, 0x0a, 0xec, 0xa1, 0x26, 0x2e, 0x63, 0x51, 0xf1, 0x50, 0x13,
	0x67, 0x31, 0x99, 0x4e, 0xc3, 0x9e, 0x0a, 0x5b, 0xb0, 0xdd, 0x1e, 0x22, 0x13, 0x8b, 0xcf, 0x0b,
	0xec, 0x89, 0x94, 0xc6, 0x99, 0x6b, 0xc8, 0x5c, 0xc3, 0x72, 0xcf, 0x39, 0x64, 0xe2, 0xab, 0xd5,
	0x32, 0x37, 0xc3, 0x67, 0xd6, 0x53, 0xbc, 0x99, 0xcf, 0x20, 0x83, 0x3b, 0x8f, 0xcc, 0x58, 0xd4,
	0x2a, 0xb0, 0x5d, 0x65, 0x32, 0xc5, 0xa2, 0x62, 0x57, 0x99, 0x3c, 0x31, 0x99, 0x8e, 0x42, 0x46,
	0x51, 0x4b, 0x4a, 0x9f, 0x70, 0xa9, 0x16, 0x8e, 0x8d, 0xa8, 0x54, 0xfb, 0x28, 0x98, 0xe8, 0x10,
	0x47, 0x2a, 0xbb, 0x22, 0x55, 0x9b, 0xb0, 0x46, 0x05, 0x7e, 0x69, 0x81, 0x4d, 0xd5, 0x90, 0x4e,
	0xc2, 0x8e, 0x8f, 0x35, 0x45, 0x4d, 0xa0, 0xac, 0x42, 0xd4, 0xb7, 0x5b, 0x58, 0xc4, 0x0a, 0xf4,
	0x4f, 0xe2, 0x59, 0x88, 0xc7, 0x4e, 0xfe, 0xd7, 0x2a, 0xb0, 0xde, 0x73, 0x9a, 0xa2, 0x2e, 0xc4,
	0x63, 0xa2, 0x17, 0x5b, 0x5e, 0xc8, 0x2a, 0xf4, 0x47, 0xd0, 0x2b, 0xa3, 0x1c, 0xf1, 0x61, 0xcb,
	0xea, 0xd9, 0x77, 0xf5, 0xe1, 0x89, 0xa2, 0x1c, 0x76, 0xe1, 0x91, 0x51, 0x0e, 0x7b, 0x58, 0x84,
	0x03, 0x8d, 0xd2, 0xd3, 0x4a, 0xaa, 0x7e, 0x70, 0x4f, 0x18, 0xd4, 0xe9, 0xb0, 0x6f, 0x65, 0xd9,
	0xb9, 0x15, 0x5b, 0xc7, 0xa7, 0x67, 0xc2, 0xdb, 0x63, 0x22, 0x2d, 0xd5, 0x65, 0x4b, 0x18, 0x84,
	0x3d, 0x86, 0x96, 0xd5, 0x93, 0xc8, 0x11, 0x53, 0xba, 0xf5, 0xb5, 0x00, 0xce, 0xb5, 0x75, 0x78,
	0x7c, 0xde, 0x73, 0x6d, 0x1d, 0xdd, 0xbe, 0x9e, 0xe0, 0xaf, 0x00, 0x0e, 0xe3, 0x7c, 0x6a, 0xba,
	0xb2, 0x89, 0x5c, 0x24, 0x29, 0xb5, 0x38, 0x09, 0xf6, 0xd5, 0xf6, 0x02, 0xf0, 0x56, 0xbd, 0xc0,
	0xe7, 0xee, 0x05, 0x4f, 0x0b, 0x2c, 0x10, 0x7b, 0xa5, 0x6a, 0xc5, 0x0f, 0x41, 0xaf, 0x94, 0x51,
	0x12, 0xeb, 0x28, 0x4f, 0x12, 0xda, 0x49, 0xfa, 0x94, 0xde, 0xee, 0x03, 0xfe, 0x1d, 0x80, 0xb3,
	0x13, 0xb9, 0x18, 0x5b, 0x42, 0x79, 0xd1, 0x23, 0x65, 0x94, 0x25, 0x94, 0x0f, 0x7e, 0x0e, 0x60,
	0xdf, 0x7c, 0xfc, 0xe2, 0x25, 0x11, 0xc9, 0x8a, 0x8e, 0x92, 0xd8, 0x0a, 0x7d, 0x0a, 0xf6, 0x39,
	0x4c, 0x4e, 0x66, 0x33, 0x46, 0x22, 0xab, 0xdb, 0xf5, 0xef, 0x14, 0xfa, 0xad, 0x02, 0xdb, 0x63,
	0x53, 0x12, 0x9f, 0x89, 0x8b, 0x31, 0xd1, 0xe1, 0xfc, 0x7c, 0x36, 0x63, 0xc4, 0x75, 0x85, 0xfe,
	0x1f, 0x1c, 0x48, 0x66, 0x75, 0x1d, 0xa9, 0x66, 0x22, 0x25, 0x99, 0xe8, 0xa6, 0x94, 0x77, 0x21,
	0xe9, 0x28, 0x5d, 0x6b, 0xb1, 0xdf, 0xd9, 0x74, 0xd6, 0xde, 0x83, 0x81, 0x3c, 0xf6, 0xc2, 0x01,
	0xd2, 0xcc, 0x9d, 0xb9, 0x52, 0xca, 0x7e, 0xd8, 0xc7, 0x5f, 0xc1, 0xe9, 0x86, 0x7f, 0x05, 0xd5,
	0x86, 0xde, 0x8b, 0x7f, 0x82, 0x04, 0xec, 0x4e, 0x6a, 0xe9, 0xb4, 0xb4, 0xaa, 0xe9, 0x92, 0xa9,
	0xe9, 0xce, 0x8f, 0x40, 0xa8, 0x16, 0xfe, 0x05, 0x3d, 0x25, 0xa9, 0xca, 0x26, 0xa9, 0xe9, 0x05,
	0x3d, 0x6e, 0x60, 0x7d, 0xa9, 0xe0, 0xed, 0x76, 0x73, 0x40, 0xac, 0x32, 0x48, 0x2b, 0xb0, 0xdf,
	0x29, 0x5d, 0x29, 0xfd, 0xe5, 0x86, 0x7f, 0xe6, 0xad, 0x1a, 0x7e, 0x9f, 0x5d, 0x66, 0x27, 0x87,
	0xb1, 0xa8, 0xe8, 0x50, 0xa2, 0x34, 0x51, 0xd5, 0xf2, 0x4b, 0xbe, 0x6a, 0x5a, 0x55, 0xfb, 0x7b,
	0xdd, 0xf2, 0x9d, 0x48, 0xaa, 0xdb, 0x54, 0x02, 0xfa, 0x08, 0xe7, 0xf5, 0xca, 0x75, 0xf0, 0x7b,
	0x48, 0x91, 0xd8, 0x3a, 0x8e, 0x55, 0xdf, 0x1a, 0x61, 0x00, 0x67, 0xad, 0x66, 0x52, 0xec, 0xc3,
	0xd6, 0x5c, 0x13, 0x81, 0xdf, 0xc0, 0x1b, 0x14, 0x37, 0x0d, 0xbb, 0x4a, 0xa9, 0xac, 0x88, 0xee,
	0xd2, 0xbb, 0x0a, 0x22, 0x74, 0x22, 0xc5, 0xa2, 0x08, 0x1d, 0xfb, 0x58, 0x18, 0x4f, 0x35, 0x16,
	0x46, 0x9b, 0xc9, 0xf8, 0xae, 0x6e, 0x92, 0xbb, 0xda, 0x48, 0x09, 0x0f, 0xc0, 0x5e, 0x47, 0x09,
	0x1d, 0x7b, 0x44, 0x0a, 0x83, 0x3f, 0x01, 0x78, 0xb0, 0x2c, 0x7f, 0x35, 0xf7, 0x38, 0x5e, 0x89,
	0xad, 0x22, 0x7b, 0xc1, 0xda, 0xa4, 0x96, 0xe9, 0xf5, 0x26, 0xc9, 0x2b, 0x05, 0x81, 0xe5, 0x6e,
	0xaa, 0x56, 0xee, 0xfa, 0x49, 0x1f, 0xf7, 0x35, 0xd0, 0xba, 0xf0, 0xe3, 0x56, 0x78, 0xb0, 0xfc,
	0x54, 0x98, 0x77, 0x9e, 0x5f, 0x76, 0xfd, 0xe9, 0x34, 0x6c, 0x27, 0x33, 0xf4, 0xd1, 0x7d, 0xbd,
	0x30, 0x02, 0x63, 0xb5, 0xdb, 0xca, 0x3b, 0x5c, 0xd8, 0x83, 0x43, 0xb7, 0xff, 0xf8, 0xf3, 0xdb,
	0x16, 0x5f, 0xb0, 0x8b, 0x47, 0x72, 0xd2, 0xe0, 0xc9, 0x93, 0x6f, 0x16, 0x4c, 0xd1, 0xf7, 0x00,
	0x1c, 0x6c, 0xd4, 0x27, 0xe8, 0x63, 0x75, 0x7d, 0xa0, 0x79, 0x37, 0x09, 0x0c, 0x71, 0xf6, 0x6b,
	0x8c, 0x2b, 0xbd, 0xc6, 0xb8, 0x05, 0xfc, 0x1a, 0x0b, 0x2e, 0x12, 0xaf, 0x42, 0xf0, 0x8c, 0xed,
	0xd5, 0xd5, 0x20, 0x0c, 0x7e, 0xab, 0xa6, 0xff, 0x70, 0xd5, 0xdf, 0xdb, 0xbc, 0x54, 0x72, 0x88,
	0x71, 0x7e, 0x05, 0xe0, 0x50, 0x5c, 0x95, 0x1a, 0x21, 0xdd, 0x67, 0xc7, 0x6a, 0x0a, 0xf2, 0x04,
	0x01, 0xc9, 0x4f, 0x85, 0xfe, 0x1e, 0xa4, 0x0b, 0x54, 0xf8, 0xbb, 0x56, 0x78, 0xc0, 0x21, 0x49,
	0x4d, 0x05, 0xd7, 0x4a, 0x15, 0x3c, 0xb2, 0x8f, 0x6e, 0x10, 0xd8, 0x07, 0xf3, 0x5c, 0xd5, 0x4b,
	0x25, 0xd3, 0xae, 0xea, 0x7d, 0x03, 0xa0, 0xaf, 0x96, 0xe6, 0xf4, 0x78, 0xd3, 0xca, 0xd5, 0x78,
	0x6e, 0x96, 0x90, 0xd3, 0xc4, 0xdb, 0xc9, 0xe0, 0x71, 0xdb, 0x9b, 0xc3, 0x71, 0x83, 0xdf, 0x72,
	0x5d, 0x1b, 0xae, 0x32, 0xae, 0xa9, 0xd4, 0xa7, 0x90, 0x76, 0x15, 0xaa, 0x04, 0x6a, 0x1f, 0x51,
	0x36, 0xc5, 0x13, 0x22, 0x78, 0xc6, 0xa7, 0x8e, 0x36, 0xc7, 0xe3, 0xc2, 0x20, 0xdc, 0x03, 0x4f,
	0x76, 0x19, 0xf0, 0x74, 0x97, 0x01, 0xcf, 0x76, 0x19, 0xea, 0xc5, 0x2e, 0x43, 0xbd, 0xdc, 0x65,
	0xa8, 0x57, 0xbb, 0x0c, 0xf5, 0x7a, 0x97, 0x01, 0x3b, 0x16, 0x03, 0xee, 0x58, 0x0c, 0x75, 0xdf,
	0x62, 0xc0, 0x03, 0x8b, 0xa1, 0x1e, 0x5a, 0x0c, 0xf5, 0xc8, 0x62, 0xa8, 0x27, 0x16, 0x03, 0x9e,
	0x5a, 0x0c, 0x78, 0x66, 0x31, 0xd4, 0x0b, 0x8b, 0x01, 0x2f, 0x2d, 0x86, 0x7a, 0x65, 0x31, 0xe0,
	0xb5, 0xc5, 0x50, 0x3b, 0x45, 0x86, 0xba, 0x53, 0x64, 0xc0, 0xd7, 0x45, 0x86, 0xfa, 0xbe, 0xc8,
	0x80, 0x9f, 0x8b, 0x0c, 0x75, 0xbf, 0xc8, 0x50, 0x0f, 0x8a, 0x0c, 0x78, 0x58, 0x64, 0xc0, 0xa3,
	0x22, 0x03, 0xae, 0xf0, 0x6f, 0xa1, 0x8a, 0xa6, 0x9a, 0x59, 0x5d, 0xf5, 0x90, 0x30, 0x67, 0xfe,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x41, 0xf9, 0xfc, 0x6c, 0x98, 0x11, 0x00, 0x00,
}

func (this *ClaimEndDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimEndDeviceRequest)
	if !ok {
		that2, ok := that.(ClaimEndDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SourceDevice == nil {
		if this.SourceDevice != nil {
			return false
		}
	} else if this.SourceDevice == nil {
		return false
	} else if !this.SourceDevice.Equal(that1.SourceDevice) {
		return false
	}
	if !this.TargetApplicationIDs.Equal(&that1.TargetApplicationIDs) {
		return false
	}
	if this.TargetDeviceID != that1.TargetDeviceID {
		return false
	}
	if this.TargetNetworkServerAddress != that1.TargetNetworkServerAddress {
		return false
	}
	if this.TargetNetworkServerKEKLabel != that1.TargetNetworkServerKEKLabel {
		return false
	}
	if this.TargetApplicationServerAddress != that1.TargetApplicationServerAddress {
		return false
	}
	if this.TargetApplicationServerKEKLabel != that1.TargetApplicationServerKEKLabel {
		return false
	}
	if this.TargetApplicationServerID != that1.TargetApplicationServerID {
		return false
	}
	if that1.TargetNetID == nil {
		if this.TargetNetID != nil {
			return false
		}
	} else if !this.TargetNetID.Equal(*that1.TargetNetID) {
		return false
	}
	if this.InvalidateAuthenticationCode != that1.InvalidateAuthenticationCode {
		return false
	}
	return true
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimEndDeviceRequest_AuthenticatedIdentifiers_)
	if !ok {
		that2, ok := that.(ClaimEndDeviceRequest_AuthenticatedIdentifiers_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthenticatedIdentifiers.Equal(that1.AuthenticatedIdentifiers) {
		return false
	}
	return true
}
func (this *ClaimEndDeviceRequest_QRCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimEndDeviceRequest_QRCode)
	if !ok {
		that2, ok := that.(ClaimEndDeviceRequest_QRCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.QRCode, that1.QRCode) {
		return false
	}
	return true
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimEndDeviceRequest_AuthenticatedIdentifiers)
	if !ok {
		that2, ok := that.(ClaimEndDeviceRequest_AuthenticatedIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if this.AuthenticationCode != that1.AuthenticationCode {
		return false
	}
	return true
}
func (this *AuthorizeApplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeApplicationRequest)
	if !ok {
		that2, ok := that.(AuthorizeApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.APIKey != that1.APIKey {
		return false
	}
	return true
}
func (this *CUPSRedirection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CUPSRedirection)
	if !ok {
		that2, ok := that.(CUPSRedirection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TargetCUPSURI != that1.TargetCUPSURI {
		return false
	}
	if this.CurrentGatewayKey != that1.CurrentGatewayKey {
		return false
	}
	return true
}
func (this *ClaimGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimGatewayRequest)
	if !ok {
		that2, ok := that.(ClaimGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SourceGateway == nil {
		if this.SourceGateway != nil {
			return false
		}
	} else if this.SourceGateway == nil {
		return false
	} else if !this.SourceGateway.Equal(that1.SourceGateway) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	if this.TargetGatewayID != that1.TargetGatewayID {
		return false
	}
	if this.TargetGatewayServerAddress != that1.TargetGatewayServerAddress {
		return false
	}
	if !this.CUPSRedirection.Equal(that1.CUPSRedirection) {
		return false
	}
	return true
}
func (this *ClaimGatewayRequest_AuthenticatedIdentifiers_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimGatewayRequest_AuthenticatedIdentifiers_)
	if !ok {
		that2, ok := that.(ClaimGatewayRequest_AuthenticatedIdentifiers_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthenticatedIdentifiers.Equal(that1.AuthenticatedIdentifiers) {
		return false
	}
	return true
}
func (this *ClaimGatewayRequest_QRCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimGatewayRequest_QRCode)
	if !ok {
		that2, ok := that.(ClaimGatewayRequest_QRCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.QRCode, that1.QRCode) {
		return false
	}
	return true
}
func (this *ClaimGatewayRequest_AuthenticatedIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimGatewayRequest_AuthenticatedIdentifiers)
	if !ok {
		that2, ok := that.(ClaimGatewayRequest_AuthenticatedIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayEUI.Equal(that1.GatewayEUI) {
		return false
	}
	if !bytes.Equal(this.AuthenticationCode, that1.AuthenticationCode) {
		return false
	}
	return true
}
func (this *AuthorizeGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeGatewayRequest)
	if !ok {
		that2, ok := that.(AuthorizeGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.APIKey != that1.APIKey {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EndDeviceClaimingServerClient is the client API for EndDeviceClaimingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndDeviceClaimingServerClient interface {
	// Claims the end device by claim authentication code or QR code and transfers the device to the target application.
	Claim(ctx context.Context, in *ClaimEndDeviceRequest, opts ...grpc.CallOption) (*EndDeviceIdentifiers, error)
	// Authorize the End Device Claiming Server to claim devices registered in the given application. The application
	// identifiers are the source application, where the devices are registered before they are claimed.
	// The API key is used to access the application, find the device, verify the claim request and delete the end device
	// from the source application.
	AuthorizeApplication(ctx context.Context, in *AuthorizeApplicationRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Unauthorize the End Device Claiming Server to claim devices in the given application.
	// This reverts the authorization given with rpc AuthorizeApplication.
	UnauthorizeApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type endDeviceClaimingServerClient struct {
	cc *grpc.ClientConn
}

func NewEndDeviceClaimingServerClient(cc *grpc.ClientConn) EndDeviceClaimingServerClient {
	return &endDeviceClaimingServerClient{cc}
}

func (c *endDeviceClaimingServerClient) Claim(ctx context.Context, in *ClaimEndDeviceRequest, opts ...grpc.CallOption) (*EndDeviceIdentifiers, error) {
	out := new(EndDeviceIdentifiers)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceClaimingServer/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceClaimingServerClient) AuthorizeApplication(ctx context.Context, in *AuthorizeApplicationRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceClaimingServer/AuthorizeApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endDeviceClaimingServerClient) UnauthorizeApplication(ctx context.Context, in *ApplicationIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.EndDeviceClaimingServer/UnauthorizeApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndDeviceClaimingServerServer is the server API for EndDeviceClaimingServer service.
type EndDeviceClaimingServerServer interface {
	// Claims the end device by claim authentication code or QR code and transfers the device to the target application.
	Claim(context.Context, *ClaimEndDeviceRequest) (*EndDeviceIdentifiers, error)
	// Authorize the End Device Claiming Server to claim devices registered in the given application. The application
	// identifiers are the source application, where the devices are registered before they are claimed.
	// The API key is used to access the application, find the device, verify the claim request and delete the end device
	// from the source application.
	AuthorizeApplication(context.Context, *AuthorizeApplicationRequest) (*types.Empty, error)
	// Unauthorize the End Device Claiming Server to claim devices in the given application.
	// This reverts the authorization given with rpc AuthorizeApplication.
	UnauthorizeApplication(context.Context, *ApplicationIdentifiers) (*types.Empty, error)
}

// UnimplementedEndDeviceClaimingServerServer can be embedded to have forward compatible implementations.
type UnimplementedEndDeviceClaimingServerServer struct {
}

func (*UnimplementedEndDeviceClaimingServerServer) Claim(ctx context.Context, req *ClaimEndDeviceRequest) (*EndDeviceIdentifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (*UnimplementedEndDeviceClaimingServerServer) AuthorizeApplication(ctx context.Context, req *AuthorizeApplicationRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeApplication not implemented")
}
func (*UnimplementedEndDeviceClaimingServerServer) UnauthorizeApplication(ctx context.Context, req *ApplicationIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeApplication not implemented")
}

func RegisterEndDeviceClaimingServerServer(s *grpc.Server, srv EndDeviceClaimingServerServer) {
	s.RegisterService(&_EndDeviceClaimingServer_serviceDesc, srv)
}

func _EndDeviceClaimingServer_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimEndDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceClaimingServerServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceClaimingServer/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceClaimingServerServer).Claim(ctx, req.(*ClaimEndDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceClaimingServer_AuthorizeApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceClaimingServerServer).AuthorizeApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceClaimingServer/AuthorizeApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceClaimingServerServer).AuthorizeApplication(ctx, req.(*AuthorizeApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndDeviceClaimingServer_UnauthorizeApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndDeviceClaimingServerServer).UnauthorizeApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.EndDeviceClaimingServer/UnauthorizeApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndDeviceClaimingServerServer).UnauthorizeApplication(ctx, req.(*ApplicationIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndDeviceClaimingServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.EndDeviceClaimingServer",
	HandlerType: (*EndDeviceClaimingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Claim",
			Handler:    _EndDeviceClaimingServer_Claim_Handler,
		},
		{
			MethodName: "AuthorizeApplication",
			Handler:    _EndDeviceClaimingServer_AuthorizeApplication_Handler,
		},
		{
			MethodName: "UnauthorizeApplication",
			Handler:    _EndDeviceClaimingServer_UnauthorizeApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/deviceclaimingserver.proto",
}

// GatewayClaimingServerClient is the client API for GatewayClaimingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClaimingServerClient interface {
	// Claims a gateway by claim authentication code or QR code and transfers the gateway to the target user.
	Claim(ctx context.Context, in *ClaimGatewayRequest, opts ...grpc.CallOption) (*GatewayIdentifiers, error)
	// AuthorizeGateway allows a gateway to be claimed.
	AuthorizeGateway(ctx context.Context, in *AuthorizeGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// UnauthorizeGateway prevents a gateway from being claimed.
	UnauthorizeGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type gatewayClaimingServerClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClaimingServerClient(cc *grpc.ClientConn) GatewayClaimingServerClient {
	return &gatewayClaimingServerClient{cc}
}

func (c *gatewayClaimingServerClient) Claim(ctx context.Context, in *ClaimGatewayRequest, opts ...grpc.CallOption) (*GatewayIdentifiers, error) {
	out := new(GatewayIdentifiers)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayClaimingServer/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClaimingServerClient) AuthorizeGateway(ctx context.Context, in *AuthorizeGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayClaimingServer/AuthorizeGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClaimingServerClient) UnauthorizeGateway(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayClaimingServer/UnauthorizeGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayClaimingServerServer is the server API for GatewayClaimingServer service.
type GatewayClaimingServerServer interface {
	// Claims a gateway by claim authentication code or QR code and transfers the gateway to the target user.
	Claim(context.Context, *ClaimGatewayRequest) (*GatewayIdentifiers, error)
	// AuthorizeGateway allows a gateway to be claimed.
	AuthorizeGateway(context.Context, *AuthorizeGatewayRequest) (*types.Empty, error)
	// UnauthorizeGateway prevents a gateway from being claimed.
	UnauthorizeGateway(context.Context, *GatewayIdentifiers) (*types.Empty, error)
}

// UnimplementedGatewayClaimingServerServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayClaimingServerServer struct {
}

func (*UnimplementedGatewayClaimingServerServer) Claim(ctx context.Context, req *ClaimGatewayRequest) (*GatewayIdentifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (*UnimplementedGatewayClaimingServerServer) AuthorizeGateway(ctx context.Context, req *AuthorizeGatewayRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeGateway not implemented")
}
func (*UnimplementedGatewayClaimingServerServer) UnauthorizeGateway(ctx context.Context, req *GatewayIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeGateway not implemented")
}

func RegisterGatewayClaimingServerServer(s *grpc.Server, srv GatewayClaimingServerServer) {
	s.RegisterService(&_GatewayClaimingServer_serviceDesc, srv)
}

func _GatewayClaimingServer_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayClaimingServerServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayClaimingServer/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayClaimingServerServer).Claim(ctx, req.(*ClaimGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayClaimingServer_AuthorizeGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayClaimingServerServer).AuthorizeGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayClaimingServer/AuthorizeGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayClaimingServerServer).AuthorizeGateway(ctx, req.(*AuthorizeGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayClaimingServer_UnauthorizeGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayClaimingServerServer).UnauthorizeGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayClaimingServer/UnauthorizeGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayClaimingServerServer).UnauthorizeGateway(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayClaimingServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayClaimingServer",
	HandlerType: (*GatewayClaimingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Claim",
			Handler:    _GatewayClaimingServer_Claim_Handler,
		},
		{
			MethodName: "AuthorizeGateway",
			Handler:    _GatewayClaimingServer_AuthorizeGateway_Handler,
		},
		{
			MethodName: "UnauthorizeGateway",
			Handler:    _GatewayClaimingServer_UnauthorizeGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/deviceclaimingserver.proto",
}

func (m *ClaimEndDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimEndDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimEndDeviceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetNetID != nil {
		{
			size := m.TargetNetID.Size()
			i -= size
			if _, err := m.TargetNetID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TargetApplicationServerID) > 0 {
		i -= len(m.TargetApplicationServerID)
		copy(dAtA[i:], m.TargetApplicationServerID)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetApplicationServerID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TargetApplicationServerKEKLabel) > 0 {
		i -= len(m.TargetApplicationServerKEKLabel)
		copy(dAtA[i:], m.TargetApplicationServerKEKLabel)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetApplicationServerKEKLabel)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TargetApplicationServerAddress) > 0 {
		i -= len(m.TargetApplicationServerAddress)
		copy(dAtA[i:], m.TargetApplicationServerAddress)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetApplicationServerAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TargetNetworkServerKEKLabel) > 0 {
		i -= len(m.TargetNetworkServerKEKLabel)
		copy(dAtA[i:], m.TargetNetworkServerKEKLabel)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetNetworkServerKEKLabel)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TargetNetworkServerAddress) > 0 {
		i -= len(m.TargetNetworkServerAddress)
		copy(dAtA[i:], m.TargetNetworkServerAddress)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetNetworkServerAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.InvalidateAuthenticationCode {
		i--
		if m.InvalidateAuthenticationCode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TargetDeviceID) > 0 {
		i -= len(m.TargetDeviceID)
		copy(dAtA[i:], m.TargetDeviceID)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetDeviceID)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.TargetApplicationIDs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.SourceDevice != nil {
		{
			size := m.SourceDevice.Size()
			i -= size
			if _, err := m.SourceDevice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthenticatedIdentifiers != nil {
		{
			size, err := m.AuthenticatedIdentifiers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ClaimEndDeviceRequest_QRCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimEndDeviceRequest_QRCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QRCode != nil {
		i -= len(m.QRCode)
		copy(dAtA[i:], m.QRCode)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.QRCode)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationCode) > 0 {
		i -= len(m.AuthenticationCode)
		copy(dAtA[i:], m.AuthenticationCode)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.AuthenticationCode)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.DevEUI.Size()
		i -= size
		if _, err := m.DevEUI.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.JoinEUI.Size()
		i -= size
		if _, err := m.JoinEUI.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AuthorizeApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeApplicationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.APIKey) > 0 {
		i -= len(m.APIKey)
		copy(dAtA[i:], m.APIKey)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.APIKey)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ApplicationIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CUPSRedirection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CUPSRedirection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CUPSRedirection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentGatewayKey) > 0 {
		i -= len(m.CurrentGatewayKey)
		copy(dAtA[i:], m.CurrentGatewayKey)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.CurrentGatewayKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TargetCUPSURI) > 0 {
		i -= len(m.TargetCUPSURI)
		copy(dAtA[i:], m.TargetCUPSURI)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetCUPSURI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimGatewayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CUPSRedirection != nil {
		{
			size, err := m.CUPSRedirection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.TargetGatewayServerAddress) > 0 {
		i -= len(m.TargetGatewayServerAddress)
		copy(dAtA[i:], m.TargetGatewayServerAddress)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetGatewayServerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetGatewayID) > 0 {
		i -= len(m.TargetGatewayID)
		copy(dAtA[i:], m.TargetGatewayID)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.TargetGatewayID)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Collaborator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.SourceGateway != nil {
		{
			size := m.SourceGateway.Size()
			i -= size
			if _, err := m.SourceGateway.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClaimGatewayRequest_AuthenticatedIdentifiers_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimGatewayRequest_AuthenticatedIdentifiers_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthenticatedIdentifiers != nil {
		{
			size, err := m.AuthenticatedIdentifiers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ClaimGatewayRequest_QRCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimGatewayRequest_QRCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QRCode != nil {
		i -= len(m.QRCode)
		copy(dAtA[i:], m.QRCode)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.QRCode)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationCode) > 0 {
		i -= len(m.AuthenticationCode)
		copy(dAtA[i:], m.AuthenticationCode)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.AuthenticationCode)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.GatewayEUI.Size()
		i -= size
		if _, err := m.GatewayEUI.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AuthorizeGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizeGatewayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.APIKey) > 0 {
		i -= len(m.APIKey)
		copy(dAtA[i:], m.APIKey)
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(len(m.APIKey)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.GatewayIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeviceclaimingserver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDeviceclaimingserver(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeviceclaimingserver(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedClaimEndDeviceRequest(r randyDeviceclaimingserver, easy bool) *ClaimEndDeviceRequest {
	this := &ClaimEndDeviceRequest{}
	oneofNumber_SourceDevice := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_SourceDevice {
	case 1:
		this.SourceDevice = NewPopulatedClaimEndDeviceRequest_AuthenticatedIdentifiers_(r, easy)
	case 2:
		this.SourceDevice = NewPopulatedClaimEndDeviceRequest_QRCode(r, easy)
	}
	v1 := NewPopulatedApplicationIdentifiers(r, easy)
	this.TargetApplicationIDs = *v1
	this.TargetDeviceID = randStringDeviceclaimingserver(r)
	this.InvalidateAuthenticationCode = bool(r.Intn(2) == 0)
	this.TargetNetworkServerAddress = randStringDeviceclaimingserver(r)
	this.TargetNetworkServerKEKLabel = randStringDeviceclaimingserver(r)
	this.TargetApplicationServerAddress = randStringDeviceclaimingserver(r)
	this.TargetApplicationServerKEKLabel = randStringDeviceclaimingserver(r)
	this.TargetApplicationServerID = randStringDeviceclaimingserver(r)
	this.TargetNetID = go_thethings_network_lorawan_stack_v3_pkg_types.NewPopulatedNetID(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClaimEndDeviceRequest_AuthenticatedIdentifiers_(r randyDeviceclaimingserver, easy bool) *ClaimEndDeviceRequest_AuthenticatedIdentifiers_ {
	this := &ClaimEndDeviceRequest_AuthenticatedIdentifiers_{}
	this.AuthenticatedIdentifiers = NewPopulatedClaimEndDeviceRequest_AuthenticatedIdentifiers(r, easy)
	return this
}
func NewPopulatedClaimEndDeviceRequest_QRCode(r randyDeviceclaimingserver, easy bool) *ClaimEndDeviceRequest_QRCode {
	this := &ClaimEndDeviceRequest_QRCode{}
	v2 := r.Intn(100)
	this.QRCode = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.QRCode[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedClaimEndDeviceRequest_AuthenticatedIdentifiers(r randyDeviceclaimingserver, easy bool) *ClaimEndDeviceRequest_AuthenticatedIdentifiers {
	this := &ClaimEndDeviceRequest_AuthenticatedIdentifiers{}
	v3 := go_thethings_network_lorawan_stack_v3_pkg_types.NewPopulatedEUI64(r)
	this.JoinEUI = *v3
	v4 := go_thethings_network_lorawan_stack_v3_pkg_types.NewPopulatedEUI64(r)
	this.DevEUI = *v4
	this.AuthenticationCode = randStringDeviceclaimingserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthorizeApplicationRequest(r randyDeviceclaimingserver, easy bool) *AuthorizeApplicationRequest {
	this := &AuthorizeApplicationRequest{}
	v5 := NewPopulatedApplicationIdentifiers(r, easy)
	this.ApplicationIdentifiers = *v5
	this.APIKey = randStringDeviceclaimingserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCUPSRedirection(r randyDeviceclaimingserver, easy bool) *CUPSRedirection {
	this := &CUPSRedirection{}
	this.TargetCUPSURI = randStringDeviceclaimingserver(r)
	this.CurrentGatewayKey = randStringDeviceclaimingserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClaimGatewayRequest(r randyDeviceclaimingserver, easy bool) *ClaimGatewayRequest {
	this := &ClaimGatewayRequest{}
	oneofNumber_SourceGateway := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_SourceGateway {
	case 1:
		this.SourceGateway = NewPopulatedClaimGatewayRequest_AuthenticatedIdentifiers_(r, easy)
	case 2:
		this.SourceGateway = NewPopulatedClaimGatewayRequest_QRCode(r, easy)
	}
	v6 := NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	this.Collaborator = *v6
	this.TargetGatewayID = randStringDeviceclaimingserver(r)
	this.TargetGatewayServerAddress = randStringDeviceclaimingserver(r)
	if r.Intn(5) != 0 {
		this.CUPSRedirection = NewPopulatedCUPSRedirection(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClaimGatewayRequest_AuthenticatedIdentifiers_(r randyDeviceclaimingserver, easy bool) *ClaimGatewayRequest_AuthenticatedIdentifiers_ {
	this := &ClaimGatewayRequest_AuthenticatedIdentifiers_{}
	this.AuthenticatedIdentifiers = NewPopulatedClaimGatewayRequest_AuthenticatedIdentifiers(r, easy)
	return this
}
func NewPopulatedClaimGatewayRequest_QRCode(r randyDeviceclaimingserver, easy bool) *ClaimGatewayRequest_QRCode {
	this := &ClaimGatewayRequest_QRCode{}
	v7 := r.Intn(100)
	this.QRCode = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.QRCode[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedClaimGatewayRequest_AuthenticatedIdentifiers(r randyDeviceclaimingserver, easy bool) *ClaimGatewayRequest_AuthenticatedIdentifiers {
	this := &ClaimGatewayRequest_AuthenticatedIdentifiers{}
	v8 := go_thethings_network_lorawan_stack_v3_pkg_types.NewPopulatedEUI64(r)
	this.GatewayEUI = *v8
	v9 := r.Intn(100)
	this.AuthenticationCode = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.AuthenticationCode[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthorizeGatewayRequest(r randyDeviceclaimingserver, easy bool) *AuthorizeGatewayRequest {
	this := &AuthorizeGatewayRequest{}
	v10 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v10
	this.APIKey = randStringDeviceclaimingserver(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDeviceclaimingserver interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDeviceclaimingserver(r randyDeviceclaimingserver) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDeviceclaimingserver(r randyDeviceclaimingserver) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneDeviceclaimingserver(r)
	}
	return string(tmps)
}
func randUnrecognizedDeviceclaimingserver(r randyDeviceclaimingserver, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDeviceclaimingserver(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDeviceclaimingserver(dAtA []byte, r randyDeviceclaimingserver, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDeviceclaimingserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDeviceclaimingserver(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ClaimEndDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceDevice != nil {
		n += m.SourceDevice.Size()
	}
	l = m.TargetApplicationIDs.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = len(m.TargetDeviceID)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	if m.InvalidateAuthenticationCode {
		n += 2
	}
	l = len(m.TargetNetworkServerAddress)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	l = len(m.TargetNetworkServerKEKLabel)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	l = len(m.TargetApplicationServerAddress)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	l = len(m.TargetApplicationServerKEKLabel)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	l = len(m.TargetApplicationServerID)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	if m.TargetNetID != nil {
		l = m.TargetNetID.Size()
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}

func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthenticatedIdentifiers != nil {
		l = m.AuthenticatedIdentifiers.Size()
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}
func (m *ClaimEndDeviceRequest_QRCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QRCode != nil {
		l = len(m.QRCode)
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.JoinEUI.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = len(m.AuthenticationCode)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}

func (m *AuthorizeApplicationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApplicationIdentifiers.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = len(m.APIKey)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}

func (m *CUPSRedirection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetCUPSURI)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	l = len(m.CurrentGatewayKey)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}

func (m *ClaimGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceGateway != nil {
		n += m.SourceGateway.Size()
	}
	l = m.Collaborator.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = len(m.TargetGatewayID)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	l = len(m.TargetGatewayServerAddress)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	if m.CUPSRedirection != nil {
		l = m.CUPSRedirection.Size()
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}

func (m *ClaimGatewayRequest_AuthenticatedIdentifiers_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthenticatedIdentifiers != nil {
		l = m.AuthenticatedIdentifiers.Size()
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}
func (m *ClaimGatewayRequest_QRCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QRCode != nil {
		l = len(m.QRCode)
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayEUI.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = len(m.AuthenticationCode)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}

func (m *AuthorizeGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovDeviceclaimingserver(uint64(l))
	l = len(m.APIKey)
	if l > 0 {
		n += 1 + l + sovDeviceclaimingserver(uint64(l))
	}
	return n
}

func sovDeviceclaimingserver(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeviceclaimingserver(x uint64) (n int) {
	return sovDeviceclaimingserver((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *ClaimEndDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest{`,
		`SourceDevice:` + fmt.Sprintf("%v", this.SourceDevice) + `,`,
		`TargetApplicationIDs:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TargetApplicationIDs), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`TargetDeviceID:` + fmt.Sprintf("%v", this.TargetDeviceID) + `,`,
		`InvalidateAuthenticationCode:` + fmt.Sprintf("%v", this.InvalidateAuthenticationCode) + `,`,
		`TargetNetworkServerAddress:` + fmt.Sprintf("%v", this.TargetNetworkServerAddress) + `,`,
		`TargetNetworkServerKEKLabel:` + fmt.Sprintf("%v", this.TargetNetworkServerKEKLabel) + `,`,
		`TargetApplicationServerAddress:` + fmt.Sprintf("%v", this.TargetApplicationServerAddress) + `,`,
		`TargetApplicationServerKEKLabel:` + fmt.Sprintf("%v", this.TargetApplicationServerKEKLabel) + `,`,
		`TargetApplicationServerID:` + fmt.Sprintf("%v", this.TargetApplicationServerID) + `,`,
		`TargetNetID:` + fmt.Sprintf("%v", this.TargetNetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest_AuthenticatedIdentifiers_{`,
		`AuthenticatedIdentifiers:` + strings.Replace(fmt.Sprintf("%v", this.AuthenticatedIdentifiers), "ClaimEndDeviceRequest_AuthenticatedIdentifiers", "ClaimEndDeviceRequest_AuthenticatedIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimEndDeviceRequest_QRCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest_QRCode{`,
		`QRCode:` + fmt.Sprintf("%v", this.QRCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimEndDeviceRequest_AuthenticatedIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimEndDeviceRequest_AuthenticatedIdentifiers{`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AuthenticationCode:` + fmt.Sprintf("%v", this.AuthenticationCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeApplicationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeApplicationRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIdentifiers), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`APIKey:` + fmt.Sprintf("%v", this.APIKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CUPSRedirection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CUPSRedirection{`,
		`TargetCUPSURI:` + fmt.Sprintf("%v", this.TargetCUPSURI) + `,`,
		`CurrentGatewayKey:` + fmt.Sprintf("%v", this.CurrentGatewayKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimGatewayRequest{`,
		`SourceGateway:` + fmt.Sprintf("%v", this.SourceGateway) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Collaborator), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1), `&`, ``, 1) + `,`,
		`TargetGatewayID:` + fmt.Sprintf("%v", this.TargetGatewayID) + `,`,
		`TargetGatewayServerAddress:` + fmt.Sprintf("%v", this.TargetGatewayServerAddress) + `,`,
		`CUPSRedirection:` + strings.Replace(this.CUPSRedirection.String(), "CUPSRedirection", "CUPSRedirection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimGatewayRequest_AuthenticatedIdentifiers_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimGatewayRequest_AuthenticatedIdentifiers_{`,
		`AuthenticatedIdentifiers:` + strings.Replace(fmt.Sprintf("%v", this.AuthenticatedIdentifiers), "ClaimGatewayRequest_AuthenticatedIdentifiers", "ClaimGatewayRequest_AuthenticatedIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimGatewayRequest_QRCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimGatewayRequest_QRCode{`,
		`QRCode:` + fmt.Sprintf("%v", this.QRCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimGatewayRequest_AuthenticatedIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimGatewayRequest_AuthenticatedIdentifiers{`,
		`GatewayEUI:` + fmt.Sprintf("%v", this.GatewayEUI) + `,`,
		`AuthenticationCode:` + fmt.Sprintf("%v", this.AuthenticationCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeGatewayRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`APIKey:` + fmt.Sprintf("%v", this.APIKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDeviceclaimingserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ClaimEndDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimEndDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimEndDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticatedIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClaimEndDeviceRequest_AuthenticatedIdentifiers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceDevice = &ClaimEndDeviceRequest_AuthenticatedIdentifiers_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QRCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.SourceDevice = &ClaimEndDeviceRequest_QRCode{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetApplicationIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetApplicationIDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidateAuthenticationCode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidateAuthenticationCode = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNetworkServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetNetworkServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNetworkServerKEKLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetNetworkServerKEKLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetApplicationServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetApplicationServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetApplicationServerKEKLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetApplicationServerKEKLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetApplicationServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetApplicationServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v go_thethings_network_lorawan_stack_v3_pkg_types.NetID
			m.TargetNetID = &v
			if err := m.TargetNetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceclaimingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimEndDeviceRequest_AuthenticatedIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticatedIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticatedIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceclaimingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApplicationIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceclaimingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CUPSRedirection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CUPSRedirection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CUPSRedirection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCUPSURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCUPSURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentGatewayKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentGatewayKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceclaimingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticatedIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClaimGatewayRequest_AuthenticatedIdentifiers{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceGateway = &ClaimGatewayRequest_AuthenticatedIdentifiers_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QRCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.SourceGateway = &ClaimGatewayRequest_QRCode{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetGatewayID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetGatewayID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetGatewayServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetGatewayServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUPSRedirection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CUPSRedirection == nil {
				m.CUPSRedirection = &CUPSRedirection{}
			}
			if err := m.CUPSRedirection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceclaimingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimGatewayRequest_AuthenticatedIdentifiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticatedIdentifiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticatedIdentifiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationCode = append(m.AuthenticationCode[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthenticationCode == nil {
				m.AuthenticationCode = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceclaimingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceclaimingserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDeviceclaimingserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeviceclaimingserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeviceclaimingserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceclaimingserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeviceclaimingserver
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeviceclaimingserver
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeviceclaimingserver
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeviceclaimingserver        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeviceclaimingserver          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeviceclaimingserver = fmt.Errorf("proto: unexpected end of group")
)
