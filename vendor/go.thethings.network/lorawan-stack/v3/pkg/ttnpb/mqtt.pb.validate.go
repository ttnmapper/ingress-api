// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _mqtt_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// ValidateFields checks the field values on MQTTConnectionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MQTTConnectionInfo) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = MQTTConnectionInfoFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "public_address":

			if !_MQTTConnectionInfo_PublicAddress_Pattern.MatchString(m.GetPublicAddress()) {
				return MQTTConnectionInfoValidationError{
					field:  "public_address",
					reason: "value does not match regex pattern \"^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$\"",
				}
			}

		case "public_tls_address":

			if !_MQTTConnectionInfo_PublicTLSAddress_Pattern.MatchString(m.GetPublicTLSAddress()) {
				return MQTTConnectionInfoValidationError{
					field:  "public_tls_address",
					reason: "value does not match regex pattern \"^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$\"",
				}
			}

		case "username":
			// no validation rules for Username
		default:
			return MQTTConnectionInfoValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// MQTTConnectionInfoValidationError is the validation error returned by
// MQTTConnectionInfo.ValidateFields if the designated constraints aren't met.
type MQTTConnectionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MQTTConnectionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MQTTConnectionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MQTTConnectionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MQTTConnectionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MQTTConnectionInfoValidationError) ErrorName() string {
	return "MQTTConnectionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e MQTTConnectionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMQTTConnectionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MQTTConnectionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MQTTConnectionInfoValidationError{}

var _MQTTConnectionInfo_PublicAddress_Pattern = regexp.MustCompile("^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$")

var _MQTTConnectionInfo_PublicTLSAddress_Pattern = regexp.MustCompile("^(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])(?::[0-9]{1,5})?$|^$")
