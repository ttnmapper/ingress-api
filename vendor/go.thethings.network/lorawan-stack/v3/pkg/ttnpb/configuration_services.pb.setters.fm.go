// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *ListFrequencyPlansRequest) SetFields(src *ListFrequencyPlansRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "base_frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'base_frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BaseFrequency = src.BaseFrequency
			} else {
				var zero uint32
				dst.BaseFrequency = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *FrequencyPlanDescription) SetFields(src *FrequencyPlanDescription, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "id":
			if len(subs) > 0 {
				return fmt.Errorf("'id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ID = src.ID
			} else {
				var zero string
				dst.ID = zero
			}
		case "base_id":
			if len(subs) > 0 {
				return fmt.Errorf("'base_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BaseID = src.BaseID
			} else {
				var zero string
				dst.BaseID = zero
			}
		case "name":
			if len(subs) > 0 {
				return fmt.Errorf("'name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Name = src.Name
			} else {
				var zero string
				dst.Name = zero
			}
		case "base_frequency":
			if len(subs) > 0 {
				return fmt.Errorf("'base_frequency' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BaseFrequency = src.BaseFrequency
			} else {
				var zero uint32
				dst.BaseFrequency = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListFrequencyPlansResponse) SetFields(src *ListFrequencyPlansResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "frequency_plans":
			if len(subs) > 0 {
				return fmt.Errorf("'frequency_plans' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrequencyPlans = src.FrequencyPlans
			} else {
				dst.FrequencyPlans = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
