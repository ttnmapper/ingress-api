// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/applicationserver_pubsub.proto

package ttnpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApplicationPubSub_MQTTProvider_QoS int32

const (
	ApplicationPubSub_MQTTProvider_AT_MOST_ONCE  ApplicationPubSub_MQTTProvider_QoS = 0
	ApplicationPubSub_MQTTProvider_AT_LEAST_ONCE ApplicationPubSub_MQTTProvider_QoS = 1
	ApplicationPubSub_MQTTProvider_EXACTLY_ONCE  ApplicationPubSub_MQTTProvider_QoS = 2
)

var ApplicationPubSub_MQTTProvider_QoS_name = map[int32]string{
	0: "AT_MOST_ONCE",
	1: "AT_LEAST_ONCE",
	2: "EXACTLY_ONCE",
}

var ApplicationPubSub_MQTTProvider_QoS_value = map[string]int32{
	"AT_MOST_ONCE":  0,
	"AT_LEAST_ONCE": 1,
	"EXACTLY_ONCE":  2,
}

func (ApplicationPubSub_MQTTProvider_QoS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 1, 0}
}

type ApplicationPubSubIdentifiers struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	PubSubId               string   `protobuf:"bytes,2,opt,name=pub_sub_id,json=pubSubId,proto3" json:"pub_sub_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ApplicationPubSubIdentifiers) Reset()      { *m = ApplicationPubSubIdentifiers{} }
func (*ApplicationPubSubIdentifiers) ProtoMessage() {}
func (*ApplicationPubSubIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{0}
}
func (m *ApplicationPubSubIdentifiers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSubIdentifiers.Unmarshal(m, b)
}
func (m *ApplicationPubSubIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSubIdentifiers.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSubIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSubIdentifiers.Merge(m, src)
}
func (m *ApplicationPubSubIdentifiers) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSubIdentifiers.Size(m)
}
func (m *ApplicationPubSubIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSubIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSubIdentifiers proto.InternalMessageInfo

func (m *ApplicationPubSubIdentifiers) GetPubSubId() string {
	if m != nil {
		return m.PubSubId
	}
	return ""
}

type ApplicationPubSub struct {
	ApplicationPubSubIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt                    time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt                    time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	// The format to use for the body.
	// Supported values depend on the Application Server configuration.
	Format string `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	// The provider for the PubSub.
	//
	// Types that are valid to be assigned to Provider:
	//	*ApplicationPubSub_Nats
	//	*ApplicationPubSub_Mqtt
	//	*ApplicationPubSub_AwsIot
	Provider isApplicationPubSub_Provider `protobuf_oneof:"provider"`
	// Base topic name to which the messages topic is appended.
	BaseTopic string `protobuf:"bytes,6,opt,name=base_topic,json=baseTopic,proto3" json:"base_topic,omitempty"`
	// The topic to which the Application Server subscribes for downlink queue push operations.
	DownlinkPush *ApplicationPubSub_Message `protobuf:"bytes,7,opt,name=downlink_push,json=downlinkPush,proto3" json:"downlink_push,omitempty"`
	// The topic to which the Application Server subscribes for downlink queue replace operations.
	DownlinkReplace          *ApplicationPubSub_Message `protobuf:"bytes,8,opt,name=downlink_replace,json=downlinkReplace,proto3" json:"downlink_replace,omitempty"`
	UplinkMessage            *ApplicationPubSub_Message `protobuf:"bytes,9,opt,name=uplink_message,json=uplinkMessage,proto3" json:"uplink_message,omitempty"`
	JoinAccept               *ApplicationPubSub_Message `protobuf:"bytes,10,opt,name=join_accept,json=joinAccept,proto3" json:"join_accept,omitempty"`
	DownlinkAck              *ApplicationPubSub_Message `protobuf:"bytes,11,opt,name=downlink_ack,json=downlinkAck,proto3" json:"downlink_ack,omitempty"`
	DownlinkNack             *ApplicationPubSub_Message `protobuf:"bytes,12,opt,name=downlink_nack,json=downlinkNack,proto3" json:"downlink_nack,omitempty"`
	DownlinkSent             *ApplicationPubSub_Message `protobuf:"bytes,13,opt,name=downlink_sent,json=downlinkSent,proto3" json:"downlink_sent,omitempty"`
	DownlinkFailed           *ApplicationPubSub_Message `protobuf:"bytes,14,opt,name=downlink_failed,json=downlinkFailed,proto3" json:"downlink_failed,omitempty"`
	DownlinkQueued           *ApplicationPubSub_Message `protobuf:"bytes,15,opt,name=downlink_queued,json=downlinkQueued,proto3" json:"downlink_queued,omitempty"`
	DownlinkQueueInvalidated *ApplicationPubSub_Message `protobuf:"bytes,19,opt,name=downlink_queue_invalidated,json=downlinkQueueInvalidated,proto3" json:"downlink_queue_invalidated,omitempty"`
	LocationSolved           *ApplicationPubSub_Message `protobuf:"bytes,16,opt,name=location_solved,json=locationSolved,proto3" json:"location_solved,omitempty"`
	ServiceData              *ApplicationPubSub_Message `protobuf:"bytes,18,opt,name=service_data,json=serviceData,proto3" json:"service_data,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                   `json:"-"`
	XXX_sizecache            int32                      `json:"-"`
}

func (m *ApplicationPubSub) Reset()      { *m = ApplicationPubSub{} }
func (*ApplicationPubSub) ProtoMessage() {}
func (*ApplicationPubSub) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1}
}
func (m *ApplicationPubSub) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSub.Unmarshal(m, b)
}
func (m *ApplicationPubSub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSub.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub.Merge(m, src)
}
func (m *ApplicationPubSub) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSub.Size(m)
}
func (m *ApplicationPubSub) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub proto.InternalMessageInfo

type isApplicationPubSub_Provider interface {
	isApplicationPubSub_Provider()
	Equal(interface{}) bool
}

type ApplicationPubSub_Nats struct {
	Nats *ApplicationPubSub_NATSProvider `protobuf:"bytes,17,opt,name=nats,proto3,oneof" json:"nats,omitempty"`
}
type ApplicationPubSub_Mqtt struct {
	Mqtt *ApplicationPubSub_MQTTProvider `protobuf:"bytes,25,opt,name=mqtt,proto3,oneof" json:"mqtt,omitempty"`
}
type ApplicationPubSub_AwsIot struct {
	AwsIot *ApplicationPubSub_AWSIoTProvider `protobuf:"bytes,101,opt,name=aws_iot,json=awsIot,proto3,oneof" json:"aws_iot,omitempty"`
}

func (*ApplicationPubSub_Nats) isApplicationPubSub_Provider()   {}
func (*ApplicationPubSub_Mqtt) isApplicationPubSub_Provider()   {}
func (*ApplicationPubSub_AwsIot) isApplicationPubSub_Provider() {}

func (m *ApplicationPubSub) GetProvider() isApplicationPubSub_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *ApplicationPubSub) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *ApplicationPubSub) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *ApplicationPubSub) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ApplicationPubSub) GetNats() *ApplicationPubSub_NATSProvider {
	if x, ok := m.GetProvider().(*ApplicationPubSub_Nats); ok {
		return x.Nats
	}
	return nil
}

func (m *ApplicationPubSub) GetMqtt() *ApplicationPubSub_MQTTProvider {
	if x, ok := m.GetProvider().(*ApplicationPubSub_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

func (m *ApplicationPubSub) GetAwsIot() *ApplicationPubSub_AWSIoTProvider {
	if x, ok := m.GetProvider().(*ApplicationPubSub_AwsIot); ok {
		return x.AwsIot
	}
	return nil
}

func (m *ApplicationPubSub) GetBaseTopic() string {
	if m != nil {
		return m.BaseTopic
	}
	return ""
}

func (m *ApplicationPubSub) GetDownlinkPush() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkPush
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkReplace() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkReplace
	}
	return nil
}

func (m *ApplicationPubSub) GetUplinkMessage() *ApplicationPubSub_Message {
	if m != nil {
		return m.UplinkMessage
	}
	return nil
}

func (m *ApplicationPubSub) GetJoinAccept() *ApplicationPubSub_Message {
	if m != nil {
		return m.JoinAccept
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkAck() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkAck
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkNack() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkNack
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkSent() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkSent
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkFailed() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkFailed
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkQueued() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkQueued
	}
	return nil
}

func (m *ApplicationPubSub) GetDownlinkQueueInvalidated() *ApplicationPubSub_Message {
	if m != nil {
		return m.DownlinkQueueInvalidated
	}
	return nil
}

func (m *ApplicationPubSub) GetLocationSolved() *ApplicationPubSub_Message {
	if m != nil {
		return m.LocationSolved
	}
	return nil
}

func (m *ApplicationPubSub) GetServiceData() *ApplicationPubSub_Message {
	if m != nil {
		return m.ServiceData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApplicationPubSub) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApplicationPubSub_Nats)(nil),
		(*ApplicationPubSub_Mqtt)(nil),
		(*ApplicationPubSub_AwsIot)(nil),
	}
}

// The NATS provider settings.
type ApplicationPubSub_NATSProvider struct {
	// The server connection URL.
	ServerUrl            string   `protobuf:"bytes,1,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationPubSub_NATSProvider) Reset()      { *m = ApplicationPubSub_NATSProvider{} }
func (*ApplicationPubSub_NATSProvider) ProtoMessage() {}
func (*ApplicationPubSub_NATSProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 0}
}
func (m *ApplicationPubSub_NATSProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSub_NATSProvider.Unmarshal(m, b)
}
func (m *ApplicationPubSub_NATSProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSub_NATSProvider.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSub_NATSProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_NATSProvider.Merge(m, src)
}
func (m *ApplicationPubSub_NATSProvider) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSub_NATSProvider.Size(m)
}
func (m *ApplicationPubSub_NATSProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_NATSProvider.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_NATSProvider proto.InternalMessageInfo

func (m *ApplicationPubSub_NATSProvider) GetServerUrl() string {
	if m != nil {
		return m.ServerUrl
	}
	return ""
}

// The MQTT provider settings.
type ApplicationPubSub_MQTTProvider struct {
	ServerUrl    string                             `protobuf:"bytes,1,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	ClientId     string                             `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Username     string                             `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password     string                             `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	SubscribeQos ApplicationPubSub_MQTTProvider_QoS `protobuf:"varint,5,opt,name=subscribe_qos,json=subscribeQos,proto3,enum=ttn.lorawan.v3.ApplicationPubSub_MQTTProvider_QoS" json:"subscribe_qos,omitempty"`
	PublishQos   ApplicationPubSub_MQTTProvider_QoS `protobuf:"varint,6,opt,name=publish_qos,json=publishQos,proto3,enum=ttn.lorawan.v3.ApplicationPubSub_MQTTProvider_QoS" json:"publish_qos,omitempty"`
	UseTls       bool                               `protobuf:"varint,7,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	// The server Root CA certificate. PEM formatted.
	TlsCa []byte `protobuf:"bytes,8,opt,name=tls_ca,json=tlsCa,proto3" json:"tls_ca,omitempty"`
	// The client certificate. PEM formatted.
	TlsClientCert []byte `protobuf:"bytes,9,opt,name=tls_client_cert,json=tlsClientCert,proto3" json:"tls_client_cert,omitempty"`
	// The client private key. PEM formatted.
	TlsClientKey []byte `protobuf:"bytes,10,opt,name=tls_client_key,json=tlsClientKey,proto3" json:"tls_client_key,omitempty"`
	// HTTP headers to use on MQTT-over-Websocket connections.
	Headers              map[string]string `protobuf:"bytes,11,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ApplicationPubSub_MQTTProvider) Reset()      { *m = ApplicationPubSub_MQTTProvider{} }
func (*ApplicationPubSub_MQTTProvider) ProtoMessage() {}
func (*ApplicationPubSub_MQTTProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 1}
}
func (m *ApplicationPubSub_MQTTProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSub_MQTTProvider.Unmarshal(m, b)
}
func (m *ApplicationPubSub_MQTTProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSub_MQTTProvider.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSub_MQTTProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_MQTTProvider.Merge(m, src)
}
func (m *ApplicationPubSub_MQTTProvider) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSub_MQTTProvider.Size(m)
}
func (m *ApplicationPubSub_MQTTProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_MQTTProvider.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_MQTTProvider proto.InternalMessageInfo

func (m *ApplicationPubSub_MQTTProvider) GetServerUrl() string {
	if m != nil {
		return m.ServerUrl
	}
	return ""
}

func (m *ApplicationPubSub_MQTTProvider) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ApplicationPubSub_MQTTProvider) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ApplicationPubSub_MQTTProvider) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ApplicationPubSub_MQTTProvider) GetSubscribeQos() ApplicationPubSub_MQTTProvider_QoS {
	if m != nil {
		return m.SubscribeQos
	}
	return ApplicationPubSub_MQTTProvider_AT_MOST_ONCE
}

func (m *ApplicationPubSub_MQTTProvider) GetPublishQos() ApplicationPubSub_MQTTProvider_QoS {
	if m != nil {
		return m.PublishQos
	}
	return ApplicationPubSub_MQTTProvider_AT_MOST_ONCE
}

func (m *ApplicationPubSub_MQTTProvider) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *ApplicationPubSub_MQTTProvider) GetTlsCa() []byte {
	if m != nil {
		return m.TlsCa
	}
	return nil
}

func (m *ApplicationPubSub_MQTTProvider) GetTlsClientCert() []byte {
	if m != nil {
		return m.TlsClientCert
	}
	return nil
}

func (m *ApplicationPubSub_MQTTProvider) GetTlsClientKey() []byte {
	if m != nil {
		return m.TlsClientKey
	}
	return nil
}

func (m *ApplicationPubSub_MQTTProvider) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

type ApplicationPubSub_AWSIoTProvider struct {
	// The AWS region.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// If set, the integration will use an AWS access key.
	AccessKey *ApplicationPubSub_AWSIoTProvider_AccessKey `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	// If set, the integration will assume the given role during operation.
	AssumeRole *ApplicationPubSub_AWSIoTProvider_AssumeRole `protobuf:"bytes,3,opt,name=assume_role,json=assumeRole,proto3" json:"assume_role,omitempty"`
	// The endpoint address to connect to. If the endpoint address is left empty,
	// the integration will try to discover it.
	EndpointAddress string `protobuf:"bytes,4,opt,name=endpoint_address,json=endpointAddress,proto3" json:"endpoint_address,omitempty"`
	// Types that are valid to be assigned to Deployment:
	//	*ApplicationPubSub_AWSIoTProvider_Default
	Deployment           isApplicationPubSub_AWSIoTProvider_Deployment `protobuf_oneof:"deployment"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *ApplicationPubSub_AWSIoTProvider) Reset()      { *m = ApplicationPubSub_AWSIoTProvider{} }
func (*ApplicationPubSub_AWSIoTProvider) ProtoMessage() {}
func (*ApplicationPubSub_AWSIoTProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 2}
}
func (m *ApplicationPubSub_AWSIoTProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider.Unmarshal(m, b)
}
func (m *ApplicationPubSub_AWSIoTProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSub_AWSIoTProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_AWSIoTProvider.Merge(m, src)
}
func (m *ApplicationPubSub_AWSIoTProvider) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider.Size(m)
}
func (m *ApplicationPubSub_AWSIoTProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_AWSIoTProvider.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_AWSIoTProvider proto.InternalMessageInfo

type isApplicationPubSub_AWSIoTProvider_Deployment interface {
	isApplicationPubSub_AWSIoTProvider_Deployment()
	Equal(interface{}) bool
}

type ApplicationPubSub_AWSIoTProvider_Default struct {
	Default *ApplicationPubSub_AWSIoTProvider_DefaultIntegration `protobuf:"bytes,5,opt,name=default,proto3,oneof" json:"default,omitempty"`
}

func (*ApplicationPubSub_AWSIoTProvider_Default) isApplicationPubSub_AWSIoTProvider_Deployment() {}

func (m *ApplicationPubSub_AWSIoTProvider) GetDeployment() isApplicationPubSub_AWSIoTProvider_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (m *ApplicationPubSub_AWSIoTProvider) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ApplicationPubSub_AWSIoTProvider) GetAccessKey() *ApplicationPubSub_AWSIoTProvider_AccessKey {
	if m != nil {
		return m.AccessKey
	}
	return nil
}

func (m *ApplicationPubSub_AWSIoTProvider) GetAssumeRole() *ApplicationPubSub_AWSIoTProvider_AssumeRole {
	if m != nil {
		return m.AssumeRole
	}
	return nil
}

func (m *ApplicationPubSub_AWSIoTProvider) GetEndpointAddress() string {
	if m != nil {
		return m.EndpointAddress
	}
	return ""
}

func (m *ApplicationPubSub_AWSIoTProvider) GetDefault() *ApplicationPubSub_AWSIoTProvider_DefaultIntegration {
	if x, ok := m.GetDeployment().(*ApplicationPubSub_AWSIoTProvider_Default); ok {
		return x.Default
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApplicationPubSub_AWSIoTProvider) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApplicationPubSub_AWSIoTProvider_Default)(nil),
	}
}

type ApplicationPubSub_AWSIoTProvider_AccessKey struct {
	AccessKeyId          string   `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey      string   `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	SessionToken         string   `protobuf:"bytes,3,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) Reset() {
	*m = ApplicationPubSub_AWSIoTProvider_AccessKey{}
}
func (*ApplicationPubSub_AWSIoTProvider_AccessKey) ProtoMessage() {}
func (*ApplicationPubSub_AWSIoTProvider_AccessKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 2, 0}
}
func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AccessKey.Unmarshal(m, b)
}
func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AccessKey.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AccessKey.Merge(m, src)
}
func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AccessKey.Size(m)
}
func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AccessKey.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AccessKey proto.InternalMessageInfo

func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) GetAccessKeyId() string {
	if m != nil {
		return m.AccessKeyId
	}
	return ""
}

func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) GetSecretAccessKey() string {
	if m != nil {
		return m.SecretAccessKey
	}
	return ""
}

func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type ApplicationPubSub_AWSIoTProvider_AssumeRole struct {
	Arn                  string         `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	ExternalId           string         `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	SessionDuration      *time.Duration `protobuf:"bytes,3,opt,name=session_duration,json=sessionDuration,proto3,stdduration" json:"session_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) Reset() {
	*m = ApplicationPubSub_AWSIoTProvider_AssumeRole{}
}
func (*ApplicationPubSub_AWSIoTProvider_AssumeRole) ProtoMessage() {}
func (*ApplicationPubSub_AWSIoTProvider_AssumeRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 2, 1}
}
func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AssumeRole.Unmarshal(m, b)
}
func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AssumeRole.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AssumeRole.Merge(m, src)
}
func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AssumeRole.Size(m)
}
func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AssumeRole.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_AssumeRole proto.InternalMessageInfo

func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) GetSessionDuration() *time.Duration {
	if m != nil {
		return m.SessionDuration
	}
	return nil
}

type ApplicationPubSub_AWSIoTProvider_DefaultIntegration struct {
	// The stack name that is associated with the CloudFormation deployment of The Things Enterprise Stack integration.
	StackName            string   `protobuf:"bytes,1,opt,name=stack_name,json=stackName,proto3" json:"stack_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) Reset() {
	*m = ApplicationPubSub_AWSIoTProvider_DefaultIntegration{}
}
func (*ApplicationPubSub_AWSIoTProvider_DefaultIntegration) ProtoMessage() {}
func (*ApplicationPubSub_AWSIoTProvider_DefaultIntegration) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 2, 2}
}
func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_DefaultIntegration.Unmarshal(m, b)
}
func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_DefaultIntegration.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_DefaultIntegration.Merge(m, src)
}
func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_DefaultIntegration.Size(m)
}
func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_DefaultIntegration.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_AWSIoTProvider_DefaultIntegration proto.InternalMessageInfo

func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) GetStackName() string {
	if m != nil {
		return m.StackName
	}
	return ""
}

type ApplicationPubSub_Message struct {
	// The topic on which the Application Server publishes or receives the messages.
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationPubSub_Message) Reset()      { *m = ApplicationPubSub_Message{} }
func (*ApplicationPubSub_Message) ProtoMessage() {}
func (*ApplicationPubSub_Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{1, 3}
}
func (m *ApplicationPubSub_Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSub_Message.Unmarshal(m, b)
}
func (m *ApplicationPubSub_Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSub_Message.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSub_Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSub_Message.Merge(m, src)
}
func (m *ApplicationPubSub_Message) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSub_Message.Size(m)
}
func (m *ApplicationPubSub_Message) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSub_Message.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSub_Message proto.InternalMessageInfo

func (m *ApplicationPubSub_Message) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type ApplicationPubSubs struct {
	Pubsubs              []*ApplicationPubSub `protobuf:"bytes,1,rep,name=pubsubs,proto3" json:"pubsubs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ApplicationPubSubs) Reset()      { *m = ApplicationPubSubs{} }
func (*ApplicationPubSubs) ProtoMessage() {}
func (*ApplicationPubSubs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{2}
}
func (m *ApplicationPubSubs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSubs.Unmarshal(m, b)
}
func (m *ApplicationPubSubs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSubs.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSubs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSubs.Merge(m, src)
}
func (m *ApplicationPubSubs) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSubs.Size(m)
}
func (m *ApplicationPubSubs) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSubs.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSubs proto.InternalMessageInfo

func (m *ApplicationPubSubs) GetPubsubs() []*ApplicationPubSub {
	if m != nil {
		return m.Pubsubs
	}
	return nil
}

type ApplicationPubSubFormats struct {
	// Format and description.
	Formats              map[string]string `protobuf:"bytes,1,rep,name=formats,proto3" json:"formats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ApplicationPubSubFormats) Reset()      { *m = ApplicationPubSubFormats{} }
func (*ApplicationPubSubFormats) ProtoMessage() {}
func (*ApplicationPubSubFormats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{3}
}
func (m *ApplicationPubSubFormats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPubSubFormats.Unmarshal(m, b)
}
func (m *ApplicationPubSubFormats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPubSubFormats.Marshal(b, m, deterministic)
}
func (m *ApplicationPubSubFormats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPubSubFormats.Merge(m, src)
}
func (m *ApplicationPubSubFormats) XXX_Size() int {
	return xxx_messageInfo_ApplicationPubSubFormats.Size(m)
}
func (m *ApplicationPubSubFormats) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPubSubFormats.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPubSubFormats proto.InternalMessageInfo

func (m *ApplicationPubSubFormats) GetFormats() map[string]string {
	if m != nil {
		return m.Formats
	}
	return nil
}

type GetApplicationPubSubRequest struct {
	ApplicationPubSubIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	FieldMask                    *types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}         `json:"-"`
	XXX_sizecache                int32            `json:"-"`
}

func (m *GetApplicationPubSubRequest) Reset()      { *m = GetApplicationPubSubRequest{} }
func (*GetApplicationPubSubRequest) ProtoMessage() {}
func (*GetApplicationPubSubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{4}
}
func (m *GetApplicationPubSubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetApplicationPubSubRequest.Unmarshal(m, b)
}
func (m *GetApplicationPubSubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetApplicationPubSubRequest.Marshal(b, m, deterministic)
}
func (m *GetApplicationPubSubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplicationPubSubRequest.Merge(m, src)
}
func (m *GetApplicationPubSubRequest) XXX_Size() int {
	return xxx_messageInfo_GetApplicationPubSubRequest.Size(m)
}
func (m *GetApplicationPubSubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplicationPubSubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplicationPubSubRequest proto.InternalMessageInfo

func (m *GetApplicationPubSubRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type ListApplicationPubSubsRequest struct {
	ApplicationIdentifiers `protobuf:"bytes,1,opt,name=application_ids,json=applicationIds,proto3,embedded=application_ids" json:"application_ids"`
	FieldMask              *types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}         `json:"-"`
	XXX_sizecache          int32            `json:"-"`
}

func (m *ListApplicationPubSubsRequest) Reset()      { *m = ListApplicationPubSubsRequest{} }
func (*ListApplicationPubSubsRequest) ProtoMessage() {}
func (*ListApplicationPubSubsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{5}
}
func (m *ListApplicationPubSubsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListApplicationPubSubsRequest.Unmarshal(m, b)
}
func (m *ListApplicationPubSubsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListApplicationPubSubsRequest.Marshal(b, m, deterministic)
}
func (m *ListApplicationPubSubsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApplicationPubSubsRequest.Merge(m, src)
}
func (m *ListApplicationPubSubsRequest) XXX_Size() int {
	return xxx_messageInfo_ListApplicationPubSubsRequest.Size(m)
}
func (m *ListApplicationPubSubsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApplicationPubSubsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListApplicationPubSubsRequest proto.InternalMessageInfo

func (m *ListApplicationPubSubsRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type SetApplicationPubSubRequest struct {
	ApplicationPubSub    `protobuf:"bytes,1,opt,name=pubsub,proto3,embedded=pubsub" json:"pubsub"`
	FieldMask            *types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SetApplicationPubSubRequest) Reset()      { *m = SetApplicationPubSubRequest{} }
func (*SetApplicationPubSubRequest) ProtoMessage() {}
func (*SetApplicationPubSubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dce56ec18597200, []int{6}
}
func (m *SetApplicationPubSubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetApplicationPubSubRequest.Unmarshal(m, b)
}
func (m *SetApplicationPubSubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetApplicationPubSubRequest.Marshal(b, m, deterministic)
}
func (m *SetApplicationPubSubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationPubSubRequest.Merge(m, src)
}
func (m *SetApplicationPubSubRequest) XXX_Size() int {
	return xxx_messageInfo_SetApplicationPubSubRequest.Size(m)
}
func (m *SetApplicationPubSubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationPubSubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationPubSubRequest proto.InternalMessageInfo

func (m *SetApplicationPubSubRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func init() {
	proto.RegisterEnum("ttn.lorawan.v3.ApplicationPubSub_MQTTProvider_QoS", ApplicationPubSub_MQTTProvider_QoS_name, ApplicationPubSub_MQTTProvider_QoS_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.ApplicationPubSub_MQTTProvider_QoS", ApplicationPubSub_MQTTProvider_QoS_name, ApplicationPubSub_MQTTProvider_QoS_value)
	proto.RegisterType((*ApplicationPubSubIdentifiers)(nil), "ttn.lorawan.v3.ApplicationPubSubIdentifiers")
	golang_proto.RegisterType((*ApplicationPubSubIdentifiers)(nil), "ttn.lorawan.v3.ApplicationPubSubIdentifiers")
	proto.RegisterType((*ApplicationPubSub)(nil), "ttn.lorawan.v3.ApplicationPubSub")
	golang_proto.RegisterType((*ApplicationPubSub)(nil), "ttn.lorawan.v3.ApplicationPubSub")
	proto.RegisterType((*ApplicationPubSub_NATSProvider)(nil), "ttn.lorawan.v3.ApplicationPubSub.NATSProvider")
	golang_proto.RegisterType((*ApplicationPubSub_NATSProvider)(nil), "ttn.lorawan.v3.ApplicationPubSub.NATSProvider")
	proto.RegisterType((*ApplicationPubSub_MQTTProvider)(nil), "ttn.lorawan.v3.ApplicationPubSub.MQTTProvider")
	golang_proto.RegisterType((*ApplicationPubSub_MQTTProvider)(nil), "ttn.lorawan.v3.ApplicationPubSub.MQTTProvider")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSub.MQTTProvider.HeadersEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSub.MQTTProvider.HeadersEntry")
	proto.RegisterType((*ApplicationPubSub_AWSIoTProvider)(nil), "ttn.lorawan.v3.ApplicationPubSub.AWSIoTProvider")
	golang_proto.RegisterType((*ApplicationPubSub_AWSIoTProvider)(nil), "ttn.lorawan.v3.ApplicationPubSub.AWSIoTProvider")
	proto.RegisterType((*ApplicationPubSub_AWSIoTProvider_AccessKey)(nil), "ttn.lorawan.v3.ApplicationPubSub.AWSIoTProvider.AccessKey")
	golang_proto.RegisterType((*ApplicationPubSub_AWSIoTProvider_AccessKey)(nil), "ttn.lorawan.v3.ApplicationPubSub.AWSIoTProvider.AccessKey")
	proto.RegisterType((*ApplicationPubSub_AWSIoTProvider_AssumeRole)(nil), "ttn.lorawan.v3.ApplicationPubSub.AWSIoTProvider.AssumeRole")
	golang_proto.RegisterType((*ApplicationPubSub_AWSIoTProvider_AssumeRole)(nil), "ttn.lorawan.v3.ApplicationPubSub.AWSIoTProvider.AssumeRole")
	proto.RegisterType((*ApplicationPubSub_AWSIoTProvider_DefaultIntegration)(nil), "ttn.lorawan.v3.ApplicationPubSub.AWSIoTProvider.DefaultIntegration")
	golang_proto.RegisterType((*ApplicationPubSub_AWSIoTProvider_DefaultIntegration)(nil), "ttn.lorawan.v3.ApplicationPubSub.AWSIoTProvider.DefaultIntegration")
	proto.RegisterType((*ApplicationPubSub_Message)(nil), "ttn.lorawan.v3.ApplicationPubSub.Message")
	golang_proto.RegisterType((*ApplicationPubSub_Message)(nil), "ttn.lorawan.v3.ApplicationPubSub.Message")
	proto.RegisterType((*ApplicationPubSubs)(nil), "ttn.lorawan.v3.ApplicationPubSubs")
	golang_proto.RegisterType((*ApplicationPubSubs)(nil), "ttn.lorawan.v3.ApplicationPubSubs")
	proto.RegisterType((*ApplicationPubSubFormats)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats")
	golang_proto.RegisterType((*ApplicationPubSubFormats)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats.FormatsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.ApplicationPubSubFormats.FormatsEntry")
	proto.RegisterType((*GetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.GetApplicationPubSubRequest")
	golang_proto.RegisterType((*GetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.GetApplicationPubSubRequest")
	proto.RegisterType((*ListApplicationPubSubsRequest)(nil), "ttn.lorawan.v3.ListApplicationPubSubsRequest")
	golang_proto.RegisterType((*ListApplicationPubSubsRequest)(nil), "ttn.lorawan.v3.ListApplicationPubSubsRequest")
	proto.RegisterType((*SetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.SetApplicationPubSubRequest")
	golang_proto.RegisterType((*SetApplicationPubSubRequest)(nil), "ttn.lorawan.v3.SetApplicationPubSubRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/applicationserver_pubsub.proto", fileDescriptor_1dce56ec18597200)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/applicationserver_pubsub.proto", fileDescriptor_1dce56ec18597200)
}

var fileDescriptor_1dce56ec18597200 = []byte{
	// 2102 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0xc1, 0x6f, 0x13, 0xd9,
	0x19, 0xc0, 0x33, 0x31, 0x71, 0xe2, 0xcf, 0x4e, 0x62, 0xde, 0xd2, 0x32, 0x18, 0x48, 0xa8, 0x37,
	0xda, 0x75, 0x02, 0x63, 0x83, 0xd3, 0xee, 0x2e, 0xa6, 0x15, 0xd8, 0x21, 0x40, 0x16, 0x08, 0x64,
	0xec, 0x15, 0x5d, 0x08, 0x8c, 0x9e, 0x3d, 0x2f, 0xce, 0x6c, 0xc6, 0x33, 0xc3, 0xbc, 0x37, 0x09,
	0x59, 0x40, 0x42, 0x7b, 0xaa, 0x7a, 0xa8, 0x90, 0x7a, 0x68, 0xa5, 0x1e, 0x7a, 0xa8, 0xaa, 0xae,
	0xfa, 0x0f, 0xf4, 0x54, 0xb5, 0xea, 0x89, 0x63, 0xa5, 0x5e, 0x7a, 0xda, 0xaa, 0x6c, 0x2b, 0xf5,
	0xd6, 0x1e, 0xab, 0x54, 0xaa, 0xaa, 0xf7, 0xe6, 0x8d, 0x3d, 0x89, 0x59, 0x82, 0x41, 0xdd, 0x53,
	0xbe, 0xf1, 0xf7, 0x7d, 0xbf, 0xf9, 0xde, 0xf7, 0xbe, 0x7c, 0xdf, 0x7b, 0x03, 0xa7, 0x6d, 0xd7,
	0xc7, 0x5b, 0xd8, 0xd1, 0x28, 0xc3, 0xad, 0x8d, 0x12, 0xf6, 0xac, 0x12, 0xf6, 0x3c, 0xdb, 0x6a,
	0x61, 0x66, 0xb9, 0x0e, 0x25, 0xfe, 0x26, 0xf1, 0x0d, 0x2f, 0x68, 0xd2, 0xa0, 0x59, 0xf4, 0x7c,
	0x97, 0xb9, 0x68, 0x82, 0x31, 0xa7, 0x28, 0xbd, 0x8a, 0x9b, 0xf3, 0xb9, 0x6a, 0xdb, 0x62, 0xeb,
	0x41, 0xb3, 0xd8, 0x72, 0x3b, 0x25, 0xe2, 0x6c, 0xba, 0xdb, 0x9e, 0xef, 0x3e, 0xd8, 0x2e, 0x09,
	0xe3, 0x96, 0xd6, 0x26, 0x8e, 0xb6, 0x89, 0x6d, 0xcb, 0xc4, 0x8c, 0x94, 0xfa, 0x84, 0x10, 0x99,
	0xd3, 0x62, 0x88, 0xb6, 0xdb, 0x76, 0x43, 0xe7, 0x66, 0xb0, 0x26, 0x9e, 0xc4, 0x83, 0x90, 0xa4,
	0xf9, 0xb1, 0xb6, 0xeb, 0xb6, 0x6d, 0x12, 0x06, 0xeb, 0x38, 0x2e, 0x0b, 0x63, 0x95, 0xda, 0x29,
	0xa9, 0xed, 0x32, 0xcc, 0xc0, 0x17, 0x06, 0x52, 0x7f, 0x74, 0xaf, 0x9e, 0x74, 0x3c, 0xb6, 0x2d,
	0x95, 0x27, 0xf6, 0x2a, 0xd7, 0x2c, 0x62, 0x9b, 0x46, 0x07, 0xd3, 0x0d, 0x69, 0x31, 0xbd, 0xd7,
	0x82, 0x59, 0x1d, 0x42, 0x19, 0xee, 0x78, 0xd2, 0xe0, 0xed, 0xfe, 0x8c, 0x5a, 0x26, 0x71, 0x98,
	0xb5, 0x66, 0x11, 0x5f, 0x06, 0x99, 0x7f, 0xa6, 0xc0, 0xb1, 0x6a, 0x2f, 0xcf, 0x37, 0x83, 0x66,
	0x3d, 0x68, 0x2e, 0xf5, 0xcc, 0x10, 0x86, 0xc9, 0xd8, 0x3e, 0x18, 0x96, 0x49, 0x55, 0xe5, 0x84,
	0x52, 0x48, 0x97, 0xdf, 0x29, 0xee, 0xce, 0x7f, 0x31, 0x86, 0x89, 0x01, 0x6a, 0xd9, 0x9d, 0xda,
	0xc8, 0x0f, 0x95, 0xe1, 0xac, 0xf2, 0xec, 0x8b, 0xe9, 0xa1, 0x3f, 0x7e, 0x31, 0xad, 0xe8, 0x13,
	0x38, 0x6e, 0x49, 0xd1, 0x22, 0x80, 0x17, 0x34, 0x0d, 0x1a, 0x34, 0x0d, 0xcb, 0x54, 0x87, 0x4f,
	0x28, 0x85, 0x54, 0xed, 0xdd, 0x9d, 0xda, 0x8c, 0x9f, 0x57, 0x67, 0xca, 0x53, 0xf7, 0xee, 0x60,
	0xed, 0xd3, 0xd3, 0xda, 0xd9, 0xbb, 0x85, 0xf3, 0x95, 0x3b, 0xda, 0xdd, 0xf3, 0xd1, 0xe3, 0xec,
	0xc3, 0xf2, 0xa9, 0xc7, 0x33, 0xfa, 0x98, 0x27, 0x43, 0xce, 0xff, 0xe6, 0x18, 0x1c, 0xec, 0x5b,
	0x0a, 0xba, 0x09, 0x89, 0x5e, 0xcc, 0xa7, 0x5e, 0x12, 0x73, 0xdf, 0xd2, 0x5f, 0x10, 0x39, 0x47,
	0xa1, 0x05, 0x80, 0x96, 0x4f, 0x30, 0x23, 0xa6, 0x81, 0x99, 0x08, 0x37, 0x5d, 0xce, 0x15, 0xc3,
	0xdd, 0x28, 0x46, 0xbb, 0x51, 0x6c, 0x44, 0xbb, 0x51, 0x1b, 0xe3, 0xee, 0x4f, 0xff, 0x32, 0xad,
	0xe8, 0x29, 0xe9, 0x57, 0x65, 0x1c, 0x12, 0x78, 0x66, 0x04, 0x49, 0x0c, 0x02, 0x91, 0x7e, 0x55,
	0x86, 0xce, 0x43, 0x72, 0xcd, 0xf5, 0x3b, 0x98, 0xa9, 0x07, 0xe2, 0x49, 0x3b, 0xb4, 0x6f, 0xd2,
	0xa4, 0x1b, 0xba, 0x08, 0x07, 0x1c, 0xcc, 0xa8, 0x7a, 0x50, 0xbc, 0xbf, 0xb8, 0x6f, 0x76, 0x8a,
	0xcb, 0xd5, 0x46, 0xfd, 0xa6, 0xef, 0x6e, 0x5a, 0x26, 0xf1, 0xaf, 0x0c, 0xe9, 0xc2, 0x9b, 0x53,
	0x3a, 0xf7, 0x19, 0x53, 0x8f, 0xbc, 0x2a, 0xe5, 0xfa, 0x4a, 0xa3, 0x11, 0xa7, 0x70, 0x6f, 0x74,
	0x15, 0x46, 0xf1, 0x16, 0x35, 0x2c, 0x97, 0xa9, 0x44, 0x80, 0x4e, 0xef, 0x0f, 0xaa, 0xde, 0xaa,
	0x2f, 0xb9, 0x71, 0x54, 0x12, 0x6f, 0xd1, 0x25, 0x97, 0xa1, 0x77, 0x00, 0x9a, 0x98, 0x12, 0x83,
	0xb9, 0x9e, 0xd5, 0x52, 0x93, 0x22, 0x3b, 0xa3, 0x3b, 0xb5, 0x03, 0xfe, 0xb0, 0x6a, 0xea, 0x29,
	0xae, 0x6a, 0x70, 0x0d, 0x5a, 0x86, 0x71, 0xd3, 0xdd, 0x72, 0x6c, 0xcb, 0xd9, 0x30, 0xbc, 0x80,
	0xae, 0xab, 0xa3, 0xe2, 0xd5, 0xb3, 0xaf, 0xb0, 0x06, 0x42, 0x29, 0x6e, 0x13, 0x3d, 0x13, 0xf9,
	0xdf, 0x0c, 0xe8, 0x3a, 0x6a, 0x40, 0xb6, 0xcb, 0xf3, 0x89, 0x67, 0xe3, 0x16, 0x51, 0xc7, 0x06,
	0x45, 0x4e, 0x46, 0x08, 0x3d, 0x24, 0xa0, 0x9b, 0x30, 0x11, 0x78, 0x82, 0xd9, 0x09, 0x4d, 0xd4,
	0xd4, 0xa0, 0xcc, 0xf1, 0x10, 0x20, 0x1f, 0xd1, 0x87, 0x90, 0xfe, 0xc4, 0xb5, 0x1c, 0x03, 0xb7,
	0x5a, 0xc4, 0x63, 0x2a, 0x0c, 0x8a, 0x03, 0xee, 0x5d, 0x15, 0xce, 0xe8, 0x1a, 0x74, 0x73, 0x60,
	0xe0, 0xd6, 0x86, 0x9a, 0x1e, 0x14, 0x96, 0x8e, 0xdc, 0xab, 0xad, 0x8d, 0x5d, 0x3b, 0xe2, 0x70,
	0x5c, 0xe6, 0xb5, 0x77, 0x64, 0x19, 0xef, 0xe1, 0x51, 0xe2, 0x30, 0x75, 0xfc, 0xb5, 0x79, 0x75,
	0xe2, 0x30, 0xa4, 0x43, 0x77, 0x7b, 0x8c, 0x35, 0x6c, 0xd9, 0xc4, 0x54, 0x27, 0x06, 0x25, 0x4e,
	0x44, 0x84, 0x4b, 0x02, 0xb0, 0x8b, 0x79, 0x3f, 0x20, 0x01, 0x31, 0xd5, 0xc9, 0xd7, 0x66, 0xae,
	0x08, 0x00, 0x6a, 0x43, 0x6e, 0x37, 0xd3, 0xb0, 0x9c, 0x68, 0xda, 0x99, 0xea, 0x5b, 0x83, 0xe2,
	0xd5, 0x5d, 0xf8, 0xa5, 0x1e, 0x8a, 0x07, 0x6f, 0xbb, 0x72, 0x3a, 0x50, 0xd7, 0xde, 0x24, 0xa6,
	0x9a, 0x1d, 0x38, 0xf8, 0x88, 0x50, 0x17, 0x00, 0x5e, 0x52, 0x7c, 0xe2, 0x5b, 0x2d, 0x62, 0x98,
	0x98, 0x61, 0x15, 0x0d, 0x5c, 0x52, 0xd2, 0xfd, 0x22, 0x66, 0x38, 0xf7, 0x3e, 0x64, 0xe2, 0x7d,
	0x0b, 0xbd, 0x0b, 0x20, 0xcf, 0x13, 0x81, 0x6f, 0x8b, 0xc9, 0x90, 0xaa, 0x8d, 0xed, 0xd4, 0x46,
	0xfc, 0xc4, 0x0f, 0x14, 0x45, 0x4f, 0x85, 0xba, 0x8f, 0x7c, 0x3b, 0xf7, 0x87, 0x11, 0xc8, 0xc4,
	0x7b, 0xd5, 0x2b, 0x7b, 0xa2, 0x19, 0x48, 0xb5, 0x6c, 0x8b, 0x38, 0xac, 0x37, 0xd1, 0x64, 0xfb,
	0x39, 0xac, 0x8f, 0x85, 0x9a, 0x25, 0x13, 0xbd, 0x0d, 0x63, 0x01, 0x25, 0xbe, 0x83, 0x3b, 0x44,
	0x8c, 0x80, 0x58, 0x8f, 0xea, 0x2a, 0xb8, 0x91, 0x87, 0x29, 0xdd, 0x72, 0x7d, 0x53, 0xb6, 0xf9,
	0x9e, 0x51, 0xa4, 0x40, 0xb7, 0x60, 0x9c, 0x06, 0x4d, 0xda, 0xf2, 0xad, 0x26, 0x31, 0xee, 0xbb,
	0x54, 0x1d, 0x39, 0xa1, 0x14, 0x26, 0xca, 0xe5, 0xc1, 0x7a, 0x71, 0x71, 0xc5, 0xad, 0xeb, 0x99,
	0x2e, 0x68, 0xc5, 0xa5, 0xa8, 0x0e, 0x69, 0x2f, 0x68, 0xda, 0x16, 0x5d, 0x17, 0xd8, 0xe4, 0x6b,
	0x63, 0x41, 0x62, 0x38, 0xf4, 0x30, 0x8c, 0x06, 0xbc, 0x39, 0xdb, 0x54, 0xf4, 0xdb, 0x31, 0x3d,
	0x19, 0x50, 0xd2, 0xb0, 0x29, 0x9a, 0x86, 0x24, 0xb3, 0xa9, 0xd1, 0xc2, 0xa2, 0x69, 0x66, 0x44,
	0x6e, 0x3f, 0x4d, 0xa8, 0x4f, 0x2e, 0xe8, 0x23, 0xcc, 0xa6, 0x0b, 0x18, 0x9d, 0x86, 0x49, 0x61,
	0x10, 0xe6, 0xb6, 0x45, 0x7c, 0x26, 0x5a, 0x61, 0xdc, 0x72, 0x9c, 0x5b, 0x0a, 0xfd, 0x02, 0xf1,
	0x19, 0x2a, 0xc2, 0x44, 0xcc, 0x63, 0x83, 0x6c, 0x8b, 0x66, 0x17, 0x77, 0xc8, 0x74, 0x1d, 0xae,
	0x92, 0x6d, 0xf4, 0x11, 0x8c, 0xae, 0x13, 0x6c, 0x12, 0x9f, 0xaa, 0xe9, 0x13, 0x89, 0x42, 0xba,
	0x7c, 0x6e, 0xc0, 0xc5, 0x5e, 0x09, 0xbd, 0x17, 0x1d, 0xe6, 0x6f, 0xeb, 0x11, 0x2b, 0x57, 0x81,
	0x4c, 0x5c, 0x81, 0xb2, 0x90, 0xe0, 0xb1, 0x88, 0x12, 0xd2, 0xb9, 0x88, 0x0e, 0xc1, 0xc8, 0x26,
	0xb6, 0x03, 0x12, 0x96, 0x8b, 0x1e, 0x3e, 0x54, 0x86, 0x3f, 0x50, 0xf2, 0xdf, 0x85, 0xc4, 0x8a,
	0x5b, 0x47, 0x59, 0xc8, 0x54, 0x1b, 0xc6, 0xf5, 0x1b, 0xf5, 0x86, 0x71, 0x63, 0x79, 0x61, 0x31,
	0x3b, 0x84, 0x0e, 0xc2, 0x78, 0xb5, 0x61, 0x5c, 0x5b, 0xac, 0x46, 0x3f, 0x29, 0xdc, 0x68, 0xf1,
	0xfb, 0xd5, 0x85, 0xc6, 0xb5, 0x8f, 0xc3, 0x5f, 0x86, 0x73, 0x7f, 0x4f, 0xc1, 0xc4, 0xee, 0x39,
	0x89, 0x7e, 0x36, 0x0c, 0x49, 0x9f, 0xb4, 0x2d, 0xd7, 0x91, 0x35, 0xfc, 0xd9, 0xf0, 0x4e, 0xed,
	0xbf, 0x8a, 0xff, 0x1f, 0x45, 0x07, 0xbc, 0xa6, 0x51, 0x37, 0x60, 0xeb, 0xda, 0x19, 0x3d, 0x85,
	0x3d, 0x8d, 0x60, 0xca, 0xb4, 0x33, 0xfc, 0xc8, 0xa6, 0x39, 0xae, 0xcf, 0xd6, 0x5f, 0xf8, 0x5c,
	0xd6, 0x01, 0x7b, 0x5d, 0xb7, 0x89, 0x48, 0x8e, 0xd9, 0xf6, 0x9e, 0xcb, 0x7a, 0xa6, 0x85, 0xb5,
	0x16, 0x71, 0x98, 0x8f, 0x6d, 0xed, 0x8c, 0x9e, 0x21, 0x41, 0xec, 0x09, 0x48, 0x10, 0x72, 0xa5,
	0xdc, 0x0d, 0x85, 0x04, 0xda, 0x16, 0x11, 0xb8, 0xae, 0x58, 0xee, 0x89, 0xf3, 0x3a, 0x74, 0x48,
	0xcf, 0x98, 0xe2, 0x28, 0xee, 0x54, 0x40, 0xfb, 0xc4, 0xb2, 0x10, 0x23, 0x5a, 0x24, 0x96, 0x75,
	0x99, 0x12, 0xf4, 0x31, 0x00, 0x1f, 0x8b, 0x94, 0x8a, 0x6a, 0x09, 0xcf, 0x77, 0x95, 0x41, 0xcf,
	0x22, 0xc5, 0xaa, 0x40, 0x5c, 0x25, 0xdb, 0x7a, 0x0a, 0x47, 0x22, 0x5a, 0x85, 0x34, 0xa6, 0x34,
	0xe8, 0x10, 0xc3, 0x77, 0x6d, 0x22, 0x8f, 0x7d, 0xe7, 0x06, 0x67, 0x0b, 0x86, 0xee, 0xda, 0x44,
	0x07, 0xdc, 0x95, 0xd1, 0x2f, 0x14, 0xc8, 0x12, 0xc7, 0xf4, 0x5c, 0xcb, 0x61, 0x06, 0x36, 0x4d,
	0x9f, 0x50, 0x2a, 0x5b, 0xc6, 0x83, 0x9d, 0x5a, 0xe0, 0x53, 0xf5, 0x89, 0x52, 0x76, 0xee, 0x15,
	0x0a, 0x05, 0x7e, 0x1c, 0xac, 0x6a, 0xb7, 0xf9, 0x89, 0xf0, 0x51, 0x4c, 0xee, 0x89, 0xab, 0xda,
	0xdd, 0xb9, 0x98, 0x62, 0x76, 0xb5, 0x38, 0x3b, 0x57, 0xb8, 0x53, 0xd5, 0x6e, 0xcb, 0x73, 0xe4,
	0xa3, 0x98, 0xdc, 0x13, 0x85, 0x57, 0x4f, 0x31, 0xfb, 0x68, 0x76, 0x46, 0x9f, 0x8c, 0x22, 0xaa,
	0x86, 0x01, 0x21, 0x03, 0x46, 0x4d, 0xb2, 0x86, 0x03, 0x9b, 0x89, 0x26, 0x95, 0x2e, 0x2f, 0x0c,
	0xbc, 0xfe, 0x8b, 0xa1, 0xff, 0x92, 0xc3, 0x48, 0x3b, 0xbc, 0x52, 0x5d, 0x19, 0xd2, 0x23, 0x6a,
	0xee, 0x73, 0x05, 0x52, 0xdd, 0xec, 0xa3, 0xf7, 0x61, 0xbc, 0xb7, 0x9b, 0xbc, 0x1b, 0x87, 0x15,
	0xff, 0xd6, 0x4e, 0x2d, 0xeb, 0x4f, 0x64, 0xb3, 0x3c, 0x25, 0xa3, 0xf7, 0xee, 0xac, 0x6e, 0xdd,
	0x9d, 0x9b, 0xd1, 0xd3, 0xdd, 0x9d, 0x5a, 0x32, 0xd1, 0x3c, 0x1c, 0xa4, 0xa4, 0xe5, 0x13, 0x66,
	0xec, 0xa9, 0x86, 0x6e, 0x03, 0x2e, 0xe8, 0x93, 0xa1, 0x45, 0xef, 0x6d, 0x1a, 0x8c, 0x53, 0x42,
	0x29, 0x9f, 0x85, 0xcc, 0xdd, 0x20, 0x8e, 0x6c, 0xeb, 0xe1, 0x8c, 0x50, 0x9f, 0x0c, 0xeb, 0x19,
	0xa9, 0x6e, 0x70, 0x6d, 0xee, 0xb9, 0x02, 0xd0, 0xdb, 0x4c, 0x74, 0x15, 0x12, 0xd8, 0x8f, 0xfe,
	0x27, 0xcf, 0xee, 0xd4, 0xde, 0xf3, 0xbf, 0x5d, 0x2e, 0xdf, 0xc3, 0xbe, 0x53, 0xc1, 0x5b, 0xb4,
	0x62, 0xe1, 0x4e, 0xa5, 0x72, 0x87, 0x27, 0xf6, 0xe1, 0x99, 0xf2, 0xe3, 0x0a, 0xaf, 0xa0, 0xd5,
	0x52, 0x2f, 0xdd, 0xc6, 0xc9, 0xef, 0x9d, 0x2a, 0x5e, 0xd0, 0xee, 0x9e, 0x9c, 0xd1, 0x39, 0x05,
	0x9d, 0x83, 0x34, 0x79, 0xc0, 0xf8, 0x10, 0xb1, 0x7b, 0x43, 0x28, 0xb7, 0x53, 0x3b, 0xec, 0x7f,
	0x43, 0x7d, 0x96, 0x2a, 0x67, 0xf9, 0xa2, 0x85, 0x4b, 0x65, 0xb5, 0xa4, 0xf1, 0xd5, 0x43, 0x64,
	0xbe, 0x64, 0xa2, 0x0f, 0x21, 0x1b, 0xad, 0x23, 0xba, 0xb5, 0xca, 0x6a, 0x3d, 0xd2, 0x77, 0x49,
	0xb9, 0x28, 0x0d, 0x6a, 0x07, 0x7e, 0xca, 0xef, 0x27, 0x93, 0xd2, 0x31, 0xfa, 0x39, 0x77, 0x0b,
	0x50, 0xff, 0x86, 0xa1, 0x2a, 0x80, 0xb8, 0x97, 0x1a, 0x62, 0xfa, 0x85, 0x4b, 0xce, 0xef, 0xd4,
	0xa6, 0xfd, 0xe3, 0x7c, 0x4b, 0xd4, 0x7b, 0x72, 0x61, 0x7b, 0xaa, 0x6b, 0x46, 0x4f, 0x09, 0xaf,
	0x65, 0xdc, 0x21, 0xb5, 0x0c, 0x80, 0x49, 0x3c, 0xdb, 0xdd, 0xee, 0x10, 0x87, 0xe5, 0x0a, 0x30,
	0x1a, 0x9d, 0x6e, 0x8f, 0xc3, 0x48, 0x78, 0xf0, 0x57, 0x76, 0xcf, 0xcb, 0xf0, 0xd7, 0xda, 0x24,
	0x8c, 0x79, 0x51, 0x2b, 0x4c, 0xfc, 0xbb, 0xa6, 0xe4, 0x57, 0x00, 0xf5, 0xd5, 0x1c, 0x45, 0xe7,
	0x60, 0x34, 0xfc, 0xde, 0xc0, 0x6f, 0x8f, 0x7c, 0x12, 0x7c, 0x6b, 0xdf, 0x42, 0xd5, 0x23, 0x8f,
	0xfc, 0xaf, 0x14, 0x50, 0xfb, 0xd4, 0x97, 0xc4, 0xad, 0x8b, 0xa2, 0x1b, 0x30, 0x1a, 0x5e, 0xc0,
	0x22, 0xf2, 0x77, 0xf6, 0x25, 0x4b, 0xd7, 0xa2, 0xfc, 0x2b, 0xa7, 0x8b, 0xa4, 0xf0, 0xe9, 0x12,
	0x57, 0x0c, 0x34, 0x5d, 0x7e, 0xad, 0xc0, 0xd1, 0xcb, 0x84, 0xf5, 0xaf, 0x85, 0xdc, 0x0f, 0x08,
	0x65, 0xff, 0x87, 0x0b, 0xf4, 0x59, 0x80, 0xde, 0xd7, 0x8c, 0xaf, 0xbc, 0x40, 0x5f, 0xe2, 0x26,
	0xd7, 0x31, 0xdd, 0xd0, 0x53, 0x6b, 0x91, 0x98, 0xff, 0xad, 0x02, 0xc7, 0xaf, 0x59, 0xb4, 0x3f,
	0x5a, 0x1a, 0x85, 0xfb, 0x35, 0x7c, 0xaf, 0x78, 0x83, 0xf8, 0x7f, 0xa9, 0xc0, 0xd1, 0xfa, 0x4b,
	0x92, 0x7d, 0x15, 0x92, 0x61, 0x05, 0xc9, 0xa0, 0xf7, 0x2f, 0xb9, 0x17, 0xc4, 0x2b, 0x11, 0x6f,
	0x10, 0x67, 0xf9, 0x77, 0x49, 0x38, 0xf2, 0x82, 0x20, 0xdb, 0x16, 0xe5, 0xe5, 0xf5, 0x09, 0xc0,
	0x65, 0xc2, 0xa2, 0x6a, 0xfe, 0x66, 0x1f, 0x72, 0xb1, 0xe3, 0xb1, 0xed, 0x5c, 0xe1, 0x55, 0x8b,
	0x3a, 0x9f, 0xfb, 0xec, 0x4f, 0x7f, 0xfb, 0xf1, 0xf0, 0x21, 0x84, 0x4a, 0x98, 0x96, 0xc2, 0xe0,
	0x35, 0x59, 0xda, 0xe8, 0xe7, 0x0a, 0x24, 0x2e, 0x13, 0x86, 0x4e, 0xee, 0xa5, 0xbd, 0xa4, 0x66,
	0x73, 0xfb, 0xa7, 0x2d, 0x7f, 0x45, 0xbc, 0xb3, 0x86, 0x2e, 0xf4, 0xde, 0x59, 0x7a, 0x68, 0x99,
	0xb4, 0xb8, 0xa7, 0x7a, 0xf6, 0x3c, 0x3f, 0x0e, 0x8d, 0x7a, 0xdf, 0xab, 0x1e, 0xa3, 0x1f, 0x29,
	0x70, 0x80, 0xd7, 0x24, 0xd2, 0xf6, 0xbe, 0xf5, 0xa5, 0x95, 0x9a, 0xcb, 0xef, 0x1b, 0x24, 0xcd,
	0xcf, 0x8b, 0x28, 0x35, 0x74, 0x32, 0x1e, 0xe5, 0x3e, 0x11, 0xa2, 0x7f, 0x2a, 0x90, 0xa8, 0xbf,
	0x28, 0x65, 0xf5, 0x37, 0x4b, 0xd9, 0x4f, 0x14, 0x11, 0xcd, 0x53, 0x25, 0xb7, 0x1c, 0x0f, 0x47,
	0x7e, 0x94, 0x7d, 0xa5, 0xdc, 0xc5, 0x6c, 0x63, 0x29, 0xac, 0x28, 0x73, 0xb7, 0xcf, 0xe5, 0xdf,
	0x7b, 0x3d, 0x68, 0x45, 0x99, 0x43, 0x4f, 0x15, 0x48, 0x5e, 0x24, 0x36, 0x61, 0x04, 0x0d, 0xd4,
	0xa1, 0x72, 0x5f, 0x51, 0xbb, 0xf9, 0x0b, 0x62, 0xa5, 0x95, 0xb9, 0x0f, 0x06, 0xc8, 0xbb, 0x08,
	0x3a, 0x5a, 0x52, 0xed, 0xfa, 0x9f, 0xff, 0x3a, 0x35, 0xf4, 0xe4, 0xf9, 0x94, 0xf2, 0xf9, 0xf3,
	0x29, 0xe5, 0x1f, 0xcf, 0xa7, 0x86, 0xfe, 0xf5, 0x7c, 0x4a, 0x79, 0xfa, 0xe5, 0xd4, 0xd0, 0xef,
	0xbf, 0x9c, 0x52, 0x6e, 0x97, 0xda, 0x6e, 0x91, 0xad, 0x13, 0xb6, 0x6e, 0x39, 0x6d, 0x5a, 0x74,
	0x08, 0xdb, 0x72, 0xfd, 0x8d, 0xd2, 0xee, 0x0f, 0xb6, 0x9b, 0xf3, 0x25, 0x6f, 0xa3, 0x5d, 0x62,
	0xcc, 0xf1, 0x9a, 0xcd, 0xa4, 0x08, 0x70, 0xfe, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x89, 0x1d,
	0x69, 0x10, 0x27, 0x17, 0x00, 0x00,
}

func (x ApplicationPubSub_MQTTProvider_QoS) String() string {
	s, ok := ApplicationPubSub_MQTTProvider_QoS_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ApplicationPubSubIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSubIdentifiers)
	if !ok {
		that2, ok := that.(ApplicationPubSubIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if this.PubSubId != that1.PubSubId {
		return false
	}
	return true
}
func (this *ApplicationPubSub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub)
	if !ok {
		that2, ok := that.(ApplicationPubSub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationPubSubIdentifiers.Equal(&that1.ApplicationPubSubIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Format != that1.Format {
		return false
	}
	if that1.Provider == nil {
		if this.Provider != nil {
			return false
		}
	} else if this.Provider == nil {
		return false
	} else if !this.Provider.Equal(that1.Provider) {
		return false
	}
	if this.BaseTopic != that1.BaseTopic {
		return false
	}
	if !this.DownlinkPush.Equal(that1.DownlinkPush) {
		return false
	}
	if !this.DownlinkReplace.Equal(that1.DownlinkReplace) {
		return false
	}
	if !this.UplinkMessage.Equal(that1.UplinkMessage) {
		return false
	}
	if !this.JoinAccept.Equal(that1.JoinAccept) {
		return false
	}
	if !this.DownlinkAck.Equal(that1.DownlinkAck) {
		return false
	}
	if !this.DownlinkNack.Equal(that1.DownlinkNack) {
		return false
	}
	if !this.DownlinkSent.Equal(that1.DownlinkSent) {
		return false
	}
	if !this.DownlinkFailed.Equal(that1.DownlinkFailed) {
		return false
	}
	if !this.DownlinkQueued.Equal(that1.DownlinkQueued) {
		return false
	}
	if !this.DownlinkQueueInvalidated.Equal(that1.DownlinkQueueInvalidated) {
		return false
	}
	if !this.LocationSolved.Equal(that1.LocationSolved) {
		return false
	}
	if !this.ServiceData.Equal(that1.ServiceData) {
		return false
	}
	return true
}
func (this *ApplicationPubSub_Nats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_Nats)
	if !ok {
		that2, ok := that.(ApplicationPubSub_Nats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Nats.Equal(that1.Nats) {
		return false
	}
	return true
}
func (this *ApplicationPubSub_Mqtt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_Mqtt)
	if !ok {
		that2, ok := that.(ApplicationPubSub_Mqtt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mqtt.Equal(that1.Mqtt) {
		return false
	}
	return true
}
func (this *ApplicationPubSub_AwsIot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_AwsIot)
	if !ok {
		that2, ok := that.(ApplicationPubSub_AwsIot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsIot.Equal(that1.AwsIot) {
		return false
	}
	return true
}
func (this *ApplicationPubSub_NATSProvider) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_NATSProvider)
	if !ok {
		that2, ok := that.(ApplicationPubSub_NATSProvider)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerUrl != that1.ServerUrl {
		return false
	}
	return true
}
func (this *ApplicationPubSub_MQTTProvider) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_MQTTProvider)
	if !ok {
		that2, ok := that.(ApplicationPubSub_MQTTProvider)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerUrl != that1.ServerUrl {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.SubscribeQos != that1.SubscribeQos {
		return false
	}
	if this.PublishQos != that1.PublishQos {
		return false
	}
	if this.UseTls != that1.UseTls {
		return false
	}
	if !bytes.Equal(this.TlsCa, that1.TlsCa) {
		return false
	}
	if !bytes.Equal(this.TlsClientCert, that1.TlsClientCert) {
		return false
	}
	if !bytes.Equal(this.TlsClientKey, that1.TlsClientKey) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if this.Headers[i] != that1.Headers[i] {
			return false
		}
	}
	return true
}
func (this *ApplicationPubSub_AWSIoTProvider) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_AWSIoTProvider)
	if !ok {
		that2, ok := that.(ApplicationPubSub_AWSIoTProvider)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if !this.AccessKey.Equal(that1.AccessKey) {
		return false
	}
	if !this.AssumeRole.Equal(that1.AssumeRole) {
		return false
	}
	if this.EndpointAddress != that1.EndpointAddress {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	return true
}
func (this *ApplicationPubSub_AWSIoTProvider_Default) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_AWSIoTProvider_Default)
	if !ok {
		that2, ok := that.(ApplicationPubSub_AWSIoTProvider_Default)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	return true
}
func (this *ApplicationPubSub_AWSIoTProvider_AccessKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_AWSIoTProvider_AccessKey)
	if !ok {
		that2, ok := that.(ApplicationPubSub_AWSIoTProvider_AccessKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessKeyId != that1.AccessKeyId {
		return false
	}
	if this.SecretAccessKey != that1.SecretAccessKey {
		return false
	}
	if this.SessionToken != that1.SessionToken {
		return false
	}
	return true
}
func (this *ApplicationPubSub_AWSIoTProvider_AssumeRole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_AWSIoTProvider_AssumeRole)
	if !ok {
		that2, ok := that.(ApplicationPubSub_AWSIoTProvider_AssumeRole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Arn != that1.Arn {
		return false
	}
	if this.ExternalId != that1.ExternalId {
		return false
	}
	if this.SessionDuration != nil && that1.SessionDuration != nil {
		if *this.SessionDuration != *that1.SessionDuration {
			return false
		}
	} else if this.SessionDuration != nil {
		return false
	} else if that1.SessionDuration != nil {
		return false
	}
	return true
}
func (this *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_AWSIoTProvider_DefaultIntegration)
	if !ok {
		that2, ok := that.(ApplicationPubSub_AWSIoTProvider_DefaultIntegration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StackName != that1.StackName {
		return false
	}
	return true
}
func (this *ApplicationPubSub_Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSub_Message)
	if !ok {
		that2, ok := that.(ApplicationPubSub_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	return true
}
func (this *ApplicationPubSubs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSubs)
	if !ok {
		that2, ok := that.(ApplicationPubSubs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pubsubs) != len(that1.Pubsubs) {
		return false
	}
	for i := range this.Pubsubs {
		if !this.Pubsubs[i].Equal(that1.Pubsubs[i]) {
			return false
		}
	}
	return true
}
func (this *ApplicationPubSubFormats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationPubSubFormats)
	if !ok {
		that2, ok := that.(ApplicationPubSubFormats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Formats) != len(that1.Formats) {
		return false
	}
	for i := range this.Formats {
		if this.Formats[i] != that1.Formats[i] {
			return false
		}
	}
	return true
}
func (this *GetApplicationPubSubRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetApplicationPubSubRequest)
	if !ok {
		that2, ok := that.(GetApplicationPubSubRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationPubSubIdentifiers.Equal(&that1.ApplicationPubSubIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListApplicationPubSubsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApplicationPubSubsRequest)
	if !ok {
		that2, ok := that.(ListApplicationPubSubsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationIdentifiers.Equal(&that1.ApplicationIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *SetApplicationPubSubRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetApplicationPubSubRequest)
	if !ok {
		that2, ok := that.(SetApplicationPubSubRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplicationPubSub.Equal(&that1.ApplicationPubSub) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApplicationPubSubRegistryClient is the client API for ApplicationPubSubRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationPubSubRegistryClient interface {
	GetFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ApplicationPubSubFormats, error)
	Get(ctx context.Context, in *GetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error)
	List(ctx context.Context, in *ListApplicationPubSubsRequest, opts ...grpc.CallOption) (*ApplicationPubSubs, error)
	Set(ctx context.Context, in *SetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error)
	Delete(ctx context.Context, in *ApplicationPubSubIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type applicationPubSubRegistryClient struct {
	cc *grpc.ClientConn
}

func NewApplicationPubSubRegistryClient(cc *grpc.ClientConn) ApplicationPubSubRegistryClient {
	return &applicationPubSubRegistryClient{cc}
}

func (c *applicationPubSubRegistryClient) GetFormats(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ApplicationPubSubFormats, error) {
	out := new(ApplicationPubSubFormats)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/GetFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) Get(ctx context.Context, in *GetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error) {
	out := new(ApplicationPubSub)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) List(ctx context.Context, in *ListApplicationPubSubsRequest, opts ...grpc.CallOption) (*ApplicationPubSubs, error) {
	out := new(ApplicationPubSubs)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) Set(ctx context.Context, in *SetApplicationPubSubRequest, opts ...grpc.CallOption) (*ApplicationPubSub, error) {
	out := new(ApplicationPubSub)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationPubSubRegistryClient) Delete(ctx context.Context, in *ApplicationPubSubIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ApplicationPubSubRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationPubSubRegistryServer is the server API for ApplicationPubSubRegistry service.
type ApplicationPubSubRegistryServer interface {
	GetFormats(context.Context, *types.Empty) (*ApplicationPubSubFormats, error)
	Get(context.Context, *GetApplicationPubSubRequest) (*ApplicationPubSub, error)
	List(context.Context, *ListApplicationPubSubsRequest) (*ApplicationPubSubs, error)
	Set(context.Context, *SetApplicationPubSubRequest) (*ApplicationPubSub, error)
	Delete(context.Context, *ApplicationPubSubIdentifiers) (*types.Empty, error)
}

// UnimplementedApplicationPubSubRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationPubSubRegistryServer struct {
}

func (*UnimplementedApplicationPubSubRegistryServer) GetFormats(ctx context.Context, req *types.Empty) (*ApplicationPubSubFormats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormats not implemented")
}
func (*UnimplementedApplicationPubSubRegistryServer) Get(ctx context.Context, req *GetApplicationPubSubRequest) (*ApplicationPubSub, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedApplicationPubSubRegistryServer) List(ctx context.Context, req *ListApplicationPubSubsRequest) (*ApplicationPubSubs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedApplicationPubSubRegistryServer) Set(ctx context.Context, req *SetApplicationPubSubRequest) (*ApplicationPubSub, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedApplicationPubSubRegistryServer) Delete(ctx context.Context, req *ApplicationPubSubIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterApplicationPubSubRegistryServer(s *grpc.Server, srv ApplicationPubSubRegistryServer) {
	s.RegisterService(&_ApplicationPubSubRegistry_serviceDesc, srv)
}

func _ApplicationPubSubRegistry_GetFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).GetFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/GetFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).GetFormats(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationPubSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).Get(ctx, req.(*GetApplicationPubSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationPubSubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).List(ctx, req.(*ListApplicationPubSubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationPubSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).Set(ctx, req.(*SetApplicationPubSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationPubSubRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationPubSubIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationPubSubRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ApplicationPubSubRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationPubSubRegistryServer).Delete(ctx, req.(*ApplicationPubSubIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationPubSubRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ApplicationPubSubRegistry",
	HandlerType: (*ApplicationPubSubRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFormats",
			Handler:    _ApplicationPubSubRegistry_GetFormats_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationPubSubRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationPubSubRegistry_List_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ApplicationPubSubRegistry_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationPubSubRegistry_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/applicationserver_pubsub.proto",
}

func (this *ApplicationPubSubIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSubIdentifiers{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIdentifiers), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`PubSubId:` + fmt.Sprintf("%v", this.PubSubId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub{`,
		`ApplicationPubSubIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationPubSubIdentifiers.String(), "ApplicationPubSubIdentifiers", "ApplicationPubSubIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Format:` + fmt.Sprintf("%v", this.Format) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`BaseTopic:` + fmt.Sprintf("%v", this.BaseTopic) + `,`,
		`DownlinkPush:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkPush), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkReplace:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkReplace), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`UplinkMessage:` + strings.Replace(fmt.Sprintf("%v", this.UplinkMessage), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`JoinAccept:` + strings.Replace(fmt.Sprintf("%v", this.JoinAccept), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkAck:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkAck), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkNack:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkNack), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkSent:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkSent), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkFailed:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkFailed), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkQueued:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueued), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`DownlinkQueueInvalidated:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkQueueInvalidated), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`LocationSolved:` + strings.Replace(fmt.Sprintf("%v", this.LocationSolved), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`ServiceData:` + strings.Replace(fmt.Sprintf("%v", this.ServiceData), "ApplicationPubSub_Message", "ApplicationPubSub_Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_Nats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_Nats{`,
		`Nats:` + strings.Replace(fmt.Sprintf("%v", this.Nats), "ApplicationPubSub_NATSProvider", "ApplicationPubSub_NATSProvider", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_Mqtt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_Mqtt{`,
		`Mqtt:` + strings.Replace(fmt.Sprintf("%v", this.Mqtt), "ApplicationPubSub_MQTTProvider", "ApplicationPubSub_MQTTProvider", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_AwsIot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_AwsIot{`,
		`AwsIot:` + strings.Replace(fmt.Sprintf("%v", this.AwsIot), "ApplicationPubSub_AWSIoTProvider", "ApplicationPubSub_AWSIoTProvider", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_NATSProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_NATSProvider{`,
		`ServerUrl:` + fmt.Sprintf("%v", this.ServerUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_MQTTProvider) String() string {
	if this == nil {
		return "nil"
	}
	keysForHeaders := make([]string, 0, len(this.Headers))
	for k := range this.Headers {
		keysForHeaders = append(keysForHeaders, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeaders)
	mapStringForHeaders := "map[string]string{"
	for _, k := range keysForHeaders {
		mapStringForHeaders += fmt.Sprintf("%v: %v,", k, this.Headers[k])
	}
	mapStringForHeaders += "}"
	s := strings.Join([]string{`&ApplicationPubSub_MQTTProvider{`,
		`ServerUrl:` + fmt.Sprintf("%v", this.ServerUrl) + `,`,
		`ClientId:` + fmt.Sprintf("%v", this.ClientId) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`SubscribeQos:` + fmt.Sprintf("%v", this.SubscribeQos) + `,`,
		`PublishQos:` + fmt.Sprintf("%v", this.PublishQos) + `,`,
		`UseTls:` + fmt.Sprintf("%v", this.UseTls) + `,`,
		`TlsCa:` + fmt.Sprintf("%v", this.TlsCa) + `,`,
		`TlsClientCert:` + fmt.Sprintf("%v", this.TlsClientCert) + `,`,
		`TlsClientKey:` + fmt.Sprintf("%v", this.TlsClientKey) + `,`,
		`Headers:` + mapStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_AWSIoTProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_AWSIoTProvider{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`AccessKey:` + strings.Replace(fmt.Sprintf("%v", this.AccessKey), "ApplicationPubSub_AWSIoTProvider_AccessKey", "ApplicationPubSub_AWSIoTProvider_AccessKey", 1) + `,`,
		`AssumeRole:` + strings.Replace(fmt.Sprintf("%v", this.AssumeRole), "ApplicationPubSub_AWSIoTProvider_AssumeRole", "ApplicationPubSub_AWSIoTProvider_AssumeRole", 1) + `,`,
		`EndpointAddress:` + fmt.Sprintf("%v", this.EndpointAddress) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_AWSIoTProvider_Default) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_AWSIoTProvider_Default{`,
		`Default:` + strings.Replace(fmt.Sprintf("%v", this.Default), "ApplicationPubSub_AWSIoTProvider_DefaultIntegration", "ApplicationPubSub_AWSIoTProvider_DefaultIntegration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_AWSIoTProvider_AccessKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_AWSIoTProvider_AccessKey{`,
		`AccessKeyId:` + fmt.Sprintf("%v", this.AccessKeyId) + `,`,
		`SecretAccessKey:` + fmt.Sprintf("%v", this.SecretAccessKey) + `,`,
		`SessionToken:` + fmt.Sprintf("%v", this.SessionToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_AWSIoTProvider_AssumeRole) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_AWSIoTProvider_AssumeRole{`,
		`Arn:` + fmt.Sprintf("%v", this.Arn) + `,`,
		`ExternalId:` + fmt.Sprintf("%v", this.ExternalId) + `,`,
		`SessionDuration:` + strings.Replace(fmt.Sprintf("%v", this.SessionDuration), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_AWSIoTProvider_DefaultIntegration{`,
		`StackName:` + fmt.Sprintf("%v", this.StackName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSub_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPubSub_Message{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSubs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPubsubs := "[]*ApplicationPubSub{"
	for _, f := range this.Pubsubs {
		repeatedStringForPubsubs += strings.Replace(f.String(), "ApplicationPubSub", "ApplicationPubSub", 1) + ","
	}
	repeatedStringForPubsubs += "}"
	s := strings.Join([]string{`&ApplicationPubSubs{`,
		`Pubsubs:` + repeatedStringForPubsubs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPubSubFormats) String() string {
	if this == nil {
		return "nil"
	}
	keysForFormats := make([]string, 0, len(this.Formats))
	for k := range this.Formats {
		keysForFormats = append(keysForFormats, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFormats)
	mapStringForFormats := "map[string]string{"
	for _, k := range keysForFormats {
		mapStringForFormats += fmt.Sprintf("%v: %v,", k, this.Formats[k])
	}
	mapStringForFormats += "}"
	s := strings.Join([]string{`&ApplicationPubSubFormats{`,
		`Formats:` + mapStringForFormats + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetApplicationPubSubRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetApplicationPubSubRequest{`,
		`ApplicationPubSubIdentifiers:` + strings.Replace(strings.Replace(this.ApplicationPubSubIdentifiers.String(), "ApplicationPubSubIdentifiers", "ApplicationPubSubIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApplicationPubSubsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListApplicationPubSubsRequest{`,
		`ApplicationIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ApplicationIdentifiers), "ApplicationIdentifiers", "ApplicationIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetApplicationPubSubRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetApplicationPubSubRequest{`,
		`ApplicationPubSub:` + strings.Replace(strings.Replace(this.ApplicationPubSub.String(), "ApplicationPubSub", "ApplicationPubSub", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApplicationserverPubsub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
