// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *Client) SetFields(src *Client, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				var newDst, newSrc *ClientIdentifiers
				if (src == nil || src.Ids == nil) && dst.Ids == nil {
					continue
				}
				if src != nil {
					newSrc = src.Ids
				}
				if dst.Ids != nil {
					newDst = dst.Ids
				} else {
					newDst = &ClientIdentifiers{}
					dst.Ids = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Ids = src.Ids
				} else {
					dst.Ids = nil
				}
			}
		case "created_at":
			if len(subs) > 0 {
				return fmt.Errorf("'created_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CreatedAt = src.CreatedAt
			} else {
				dst.CreatedAt = nil
			}
		case "updated_at":
			if len(subs) > 0 {
				return fmt.Errorf("'updated_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UpdatedAt = src.UpdatedAt
			} else {
				dst.UpdatedAt = nil
			}
		case "deleted_at":
			if len(subs) > 0 {
				return fmt.Errorf("'deleted_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DeletedAt = src.DeletedAt
			} else {
				dst.DeletedAt = nil
			}
		case "name":
			if len(subs) > 0 {
				return fmt.Errorf("'name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Name = src.Name
			} else {
				var zero string
				dst.Name = zero
			}
		case "description":
			if len(subs) > 0 {
				return fmt.Errorf("'description' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Description = src.Description
			} else {
				var zero string
				dst.Description = zero
			}
		case "attributes":
			if len(subs) > 0 {
				return fmt.Errorf("'attributes' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Attributes = src.Attributes
			} else {
				dst.Attributes = nil
			}
		case "contact_info":
			if len(subs) > 0 {
				return fmt.Errorf("'contact_info' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ContactInfo = src.ContactInfo
			} else {
				dst.ContactInfo = nil
			}
		case "administrative_contact":
			if len(subs) > 0 {
				var newDst, newSrc *OrganizationOrUserIdentifiers
				if (src == nil || src.AdministrativeContact == nil) && dst.AdministrativeContact == nil {
					continue
				}
				if src != nil {
					newSrc = src.AdministrativeContact
				}
				if dst.AdministrativeContact != nil {
					newDst = dst.AdministrativeContact
				} else {
					newDst = &OrganizationOrUserIdentifiers{}
					dst.AdministrativeContact = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.AdministrativeContact = src.AdministrativeContact
				} else {
					dst.AdministrativeContact = nil
				}
			}
		case "technical_contact":
			if len(subs) > 0 {
				var newDst, newSrc *OrganizationOrUserIdentifiers
				if (src == nil || src.TechnicalContact == nil) && dst.TechnicalContact == nil {
					continue
				}
				if src != nil {
					newSrc = src.TechnicalContact
				}
				if dst.TechnicalContact != nil {
					newDst = dst.TechnicalContact
				} else {
					newDst = &OrganizationOrUserIdentifiers{}
					dst.TechnicalContact = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.TechnicalContact = src.TechnicalContact
				} else {
					dst.TechnicalContact = nil
				}
			}
		case "secret":
			if len(subs) > 0 {
				return fmt.Errorf("'secret' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Secret = src.Secret
			} else {
				var zero string
				dst.Secret = zero
			}
		case "redirect_uris":
			if len(subs) > 0 {
				return fmt.Errorf("'redirect_uris' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RedirectUris = src.RedirectUris
			} else {
				dst.RedirectUris = nil
			}
		case "logout_redirect_uris":
			if len(subs) > 0 {
				return fmt.Errorf("'logout_redirect_uris' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.LogoutRedirectUris = src.LogoutRedirectUris
			} else {
				dst.LogoutRedirectUris = nil
			}
		case "state":
			if len(subs) > 0 {
				return fmt.Errorf("'state' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.State = src.State
			} else {
				dst.State = 0
			}
		case "state_description":
			if len(subs) > 0 {
				return fmt.Errorf("'state_description' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.StateDescription = src.StateDescription
			} else {
				var zero string
				dst.StateDescription = zero
			}
		case "skip_authorization":
			if len(subs) > 0 {
				return fmt.Errorf("'skip_authorization' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SkipAuthorization = src.SkipAuthorization
			} else {
				var zero bool
				dst.SkipAuthorization = zero
			}
		case "endorsed":
			if len(subs) > 0 {
				return fmt.Errorf("'endorsed' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Endorsed = src.Endorsed
			} else {
				var zero bool
				dst.Endorsed = zero
			}
		case "grants":
			if len(subs) > 0 {
				return fmt.Errorf("'grants' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Grants = src.Grants
			} else {
				dst.Grants = nil
			}
		case "rights":
			if len(subs) > 0 {
				return fmt.Errorf("'rights' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Rights = src.Rights
			} else {
				dst.Rights = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *Clients) SetFields(src *Clients, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "clients":
			if len(subs) > 0 {
				return fmt.Errorf("'clients' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Clients = src.Clients
			} else {
				dst.Clients = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetClientRequest) SetFields(src *GetClientRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "client_ids":
			if len(subs) > 0 {
				var newDst, newSrc *ClientIdentifiers
				if (src == nil || src.ClientIds == nil) && dst.ClientIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.ClientIds
				}
				if dst.ClientIds != nil {
					newDst = dst.ClientIds
				} else {
					newDst = &ClientIdentifiers{}
					dst.ClientIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ClientIds = src.ClientIds
				} else {
					dst.ClientIds = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListClientsRequest) SetFields(src *ListClientsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "collaborator":
			if len(subs) > 0 {
				var newDst, newSrc *OrganizationOrUserIdentifiers
				if (src == nil || src.Collaborator == nil) && dst.Collaborator == nil {
					continue
				}
				if src != nil {
					newSrc = src.Collaborator
				}
				if dst.Collaborator != nil {
					newDst = dst.Collaborator
				} else {
					newDst = &OrganizationOrUserIdentifiers{}
					dst.Collaborator = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Collaborator = src.Collaborator
				} else {
					dst.Collaborator = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}
		case "deleted":
			if len(subs) > 0 {
				return fmt.Errorf("'deleted' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Deleted = src.Deleted
			} else {
				var zero bool
				dst.Deleted = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *CreateClientRequest) SetFields(src *CreateClientRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "client":
			if len(subs) > 0 {
				var newDst, newSrc *Client
				if (src == nil || src.Client == nil) && dst.Client == nil {
					continue
				}
				if src != nil {
					newSrc = src.Client
				}
				if dst.Client != nil {
					newDst = dst.Client
				} else {
					newDst = &Client{}
					dst.Client = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Client = src.Client
				} else {
					dst.Client = nil
				}
			}
		case "collaborator":
			if len(subs) > 0 {
				var newDst, newSrc *OrganizationOrUserIdentifiers
				if (src == nil || src.Collaborator == nil) && dst.Collaborator == nil {
					continue
				}
				if src != nil {
					newSrc = src.Collaborator
				}
				if dst.Collaborator != nil {
					newDst = dst.Collaborator
				} else {
					newDst = &OrganizationOrUserIdentifiers{}
					dst.Collaborator = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Collaborator = src.Collaborator
				} else {
					dst.Collaborator = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *UpdateClientRequest) SetFields(src *UpdateClientRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "client":
			if len(subs) > 0 {
				var newDst, newSrc *Client
				if (src == nil || src.Client == nil) && dst.Client == nil {
					continue
				}
				if src != nil {
					newSrc = src.Client
				}
				if dst.Client != nil {
					newDst = dst.Client
				} else {
					newDst = &Client{}
					dst.Client = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Client = src.Client
				} else {
					dst.Client = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListClientCollaboratorsRequest) SetFields(src *ListClientCollaboratorsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "client_ids":
			if len(subs) > 0 {
				var newDst, newSrc *ClientIdentifiers
				if (src == nil || src.ClientIds == nil) && dst.ClientIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.ClientIds
				}
				if dst.ClientIds != nil {
					newDst = dst.ClientIds
				} else {
					newDst = &ClientIdentifiers{}
					dst.ClientIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ClientIds = src.ClientIds
				} else {
					dst.ClientIds = nil
				}
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetClientCollaboratorRequest) SetFields(src *GetClientCollaboratorRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "client_ids":
			if len(subs) > 0 {
				var newDst, newSrc *ClientIdentifiers
				if (src == nil || src.ClientIds == nil) && dst.ClientIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.ClientIds
				}
				if dst.ClientIds != nil {
					newDst = dst.ClientIds
				} else {
					newDst = &ClientIdentifiers{}
					dst.ClientIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ClientIds = src.ClientIds
				} else {
					dst.ClientIds = nil
				}
			}
		case "collaborator":
			if len(subs) > 0 {
				var newDst, newSrc *OrganizationOrUserIdentifiers
				if (src == nil || src.Collaborator == nil) && dst.Collaborator == nil {
					continue
				}
				if src != nil {
					newSrc = src.Collaborator
				}
				if dst.Collaborator != nil {
					newDst = dst.Collaborator
				} else {
					newDst = &OrganizationOrUserIdentifiers{}
					dst.Collaborator = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Collaborator = src.Collaborator
				} else {
					dst.Collaborator = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *SetClientCollaboratorRequest) SetFields(src *SetClientCollaboratorRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "client_ids":
			if len(subs) > 0 {
				var newDst, newSrc *ClientIdentifiers
				if (src == nil || src.ClientIds == nil) && dst.ClientIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.ClientIds
				}
				if dst.ClientIds != nil {
					newDst = dst.ClientIds
				} else {
					newDst = &ClientIdentifiers{}
					dst.ClientIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ClientIds = src.ClientIds
				} else {
					dst.ClientIds = nil
				}
			}
		case "collaborator":
			if len(subs) > 0 {
				var newDst, newSrc *Collaborator
				if (src == nil || src.Collaborator == nil) && dst.Collaborator == nil {
					continue
				}
				if src != nil {
					newSrc = src.Collaborator
				}
				if dst.Collaborator != nil {
					newDst = dst.Collaborator
				} else {
					newDst = &Collaborator{}
					dst.Collaborator = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Collaborator = src.Collaborator
				} else {
					dst.Collaborator = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
