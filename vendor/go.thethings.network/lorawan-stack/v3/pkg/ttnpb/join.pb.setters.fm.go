// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	fmt "fmt"
	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
	time "time"
)

func (dst *JoinRequest) SetFields(src *JoinRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "raw_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'raw_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RawPayload = src.RawPayload
			} else {
				dst.RawPayload = nil
			}
		case "payload":
			if len(subs) > 0 {
				var newDst, newSrc *Message
				if (src == nil || src.Payload == nil) && dst.Payload == nil {
					continue
				}
				if src != nil {
					newSrc = src.Payload
				}
				if dst.Payload != nil {
					newDst = dst.Payload
				} else {
					newDst = &Message{}
					dst.Payload = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Payload = src.Payload
				} else {
					dst.Payload = nil
				}
			}
		case "dev_addr":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_addr' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevAddr = src.DevAddr
			} else {
				var zero go_thethings_network_lorawan_stack_v3_pkg_types.DevAddr
				dst.DevAddr = zero
			}
		case "selected_mac_version":
			if len(subs) > 0 {
				return fmt.Errorf("'selected_mac_version' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SelectedMacVersion = src.SelectedMacVersion
			} else {
				var zero MACVersion
				dst.SelectedMacVersion = zero
			}
		case "net_id":
			if len(subs) > 0 {
				return fmt.Errorf("'net_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NetId = src.NetId
			} else {
				var zero go_thethings_network_lorawan_stack_v3_pkg_types.NetID
				dst.NetId = zero
			}
		case "downlink_settings":
			if len(subs) > 0 {
				var newDst, newSrc *DLSettings
				if src != nil {
					newSrc = &src.DownlinkSettings
				}
				newDst = &dst.DownlinkSettings
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkSettings = src.DownlinkSettings
				} else {
					var zero DLSettings
					dst.DownlinkSettings = zero
				}
			}
		case "rx_delay":
			if len(subs) > 0 {
				return fmt.Errorf("'rx_delay' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RxDelay = src.RxDelay
			} else {
				var zero RxDelay
				dst.RxDelay = zero
			}
		case "cf_list":
			if len(subs) > 0 {
				var newDst, newSrc *CFList
				if (src == nil || src.CfList == nil) && dst.CfList == nil {
					continue
				}
				if src != nil {
					newSrc = src.CfList
				}
				if dst.CfList != nil {
					newDst = dst.CfList
				} else {
					newDst = &CFList{}
					dst.CfList = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.CfList = src.CfList
				} else {
					dst.CfList = nil
				}
			}
		case "correlation_ids":
			if len(subs) > 0 {
				return fmt.Errorf("'correlation_ids' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CorrelationIds = src.CorrelationIds
			} else {
				dst.CorrelationIds = nil
			}
		case "consumed_airtime":
			if len(subs) > 0 {
				return fmt.Errorf("'consumed_airtime' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ConsumedAirtime = src.ConsumedAirtime
			} else {
				dst.ConsumedAirtime = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *JoinResponse) SetFields(src *JoinResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "raw_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'raw_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RawPayload = src.RawPayload
			} else {
				dst.RawPayload = nil
			}
		case "session_keys":
			if len(subs) > 0 {
				var newDst, newSrc *SessionKeys
				if src != nil {
					newSrc = &src.SessionKeys
				}
				newDst = &dst.SessionKeys
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.SessionKeys = src.SessionKeys
				} else {
					var zero SessionKeys
					dst.SessionKeys = zero
				}
			}
		case "lifetime":
			if len(subs) > 0 {
				return fmt.Errorf("'lifetime' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Lifetime = src.Lifetime
			} else {
				var zero time.Duration
				dst.Lifetime = zero
			}
		case "correlation_ids":
			if len(subs) > 0 {
				return fmt.Errorf("'correlation_ids' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CorrelationIds = src.CorrelationIds
			} else {
				dst.CorrelationIds = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
