// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v1.0.5
// - protoc              v3.9.1
// source: lorawan-stack/api/metadata.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForLocation adds flags to select fields in Location.
func AddSelectFlagsForLocation(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("latitude", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("latitude", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("longitude", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("longitude", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("altitude", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("altitude", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("accuracy", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("accuracy", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("source", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("source", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forLocation message from select flags.
func PathsFromSelectFlagsForLocation(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("latitude", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("latitude", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("longitude", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("longitude", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("altitude", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("altitude", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("accuracy", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("accuracy", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("source", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("source", prefix))
	}
	return paths, nil
}

// AddSetFlagsForLocation adds flags to select fields in Location.
func AddSetFlagsForLocation(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewFloat64Flag(flagsplugin.Prefix("latitude", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewFloat64Flag(flagsplugin.Prefix("longitude", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewInt32Flag(flagsplugin.Prefix("altitude", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewInt32Flag(flagsplugin.Prefix("accuracy", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the Location message from flags.
func (m *Location) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetFloat64(flags, flagsplugin.Prefix("latitude", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Latitude = val
		paths = append(paths, flagsplugin.Prefix("latitude", prefix))
	}
	if val, changed, err := flagsplugin.GetFloat64(flags, flagsplugin.Prefix("longitude", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Longitude = val
		paths = append(paths, flagsplugin.Prefix("longitude", prefix))
	}
	if val, changed, err := flagsplugin.GetInt32(flags, flagsplugin.Prefix("altitude", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Altitude = val
		paths = append(paths, flagsplugin.Prefix("altitude", prefix))
	}
	if val, changed, err := flagsplugin.GetInt32(flags, flagsplugin.Prefix("accuracy", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Accuracy = val
		paths = append(paths, flagsplugin.Prefix("accuracy", prefix))
	}
	return paths, nil
}
