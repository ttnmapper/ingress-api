// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v1.0.5
// - protoc              v3.9.1
// source: lorawan-stack/api/applicationserver_packages.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForApplicationPackageAssociationIdentifiers adds flags to select fields in ApplicationPackageAssociationIdentifiers.
func AddSelectFlagsForApplicationPackageAssociationIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("end-device-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("end-device-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end-device-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-port", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-port", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPackageAssociationIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationPackageAssociationIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("end_device_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("end_device_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end_device_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f_port", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("f_port", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPackageAssociationIdentifiers adds flags to select fields in ApplicationPackageAssociationIdentifiers.
func AddSetFlagsForApplicationPackageAssociationIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end-device-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-port", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ApplicationPackageAssociationIdentifiers message from flags.
func (m *ApplicationPackageAssociationIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("end_device_ids", prefix)); changed {
		if m.EndDeviceIds == nil {
			m.EndDeviceIds = &EndDeviceIdentifiers{}
		}
		if setPaths, err := m.EndDeviceIds.SetFromFlags(flags, flagsplugin.Prefix("end_device_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f_port", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FPort = val
		paths = append(paths, flagsplugin.Prefix("f_port", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPackageAssociation adds flags to select fields in ApplicationPackageAssociation.
func AddSelectFlagsForApplicationPackageAssociation(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("package-name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("package-name", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPackageAssociation message from select flags.
func PathsFromSelectFlagsForApplicationPackageAssociation(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("package_name", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("package_name", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPackageAssociation adds flags to select fields in ApplicationPackageAssociation.
func AddSetFlagsForApplicationPackageAssociation(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForApplicationPackageAssociationIdentifiers(flags, flagsplugin.Prefix("ids", prefix), true)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("package-name", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping Data because this WKT is currently not supported.
}

// SetFromFlags sets the ApplicationPackageAssociation message from flags.
func (m *ApplicationPackageAssociation) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix)); changed {
		if m.Ids == nil {
			m.Ids = &ApplicationPackageAssociationIdentifiers{}
		}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("package_name", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.PackageName = val
		paths = append(paths, flagsplugin.Prefix("package_name", prefix))
	}
	// FIXME: Skipping Data because this WKT is not supported.
	return paths, nil
}

// AddSelectFlagsForApplicationPackageDefaultAssociationIdentifiers adds flags to select fields in ApplicationPackageDefaultAssociationIdentifiers.
func AddSelectFlagsForApplicationPackageDefaultAssociationIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-port", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-port", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPackageDefaultAssociationIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationPackageDefaultAssociationIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f_port", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("f_port", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPackageDefaultAssociationIdentifiers adds flags to select fields in ApplicationPackageDefaultAssociationIdentifiers.
func AddSetFlagsForApplicationPackageDefaultAssociationIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-port", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ApplicationPackageDefaultAssociationIdentifiers message from flags.
func (m *ApplicationPackageDefaultAssociationIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application_ids", prefix)); changed {
		if m.ApplicationIds == nil {
			m.ApplicationIds = &ApplicationIdentifiers{}
		}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f_port", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FPort = val
		paths = append(paths, flagsplugin.Prefix("f_port", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPackageDefaultAssociation adds flags to select fields in ApplicationPackageDefaultAssociation.
func AddSelectFlagsForApplicationPackageDefaultAssociation(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("package-name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("package-name", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPackageDefaultAssociation message from select flags.
func PathsFromSelectFlagsForApplicationPackageDefaultAssociation(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("package_name", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("package_name", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPackageDefaultAssociation adds flags to select fields in ApplicationPackageDefaultAssociation.
func AddSetFlagsForApplicationPackageDefaultAssociation(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForApplicationPackageDefaultAssociationIdentifiers(flags, flagsplugin.Prefix("ids", prefix), true)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("package-name", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping Data because this WKT is currently not supported.
}

// SetFromFlags sets the ApplicationPackageDefaultAssociation message from flags.
func (m *ApplicationPackageDefaultAssociation) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix)); changed {
		if m.Ids == nil {
			m.Ids = &ApplicationPackageDefaultAssociationIdentifiers{}
		}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("package_name", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.PackageName = val
		paths = append(paths, flagsplugin.Prefix("package_name", prefix))
	}
	// FIXME: Skipping Data because this WKT is not supported.
	return paths, nil
}
